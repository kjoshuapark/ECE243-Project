
D:/Files/Workspace/FPGA/243/Project/ECE243-Project/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	28 06 00 00 2c 06 00 00 30 06 00 00 34 06 00 00     (...,...0...4...
  30:	38 06 00 00 98 0b 00 00 e8 05 00 00 3c 06 00 00     8...........<...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000296 	bl	b34 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000c80 	.word	0x00000c80

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000010c0 	.word	0x000010c0

00000124 <__cs3_heap_start_ptr>:
 124:	00001100 	.word	0x00001100

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000010c8 	.word	0x000010c8
 170:	000010cb 	.word	0x000010cb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000010c8 	.word	0x000010c8
 1bc:	000010c8 	.word	0x000010c8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000010c8 	.word	0x000010c8
 200:	00000000 	.word	0x00000000
 204:	00000c24 	.word	0x00000c24

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000c24 	.word	0x00000c24
 250:	000010cc 	.word	0x000010cc
 254:	00000c80 	.word	0x00000c80
 258:	00000000 	.word	0x00000000

0000025c <config_interval_timer>:
        (int *)TIMER_BASE; // interal timer base address

    /* set the interval timer period for scrolling the HEX displays */
	float interval = 1/60; //60 FPS
    int counter                 = interval * 100000000; // 1/(100 MHz) x 5x10^6 = 50 msec
    *(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
 25c:	e3a03a02 	mov	r3, #8192	; 0x2000
 260:	e34f3f20 	movt	r3, #65312	; 0xff20
 264:	e3a02000 	mov	r2, #0
 268:	e5832008 	str	r2, [r3, #8]
    *(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
 26c:	e583200c 	str	r2, [r3, #12]

    /* start interval timer, enable its interrupts */
    *(interval_timer_ptr + 1) = 0x7; // STOP = 0, START = 1, CONT = 1, ITO = 1
 270:	e3a02007 	mov	r2, #7
 274:	e5832004 	str	r2, [r3, #4]
 278:	e12fff1e 	bx	lr

0000027c <config_KEYs>:

/* setup the KEY interrupts in the FPGA */
void config_KEYs(){
    volatile int * KEY_ptr = (int *)KEY_BASE; // pushbutton KEY address

    *(KEY_ptr + 2) = 0xF; // enable interrupts for KEY[0-3]
 27c:	e3a03000 	mov	r3, #0
 280:	e34f3f20 	movt	r3, #65312	; 0xff20
 284:	e3a0200f 	mov	r2, #15
 288:	e5832058 	str	r2, [r3, #88]	; 0x58
 28c:	e12fff1e 	bx	lr

00000290 <main>:
void enable_A9_interrupts(void);

void scene_draw();
void clear();
void logic();
int main(void){
 290:	e92d4008 	push	{r3, lr}
    /* Read location of the pixel buffer from the pixel buffer controller */
	
	set_A9_IRQ_stack();      // initialize the stack pointer for IRQ mode
 294:	eb0000e9 	bl	640 <set_A9_IRQ_stack>
    config_GIC();            // configure the general interrupt controller
 298:	eb0000f2 	bl	668 <config_GIC>
    config_interval_timer(); // configure Altera interval timer to generate
 29c:	ebffffee 	bl	25c <config_interval_timer>
                             // interrupts
    config_KEYs();           // configure pushbutton KEYs to generate interrupts
 2a0:	ebfffff5 	bl	27c <config_KEYs>

    enable_A9_interrupts(); // enable interrupts
 2a4:	eb0000ec 	bl	65c <enable_A9_interrupts>
	
	
	clear_screen();
 2a8:	eb000026 	bl	348 <clear_screen>
	while(1){
		clear();
 2ac:	eb00014c 	bl	7e4 <clear>
		logic();
 2b0:	eb0000f8 	bl	698 <logic>
		scene_draw();
 2b4:	eb000136 	bl	794 <scene_draw>
		wait_for_vsync();
 2b8:	eb00009b 	bl	52c <wait_for_vsync>
 2bc:	eafffffa 	b	2ac <main+0x1c>

000002c0 <rgb24to16>:
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
	short int g5 = (short int) g8/4;
 2c0:	e2813003 	add	r3, r1, #3
 2c4:	e3510000 	cmp	r1, #0
 2c8:	b1a01003 	movlt	r1, r3
 2cc:	e1a01141 	asr	r1, r1, #2
	short int b5 = (short int) b8/8;
 2d0:	e2823007 	add	r3, r2, #7
 2d4:	e3520000 	cmp	r2, #0
 2d8:	b1a02003 	movlt	r2, r3
 2dc:	e1a021c2 	asr	r2, r2, #3
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
 2e0:	e0822281 	add	r2, r2, r1, lsl #5
			error = error - deltax;
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
 2e4:	e2803007 	add	r3, r0, #7
 2e8:	e3500000 	cmp	r0, #0
 2ec:	b1a00003 	movlt	r0, r3
 2f0:	e1a001c0 	asr	r0, r0, #3
	short int g5 = (short int) g8/4;
	short int b5 = (short int) b8/8;
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
 2f4:	e0820580 	add	r0, r2, r0, lsl #11
	return rgb565;
}
 2f8:	e6bf0070 	sxth	r0, r0
 2fc:	e12fff1e 	bx	lr

00000300 <plot_pixel>:
void plot_pixel(int x, int y, short int color){
 300:	e24dd008 	sub	sp, sp, #8
	if(erase_mode){
 304:	e30130e4 	movw	r3, #4324	; 0x10e4
 308:	e3403000 	movt	r3, #0
 30c:	e5d33000 	ldrb	r3, [r3]
 310:	e3530000 	cmp	r3, #0
		color = bg_color;
 314:	13003c88 	movwne	r3, #3208	; 0xc88
 318:	13403000 	movtne	r3, #0
 31c:	11d320f0 	ldrshne	r2, [r3]
	}
	volatile int pixel_buffer_start;
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
	pixel_buffer_start = *pixel_ctrl_ptr;
 320:	e3033fff 	movw	r3, #16383	; 0x3fff
 324:	e34f3f20 	movt	r3, #65312	; 0xff20
 328:	e5133fdf 	ldr	r3, [r3, #-4063]	; 0xfffff021
 32c:	e58d3004 	str	r3, [sp, #4]
	
	*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
 330:	e59d3004 	ldr	r3, [sp, #4]
 334:	e1a00080 	lsl	r0, r0, #1
 338:	e0831501 	add	r1, r3, r1, lsl #10
 33c:	e18120b0 	strh	r2, [r1, r0]
}
 340:	e28dd008 	add	sp, sp, #8
 344:	e12fff1e 	bx	lr

00000348 <clear_screen>:
#include<stdbool.h>
#include "draw.h"

short int bg_color = (short int)0xFFFF;//Background color
bool erase_mode = false;
void clear_screen(){
 348:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int x=0;
 34c:	e3a05000 	mov	r5, #0
#include<stdbool.h>
#include "draw.h"

short int bg_color = (short int)0xFFFF;//Background color
bool erase_mode = false;
void clear_screen(){
 350:	e1a07005 	mov	r7, r5
	int x=0;
	for(x;x<320;x++){
		int y=0;
		for(y;y<240;y++){
			plot_pixel(x, y, bg_color);
 354:	e3006c88 	movw	r6, #3208	; 0xc88
 358:	e3406000 	movt	r6, #0
 35c:	ea000009 	b	388 <clear_screen+0x40>
 360:	e1a00005 	mov	r0, r5
 364:	e1a01004 	mov	r1, r4
 368:	e1d620f0 	ldrsh	r2, [r6]
 36c:	ebffffe3 	bl	300 <plot_pixel>
bool erase_mode = false;
void clear_screen(){
	int x=0;
	for(x;x<320;x++){
		int y=0;
		for(y;y<240;y++){
 370:	e2844001 	add	r4, r4, #1
 374:	e35400f0 	cmp	r4, #240	; 0xf0
 378:	1afffff8 	bne	360 <clear_screen+0x18>

short int bg_color = (short int)0xFFFF;//Background color
bool erase_mode = false;
void clear_screen(){
	int x=0;
	for(x;x<320;x++){
 37c:	e2855001 	add	r5, r5, #1
 380:	e3550d05 	cmp	r5, #320	; 0x140
 384:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
#include<stdbool.h>
#include "draw.h"

short int bg_color = (short int)0xFFFF;//Background color
bool erase_mode = false;
void clear_screen(){
 388:	e1a04007 	mov	r4, r7
 38c:	eafffff3 	b	360 <clear_screen+0x18>

00000390 <swap>:
	
	*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
}
void swap(int*p1 ,int *p2){
	int temp;
	temp=*p1;
 390:	e5903000 	ldr	r3, [r0]
	*p1=*p2 ;
 394:	e5912000 	ldr	r2, [r1]
 398:	e5802000 	str	r2, [r0]
	*p2=temp ;
 39c:	e5813000 	str	r3, [r1]
 3a0:	e12fff1e 	bx	lr

000003a4 <draw_line>:
	draw_line(x,y,x+w,y,color);
	draw_line(x,y,x,y+h,color);
	draw_line(x+w,y,x+w,y+h,color);
	draw_line(x,y+h,x+w,y+h,color);
}
void draw_line(int x0, int y0, int x1,int y1, short int color){
 3a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 3a8:	e24dd014 	sub	sp, sp, #20
 3ac:	e58d000c 	str	r0, [sp, #12]
 3b0:	e58d1008 	str	r1, [sp, #8]
 3b4:	e58d2004 	str	r2, [sp, #4]
 3b8:	e58d3000 	str	r3, [sp]
 3bc:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	bool is_steep = abs(y1 - y0) > abs(x1 - x0);
 3c0:	e0613003 	rsb	r3, r1, r3
 3c4:	e3530000 	cmp	r3, #0
 3c8:	b2633000 	rsblt	r3, r3, #0
 3cc:	e0602002 	rsb	r2, r0, r2
 3d0:	e0228fc2 	eor	r8, r2, r2, asr #31
 3d4:	e0488fc2 	sub	r8, r8, r2, asr #31
 3d8:	e1530008 	cmp	r3, r8
 3dc:	d3a08000 	movle	r8, #0
 3e0:	c3a08001 	movgt	r8, #1
	if(is_steep){
 3e4:	e3580000 	cmp	r8, #0
 3e8:	0a000005 	beq	404 <draw_line+0x60>
		swap(&x0, &y0);
 3ec:	e28d000c 	add	r0, sp, #12
 3f0:	e28d1008 	add	r1, sp, #8
 3f4:	ebffffe5 	bl	390 <swap>
		swap(&x1, &y1);
 3f8:	e28d0004 	add	r0, sp, #4
 3fc:	e1a0100d 	mov	r1, sp
 400:	ebffffe2 	bl	390 <swap>
	}
	if (x0 > x1){
 404:	e59d3004 	ldr	r3, [sp, #4]
 408:	e59d200c 	ldr	r2, [sp, #12]
 40c:	e1520003 	cmp	r2, r3
 410:	da000005 	ble	42c <draw_line+0x88>
		swap(&x0, &x1);
 414:	e28d000c 	add	r0, sp, #12
 418:	e28d1004 	add	r1, sp, #4
 41c:	ebffffdb 	bl	390 <swap>
		swap(&y0, &y1);
 420:	e28d0008 	add	r0, sp, #8
 424:	e1a0100d 	mov	r1, sp
 428:	ebffffd8 	bl	390 <swap>
	}
	int deltax = x1 - x0;
 42c:	e59d3004 	ldr	r3, [sp, #4]
 430:	e59d500c 	ldr	r5, [sp, #12]
 434:	e0659003 	rsb	r9, r5, r3
	int deltay = abs(y1 - y0);
 438:	e59d2000 	ldr	r2, [sp]
 43c:	e59d6008 	ldr	r6, [sp, #8]
 440:	e0667002 	rsb	r7, r6, r2
 444:	e3570000 	cmp	r7, #0
 448:	b2677000 	rsblt	r7, r7, #0
	int error = -(deltax / 2);
 44c:	e0894fa9 	add	r4, r9, r9, lsr #31
 450:	e1a040c4 	asr	r4, r4, #1
 454:	e2644000 	rsb	r4, r4, #0
	int y = y0;
	int y_step=0;
	if (y0 < y1){
		y_step = 1;
 458:	e1520006 	cmp	r2, r6
 45c:	d3e0b000 	mvnle	r11, #0
 460:	c3a0b001 	movgt	r11, #1
	} else{
		y_step = -1;
	}
	int x=x0;
	for(x;x<x1;x++){
 464:	e1530005 	cmp	r3, r5
 468:	da00000d 	ble	4a4 <draw_line+0x100>
		if (is_steep){
 46c:	e3580000 	cmp	r8, #0
			plot_pixel(y, x, color);
 470:	11a00006 	movne	r0, r6
 474:	11a01005 	movne	r1, r5
		}else{
			plot_pixel(x, y, color);
 478:	01a00005 	moveq	r0, r5
 47c:	01a01006 	moveq	r1, r6
 480:	e1a0200a 	mov	r2, r10
 484:	ebffff9d 	bl	300 <plot_pixel>
		}
		error = error + deltay;
		if (error >= 0){
 488:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
 48c:	5086600b 	addpl	r6, r6, r11
			error = error - deltax;
 490:	50694004 	rsbpl	r4, r9, r4
		y_step = 1;
	} else{
		y_step = -1;
	}
	int x=x0;
	for(x;x<x1;x++){
 494:	e2855001 	add	r5, r5, #1
 498:	e59d3004 	ldr	r3, [sp, #4]
 49c:	e1530005 	cmp	r3, r5
 4a0:	cafffff1 	bgt	46c <draw_line+0xc8>
		if (error >= 0){
			y = y + y_step;
			error = error - deltax;
		}
	}
}
 4a4:	e28dd014 	add	sp, sp, #20
 4a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000004ac <draw_rectangle>:
		for(y;y<240;y++){
			plot_pixel(x, y, bg_color);
		}
	}
}
void draw_rectangle(int x,int y,int w,int h, short int color){
 4ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 4b0:	e24dd008 	sub	sp, sp, #8
 4b4:	e1a06000 	mov	r6, r0
 4b8:	e1a08001 	mov	r8, r1
 4bc:	e1a04003 	mov	r4, r3
 4c0:	e1dd72f0 	ldrsh	r7, [sp, #32]
	draw_line(x,y,x+w,y,color);
 4c4:	e0805002 	add	r5, r0, r2
 4c8:	e58d7000 	str	r7, [sp]
 4cc:	e1a02005 	mov	r2, r5
 4d0:	e1a03001 	mov	r3, r1
 4d4:	ebffffb2 	bl	3a4 <draw_line>
	draw_line(x,y,x,y+h,color);
 4d8:	e0884004 	add	r4, r8, r4
 4dc:	e58d7000 	str	r7, [sp]
 4e0:	e1a00006 	mov	r0, r6
 4e4:	e1a01008 	mov	r1, r8
 4e8:	e1a02006 	mov	r2, r6
 4ec:	e1a03004 	mov	r3, r4
 4f0:	ebffffab 	bl	3a4 <draw_line>
	draw_line(x+w,y,x+w,y+h,color);
 4f4:	e58d7000 	str	r7, [sp]
 4f8:	e1a00005 	mov	r0, r5
 4fc:	e1a01008 	mov	r1, r8
 500:	e1a02005 	mov	r2, r5
 504:	e1a03004 	mov	r3, r4
 508:	ebffffa5 	bl	3a4 <draw_line>
	draw_line(x,y+h,x+w,y+h,color);
 50c:	e58d7000 	str	r7, [sp]
 510:	e1a00006 	mov	r0, r6
 514:	e1a01004 	mov	r1, r4
 518:	e1a02005 	mov	r2, r5
 51c:	e1a03004 	mov	r3, r4
 520:	ebffff9f 	bl	3a4 <draw_line>
}
 524:	e28dd008 	add	sp, sp, #8
 528:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000052c <wait_for_vsync>:
}

void wait_for_vsync(){
	volatile int *pixel_ctrl_PTR = (int *)0xFF203020;
	register int status;
	*pixel_ctrl_PTR = 1;
 52c:	e3033fff 	movw	r3, #16383	; 0x3fff
 530:	e34f3f20 	movt	r3, #65312	; 0xff20
 534:	e3a02001 	mov	r2, #1
 538:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	status = *(pixel_ctrl_PTR +3);
 53c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01) != 0){
 540:	e3130001 	tst	r3, #1
 544:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_PTR+3);
 548:	e3032fff 	movw	r2, #16383	; 0x3fff
 54c:	e34f2f20 	movt	r2, #65312	; 0xff20
 550:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
void wait_for_vsync(){
	volatile int *pixel_ctrl_PTR = (int *)0xFF203020;
	register int status;
	*pixel_ctrl_PTR = 1;
	status = *(pixel_ctrl_PTR +3);
	while((status & 0x01) != 0){
 554:	e3130001 	tst	r3, #1
 558:	1afffffc 	bne	550 <wait_for_vsync+0x24>
 55c:	e12fff1e 	bx	lr

00000560 <interval_timer_ISR>:
 *
******************************************************************************/
void interval_timer_ISR()
{
    volatile int * interval_timer_ptr = (int *)TIMER_BASE;
    *(interval_timer_ptr) = 0; // Clear the interrupt
 560:	e3a03a02 	mov	r3, #8192	; 0x2000
 564:	e34f3f20 	movt	r3, #65312	; 0xff20
 568:	e3a02000 	mov	r2, #0
 56c:	e5832000 	str	r2, [r3]
 570:	e12fff1e 	bx	lr

00000574 <pushbutton_ISR>:

void pushbutton_ISR(void){
    volatile int * KEY_ptr = (int *)KEY_BASE;
    int            press;

    press          = *(KEY_ptr + 3); // read the pushbutton interrupt register
 574:	e3a02000 	mov	r2, #0
 578:	e34f2f20 	movt	r2, #65312	; 0xff20
 57c:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
    *(KEY_ptr + 3) = press;          // Clear the interrupt
 580:	e582305c 	str	r3, [r2, #92]	; 0x5c
	
	//In case of hyper-tapping
	if(press&1){
 584:	e3130001 	tst	r3, #1
		key[0]++;
 588:	130120e8 	movwne	r2, #4328	; 0x10e8
 58c:	13402000 	movtne	r2, #0
 590:	15921000 	ldrne	r1, [r2]
 594:	12811001 	addne	r1, r1, #1
 598:	15821000 	strne	r1, [r2]
	}
	if((press>>1)&1){
 59c:	e3130002 	tst	r3, #2
		key[1]++;
 5a0:	130120e8 	movwne	r2, #4328	; 0x10e8
 5a4:	13402000 	movtne	r2, #0
 5a8:	15921004 	ldrne	r1, [r2, #4]
 5ac:	12811001 	addne	r1, r1, #1
 5b0:	15821004 	strne	r1, [r2, #4]
	}
	if((press>>2)&1){
 5b4:	e3130004 	tst	r3, #4
		key[2]++;
 5b8:	130120e8 	movwne	r2, #4328	; 0x10e8
 5bc:	13402000 	movtne	r2, #0
 5c0:	15921008 	ldrne	r1, [r2, #8]
 5c4:	12811001 	addne	r1, r1, #1
 5c8:	15821008 	strne	r1, [r2, #8]
	}
	if((press>>3)&1){
 5cc:	e3130008 	tst	r3, #8
		key[3]++;
 5d0:	130130e8 	movwne	r3, #4328	; 0x10e8
 5d4:	13403000 	movtne	r3, #0
 5d8:	1593200c 	ldrne	r2, [r3, #12]
 5dc:	12822001 	addne	r2, r2, #1
 5e0:	1583200c 	strne	r2, [r3, #12]
 5e4:	e12fff1e 	bx	lr

000005e8 <__cs3_isr_irq>:
void interval_timer_ISR(void);
void pushbutton_ISR(void);

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(void)
{
 5e8:	e24ee004 	sub	lr, lr, #4
 5ec:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
    // Read the ICCIAR from the processor interface
    int address = MPCORE_GIC_CPUIF + ICCIAR;
    int int_ID  = *((int *)address);
 5f0:	e3e03a13 	mvn	r3, #77824	; 0x13000
 5f4:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d

	if (int_ID == INTERVAL_TIMER_IRQ) // check if interrupt is from the Altera timer
 5f8:	e3540048 	cmp	r4, #72	; 0x48
 5fc:	1a000001 	bne	608 <__cs3_isr_irq+0x20>
        interval_timer_ISR();
 600:	ebffffd6 	bl	560 <interval_timer_ISR>
 604:	ea000004 	b	61c <__cs3_isr_irq+0x34>
    else if (int_ID == KEYS_IRQ) // check if interrupt is from the KEYs
 608:	e3540049 	cmp	r4, #73	; 0x49
 60c:	1a000001 	bne	618 <__cs3_isr_irq+0x30>
        pushbutton_ISR();
 610:	ebffffd7 	bl	574 <pushbutton_ISR>
 614:	ea000000 	b	61c <__cs3_isr_irq+0x34>
 618:	eafffffe 	b	618 <__cs3_isr_irq+0x30>
        while (1)
            ; // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address           = MPCORE_GIC_CPUIF + ICCEOIR;
    *((int *)address) = int_ID;
 61c:	e3e03a13 	mvn	r3, #77824	; 0x13000
 620:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
 624:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

00000628 <__cs3_reset>:
    return;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void)
{
 628:	eafffffe 	b	628 <__cs3_reset>

0000062c <__cs3_isr_undef>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_undef(void)
{
 62c:	eafffffe 	b	62c <__cs3_isr_undef>

00000630 <__cs3_isr_swi>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_swi(void)
{
 630:	eafffffe 	b	630 <__cs3_isr_swi>

00000634 <__cs3_isr_pabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_pabort(void)
{
 634:	eafffffe 	b	634 <__cs3_isr_pabort>

00000638 <__cs3_isr_dabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_dabort(void)
{
 638:	eafffffe 	b	638 <__cs3_isr_dabort>

0000063c <__cs3_isr_fiq>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_fiq(void)
{
 63c:	eafffffe 	b	63c <__cs3_isr_fiq>

00000640 <set_A9_IRQ_stack>:
{
    int stack, mode;
    stack = A9_ONCHIP_END - 7; // top of A9 onchip memory, aligned to 8 bytes
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
 640:	e3a030d2 	mov	r3, #210	; 0xd2
 644:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r"(stack));
 648:	e3e03007 	mvn	r3, #7
 64c:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
 650:	e3a030d3 	mov	r3, #211	; 0xd3
 654:	e129f003 	msr	CPSR_fc, r3
 658:	e12fff1e 	bx	lr

0000065c <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
    int status = SVC_MODE | INT_ENABLE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(status));
 65c:	e3a03053 	mov	r3, #83	; 0x53
 660:	e129f003 	msr	CPSR_fc, r3
 664:	e12fff1e 	bx	lr

00000668 <config_GIC>:
void config_GIC(void)
{
    int address; // used to calculate register addresses

    /* configure the FPGA interval timer and KEYs interrupts */
    *((int *)0xFFFED848) = 0x00000101;
 668:	e3e03a12 	mvn	r3, #73728	; 0x12000
 66c:	e3002101 	movw	r2, #257	; 0x101
 670:	e50327b7 	str	r2, [r3, #-1975]	; 0xfffff849
    *((int *)0xFFFED108) = 0x00000300;
 674:	e3a02c03 	mov	r2, #768	; 0x300
 678:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
    // priorities
    address           = MPCORE_GIC_CPUIF + ICCPMR;
    *((int *)address) = 0xFFFF;
 67c:	e3e01a13 	mvn	r1, #77824	; 0x13000
 680:	e30f2fff 	movw	r2, #65535	; 0xffff
 684:	e5012efb 	str	r2, [r1, #-3835]	; 0xfffff105

    // Set CPU Interface Control Register (ICCICR). Enable signaling of
    // interrupts
    address           = MPCORE_GIC_CPUIF + ICCICR;
    *((int *)address) = ENABLE;
 688:	e3a02001 	mov	r2, #1
 68c:	e5012eff 	str	r2, [r1, #-3839]	; 0xfffff101

    // Configure the Distributor Control Register (ICDDCR) to send pending
    // interrupts to CPUs
    address           = MPCORE_GIC_DIST + ICDDCR;
    *((int *)address) = ENABLE;
 690:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
 694:	e12fff1e 	bx	lr

00000698 <logic>:
	
	//Handle key input
	//Used while loop to handle hyper-tapping between frames
	
	//Player 2. Key[0] = right, Key[1] = left
	while(key[0]!=0){
 698:	e30130e8 	movw	r3, #4328	; 0x10e8
 69c:	e3403000 	movt	r3, #0
 6a0:	e5933000 	ldr	r3, [r3]
 6a4:	e3530000 	cmp	r3, #0
 6a8:	0a000007 	beq	6cc <logic+0x34>
		key[0]--;
 6ac:	e30130e8 	movw	r3, #4328	; 0x10e8
 6b0:	e3403000 	movt	r3, #0
 6b4:	e5932000 	ldr	r2, [r3]
 6b8:	e2422001 	sub	r2, r2, #1
 6bc:	e5832000 	str	r2, [r3]
	
	//Handle key input
	//Used while loop to handle hyper-tapping between frames
	
	//Player 2. Key[0] = right, Key[1] = left
	while(key[0]!=0){
 6c0:	e5932000 	ldr	r2, [r3]
 6c4:	e3520000 	cmp	r2, #0
 6c8:	1afffff9 	bne	6b4 <logic+0x1c>
		key[0]--;
	}
	while(key[1]!=0){
 6cc:	e30130e8 	movw	r3, #4328	; 0x10e8
 6d0:	e3403000 	movt	r3, #0
 6d4:	e5933004 	ldr	r3, [r3, #4]
 6d8:	e3530000 	cmp	r3, #0
 6dc:	0a000007 	beq	700 <logic+0x68>
		key[1]--;
 6e0:	e30130e8 	movw	r3, #4328	; 0x10e8
 6e4:	e3403000 	movt	r3, #0
 6e8:	e5932004 	ldr	r2, [r3, #4]
 6ec:	e2422001 	sub	r2, r2, #1
 6f0:	e5832004 	str	r2, [r3, #4]
	
	//Player 2. Key[0] = right, Key[1] = left
	while(key[0]!=0){
		key[0]--;
	}
	while(key[1]!=0){
 6f4:	e5932004 	ldr	r2, [r3, #4]
 6f8:	e3520000 	cmp	r2, #0
 6fc:	1afffff9 	bne	6e8 <logic+0x50>
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
 700:	e30130e8 	movw	r3, #4328	; 0x10e8
 704:	e3403000 	movt	r3, #0
 708:	e5933008 	ldr	r3, [r3, #8]
 70c:	e3530000 	cmp	r3, #0
 710:	0a00000c 	beq	748 <logic+0xb0>
		p1_x+=10;
 714:	e30120f8 	movw	r2, #4344	; 0x10f8
 718:	e3402000 	movt	r2, #0
		
		key[2]--;
 71c:	e30130e8 	movw	r3, #4328	; 0x10e8
 720:	e3403000 	movt	r3, #0
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
		p1_x+=10;
 724:	e5921000 	ldr	r1, [r2]
 728:	e281100a 	add	r1, r1, #10
 72c:	e5821000 	str	r1, [r2]
		
		key[2]--;
 730:	e5931008 	ldr	r1, [r3, #8]
 734:	e2411001 	sub	r1, r1, #1
 738:	e5831008 	str	r1, [r3, #8]
	while(key[1]!=0){
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
 73c:	e5931008 	ldr	r1, [r3, #8]
 740:	e3510000 	cmp	r1, #0
 744:	1afffff6 	bne	724 <logic+0x8c>
		p1_x+=10;
		
		key[2]--;
	}
	while(key[3]!=0){
 748:	e30130e8 	movw	r3, #4328	; 0x10e8
 74c:	e3403000 	movt	r3, #0
 750:	e593300c 	ldr	r3, [r3, #12]
 754:	e3530000 	cmp	r3, #0
 758:	012fff1e 	bxeq	lr
		p1_x-=10;
 75c:	e30120f8 	movw	r2, #4344	; 0x10f8
 760:	e3402000 	movt	r2, #0
		
		key[3]--;
 764:	e30130e8 	movw	r3, #4328	; 0x10e8
 768:	e3403000 	movt	r3, #0
		p1_x+=10;
		
		key[2]--;
	}
	while(key[3]!=0){
		p1_x-=10;
 76c:	e5921000 	ldr	r1, [r2]
 770:	e241100a 	sub	r1, r1, #10
 774:	e5821000 	str	r1, [r2]
		
		key[3]--;
 778:	e593100c 	ldr	r1, [r3, #12]
 77c:	e2411001 	sub	r1, r1, #1
 780:	e583100c 	str	r1, [r3, #12]
	while(key[2]!=0){
		p1_x+=10;
		
		key[2]--;
	}
	while(key[3]!=0){
 784:	e593100c 	ldr	r1, [r3, #12]
 788:	e3510000 	cmp	r1, #0
 78c:	1afffff6 	bne	76c <logic+0xd4>
 790:	e12fff1e 	bx	lr

00000794 <scene_draw>:
extern volatile int p1_x;
extern volatile int p1_y;

extern bool erase_mode;

void scene_draw(){
 794:	e92d4030 	push	{r4, r5, lr}
 798:	e24dd00c 	sub	sp, sp, #12
	draw_rectangle(p1_x,p1_y,10,10,rgb24to16(0,255,0));
 79c:	e30130f8 	movw	r3, #4344	; 0x10f8
 7a0:	e3403000 	movt	r3, #0
 7a4:	e5935000 	ldr	r5, [r3]
 7a8:	e3003c8c 	movw	r3, #3212	; 0xc8c
 7ac:	e3403000 	movt	r3, #0
 7b0:	e5934000 	ldr	r4, [r3]
 7b4:	e3a00000 	mov	r0, #0
 7b8:	e3a010ff 	mov	r1, #255	; 0xff
 7bc:	e1a02000 	mov	r2, r0
 7c0:	ebfffebe 	bl	2c0 <rgb24to16>
 7c4:	e58d0000 	str	r0, [sp]
 7c8:	e1a00005 	mov	r0, r5
 7cc:	e1a01004 	mov	r1, r4
 7d0:	e3a0200a 	mov	r2, #10
 7d4:	e1a03002 	mov	r3, r2
 7d8:	ebffff33 	bl	4ac <draw_rectangle>
}
 7dc:	e28dd00c 	add	sp, sp, #12
 7e0:	e8bd8030 	pop	{r4, r5, pc}

000007e4 <clear>:
void clear(){
 7e4:	e92d4010 	push	{r4, lr}
	erase_mode = true;
 7e8:	e30140e4 	movw	r4, #4324	; 0x10e4
 7ec:	e3404000 	movt	r4, #0
 7f0:	e3a03001 	mov	r3, #1
 7f4:	e5c43000 	strb	r3, [r4]
	scene_draw();
 7f8:	ebffffe5 	bl	794 <scene_draw>
	erase_mode = false;
 7fc:	e3a03000 	mov	r3, #0
 800:	e5c43000 	strb	r3, [r4]
 804:	e8bd8010 	pop	{r4, pc}

00000808 <atexit>:
 808:	e1a01000 	mov	r1, r0
 80c:	e3a00000 	mov	r0, #0
 810:	e92d4008 	push	{r3, lr}
 814:	e1a02000 	mov	r2, r0
 818:	e1a03000 	mov	r3, r0
 81c:	eb00000e 	bl	85c <__register_exitproc>
 820:	e8bd4008 	pop	{r3, lr}
 824:	e12fff1e 	bx	lr

00000828 <exit>:
 828:	e92d4008 	push	{r3, lr}
 82c:	e3a01000 	mov	r1, #0
 830:	e1a04000 	mov	r4, r0
 834:	eb000045 	bl	950 <__call_exitprocs>
 838:	e59f3018 	ldr	r3, [pc, #24]	; 858 <exit+0x30>
 83c:	e5930000 	ldr	r0, [r3]
 840:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 844:	e3530000 	cmp	r3, #0
 848:	11a0e00f 	movne	lr, pc
 84c:	112fff13 	bxne	r3
 850:	e1a00004 	mov	r0, r4
 854:	eb0000c9 	bl	b80 <_exit>
 858:	00000c28 	.word	0x00000c28

0000085c <__register_exitproc>:
 85c:	e59fc0e4 	ldr	r12, [pc, #228]	; 948 <__register_exitproc+0xec>
 860:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 864:	e59c4000 	ldr	r4, [r12]
 868:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 86c:	e35c0000 	cmp	r12, #0
 870:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 874:	e59c5004 	ldr	r5, [r12, #4]
 878:	0584c148 	streq	r12, [r4, #328]	; 0x148
 87c:	e355001f 	cmp	r5, #31
 880:	e24dd010 	sub	sp, sp, #16
 884:	e1a06000 	mov	r6, r0
 888:	da000015 	ble	8e4 <__register_exitproc+0x88>
 88c:	e59f00b8 	ldr	r0, [pc, #184]	; 94c <__register_exitproc+0xf0>
 890:	e3500000 	cmp	r0, #0
 894:	1a000001 	bne	8a0 <__register_exitproc+0x44>
 898:	e3e00000 	mvn	r0, #0
 89c:	ea000018 	b	904 <__register_exitproc+0xa8>
 8a0:	e3a00e19 	mov	r0, #400	; 0x190
 8a4:	e58d100c 	str	r1, [sp, #12]
 8a8:	e58d2008 	str	r2, [sp, #8]
 8ac:	e58d3004 	str	r3, [sp, #4]
 8b0:	e320f000 	nop	{0}
 8b4:	e250c000 	subs	r12, r0, #0
 8b8:	e59d100c 	ldr	r1, [sp, #12]
 8bc:	e59d2008 	ldr	r2, [sp, #8]
 8c0:	e59d3004 	ldr	r3, [sp, #4]
 8c4:	0afffff3 	beq	898 <__register_exitproc+0x3c>
 8c8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 8cc:	e3a00000 	mov	r0, #0
 8d0:	e58c0004 	str	r0, [r12, #4]
 8d4:	e58c5000 	str	r5, [r12]
 8d8:	e584c148 	str	r12, [r4, #328]	; 0x148
 8dc:	e58c0188 	str	r0, [r12, #392]	; 0x188
 8e0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 8e4:	e3560000 	cmp	r6, #0
 8e8:	e59c4004 	ldr	r4, [r12, #4]
 8ec:	1a000007 	bne	910 <__register_exitproc+0xb4>
 8f0:	e2843002 	add	r3, r4, #2
 8f4:	e2844001 	add	r4, r4, #1
 8f8:	e78c1103 	str	r1, [r12, r3, lsl #2]
 8fc:	e58c4004 	str	r4, [r12, #4]
 900:	e3a00000 	mov	r0, #0
 904:	e28dd010 	add	sp, sp, #16
 908:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 90c:	e12fff1e 	bx	lr
 910:	e3a00001 	mov	r0, #1
 914:	e1a00410 	lsl	r0, r0, r4
 918:	e08c8104 	add	r8, r12, r4, lsl #2
 91c:	e3560002 	cmp	r6, #2
 920:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 924:	e5883108 	str	r3, [r8, #264]	; 0x108
 928:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 92c:	e1877000 	orr	r7, r7, r0
 930:	01830000 	orreq	r0, r3, r0
 934:	e1a05008 	mov	r5, r8
 938:	e5882088 	str	r2, [r8, #136]	; 0x88
 93c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 940:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 944:	eaffffe9 	b	8f0 <__register_exitproc+0x94>
 948:	00000c28 	.word	0x00000c28
 94c:	00000000 	.word	0x00000000

00000950 <__call_exitprocs>:
 950:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 954:	e59f3168 	ldr	r3, [pc, #360]	; ac4 <__call_exitprocs+0x174>
 958:	e5933000 	ldr	r3, [r3]
 95c:	e24dd014 	sub	sp, sp, #20
 960:	e58d3004 	str	r3, [sp, #4]
 964:	e2833f52 	add	r3, r3, #328	; 0x148
 968:	e58d0008 	str	r0, [sp, #8]
 96c:	e58d300c 	str	r3, [sp, #12]
 970:	e1a07001 	mov	r7, r1
 974:	e3a08001 	mov	r8, #1
 978:	e59d3004 	ldr	r3, [sp, #4]
 97c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 980:	e3560000 	cmp	r6, #0
 984:	e59db00c 	ldr	r11, [sp, #12]
 988:	0a000033 	beq	a5c <__call_exitprocs+0x10c>
 98c:	e5965004 	ldr	r5, [r6, #4]
 990:	e2554001 	subs	r4, r5, #1
 994:	5286a088 	addpl	r10, r6, #136	; 0x88
 998:	5285501f 	addpl	r5, r5, #31
 99c:	508a5105 	addpl	r5, r10, r5, lsl #2
 9a0:	5a000007 	bpl	9c4 <__call_exitprocs+0x74>
 9a4:	ea000029 	b	a50 <__call_exitprocs+0x100>
 9a8:	e5953000 	ldr	r3, [r5]
 9ac:	e1530007 	cmp	r3, r7
 9b0:	0a000005 	beq	9cc <__call_exitprocs+0x7c>
 9b4:	e2444001 	sub	r4, r4, #1
 9b8:	e3740001 	cmn	r4, #1
 9bc:	e2455004 	sub	r5, r5, #4
 9c0:	0a000022 	beq	a50 <__call_exitprocs+0x100>
 9c4:	e3570000 	cmp	r7, #0
 9c8:	1afffff6 	bne	9a8 <__call_exitprocs+0x58>
 9cc:	e5963004 	ldr	r3, [r6, #4]
 9d0:	e06a2005 	rsb	r2, r10, r5
 9d4:	e2433001 	sub	r3, r3, #1
 9d8:	e0862002 	add	r2, r6, r2
 9dc:	e1530004 	cmp	r3, r4
 9e0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 9e4:	13a01000 	movne	r1, #0
 9e8:	05864004 	streq	r4, [r6, #4]
 9ec:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 9f0:	e3530000 	cmp	r3, #0
 9f4:	0affffee 	beq	9b4 <__call_exitprocs+0x64>
 9f8:	e1a02418 	lsl	r2, r8, r4
 9fc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 a00:	e1120001 	tst	r2, r1
 a04:	e5969004 	ldr	r9, [r6, #4]
 a08:	0a000016 	beq	a68 <__call_exitprocs+0x118>
 a0c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 a10:	e1120001 	tst	r2, r1
 a14:	1a000016 	bne	a74 <__call_exitprocs+0x124>
 a18:	e59d0008 	ldr	r0, [sp, #8]
 a1c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 a20:	e1a0e00f 	mov	lr, pc
 a24:	e12fff13 	bx	r3
 a28:	e5963004 	ldr	r3, [r6, #4]
 a2c:	e1530009 	cmp	r3, r9
 a30:	1affffd0 	bne	978 <__call_exitprocs+0x28>
 a34:	e59b3000 	ldr	r3, [r11]
 a38:	e1530006 	cmp	r3, r6
 a3c:	1affffcd 	bne	978 <__call_exitprocs+0x28>
 a40:	e2444001 	sub	r4, r4, #1
 a44:	e3740001 	cmn	r4, #1
 a48:	e2455004 	sub	r5, r5, #4
 a4c:	1affffdc 	bne	9c4 <__call_exitprocs+0x74>
 a50:	e59f1070 	ldr	r1, [pc, #112]	; ac8 <__call_exitprocs+0x178>
 a54:	e3510000 	cmp	r1, #0
 a58:	1a000009 	bne	a84 <__call_exitprocs+0x134>
 a5c:	e28dd014 	add	sp, sp, #20
 a60:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a64:	e12fff1e 	bx	lr
 a68:	e1a0e00f 	mov	lr, pc
 a6c:	e12fff13 	bx	r3
 a70:	eaffffec 	b	a28 <__call_exitprocs+0xd8>
 a74:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 a78:	e1a0e00f 	mov	lr, pc
 a7c:	e12fff13 	bx	r3
 a80:	eaffffe8 	b	a28 <__call_exitprocs+0xd8>
 a84:	e5963004 	ldr	r3, [r6, #4]
 a88:	e3530000 	cmp	r3, #0
 a8c:	e5963000 	ldr	r3, [r6]
 a90:	1a000008 	bne	ab8 <__call_exitprocs+0x168>
 a94:	e3530000 	cmp	r3, #0
 a98:	0a000006 	beq	ab8 <__call_exitprocs+0x168>
 a9c:	e1a00006 	mov	r0, r6
 aa0:	e58b3000 	str	r3, [r11]
 aa4:	e320f000 	nop	{0}
 aa8:	e59b6000 	ldr	r6, [r11]
 aac:	e3560000 	cmp	r6, #0
 ab0:	1affffb5 	bne	98c <__call_exitprocs+0x3c>
 ab4:	eaffffe8 	b	a5c <__call_exitprocs+0x10c>
 ab8:	e1a0b006 	mov	r11, r6
 abc:	e1a06003 	mov	r6, r3
 ac0:	eafffff9 	b	aac <__call_exitprocs+0x15c>
 ac4:	00000c28 	.word	0x00000c28
 ac8:	00000000 	.word	0x00000000

00000acc <register_fini>:
 acc:	e92d4008 	push	{r3, lr}
 ad0:	e59f3010 	ldr	r3, [pc, #16]	; ae8 <register_fini+0x1c>
 ad4:	e3530000 	cmp	r3, #0
 ad8:	159f000c 	ldrne	r0, [pc, #12]	; aec <register_fini+0x20>
 adc:	1bffff49 	blne	808 <atexit>
 ae0:	e8bd4008 	pop	{r3, lr}
 ae4:	e12fff1e 	bx	lr
 ae8:	00000c50 	.word	0x00000c50
 aec:	00000af0 	.word	0x00000af0

00000af0 <__libc_fini_array>:
 af0:	e92d4038 	push	{r3, r4, r5, lr}
 af4:	e59f5030 	ldr	r5, [pc, #48]	; b2c <__libc_fini_array+0x3c>
 af8:	e59f4030 	ldr	r4, [pc, #48]	; b30 <__libc_fini_array+0x40>
 afc:	e0654004 	rsb	r4, r5, r4
 b00:	e1b04144 	asrs	r4, r4, #2
 b04:	10855104 	addne	r5, r5, r4, lsl #2
 b08:	0a000004 	beq	b20 <__libc_fini_array+0x30>
 b0c:	e5353004 	ldr	r3, [r5, #-4]!
 b10:	e1a0e00f 	mov	lr, pc
 b14:	e12fff13 	bx	r3
 b18:	e2544001 	subs	r4, r4, #1
 b1c:	1afffffa 	bne	b0c <__libc_fini_array+0x1c>
 b20:	eb00004a 	bl	c50 <__libc_fini>
 b24:	e8bd4038 	pop	{r3, r4, r5, lr}
 b28:	e12fff1e 	bx	lr
 b2c:	00000c68 	.word	0x00000c68
 b30:	00000c6c 	.word	0x00000c6c

00000b34 <__cs3_premain>:
 b34:	e92d4008 	push	{r3, lr}
 b38:	eb000017 	bl	b9c <__libc_init_array>
 b3c:	e59f3030 	ldr	r3, [pc, #48]	; b74 <__cs3_premain+0x40>
 b40:	e3530000 	cmp	r3, #0
 b44:	15930000 	ldrne	r0, [r3]
 b48:	01a00003 	moveq	r0, r3
 b4c:	e59f3024 	ldr	r3, [pc, #36]	; b78 <__cs3_premain+0x44>
 b50:	e3530000 	cmp	r3, #0
 b54:	15931000 	ldrne	r1, [r3]
 b58:	01a01003 	moveq	r1, r3
 b5c:	e3a02000 	mov	r2, #0
 b60:	ebfffdca 	bl	290 <main>
 b64:	e59f3010 	ldr	r3, [pc, #16]	; b7c <__cs3_premain+0x48>
 b68:	e3530000 	cmp	r3, #0
 b6c:	1bffff2d 	blne	828 <exit>
 b70:	eafffffe 	b	b70 <__cs3_premain+0x3c>
	...
 b7c:	00000828 	.word	0x00000828

00000b80 <_exit>:
 b80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 b84:	e3a00018 	mov	r0, #24
 b88:	e59f1004 	ldr	r1, [pc, #4]	; b94 <_exit+0x14>
 b8c:	ef123456 	svc	0x00123456
 b90:	eafffffe 	b	b90 <_exit+0x10>
 b94:	00020026 	.word	0x00020026

00000b98 <__cs3_isr_interrupt>:
 b98:	eafffffe 	b	b98 <__cs3_isr_interrupt>

00000b9c <__libc_init_array>:
 b9c:	e92d4070 	push	{r4, r5, r6, lr}
 ba0:	e59f506c 	ldr	r5, [pc, #108]	; c14 <__libc_init_array+0x78>
 ba4:	e59f606c 	ldr	r6, [pc, #108]	; c18 <__libc_init_array+0x7c>
 ba8:	e0656006 	rsb	r6, r5, r6
 bac:	e1b06146 	asrs	r6, r6, #2
 bb0:	12455004 	subne	r5, r5, #4
 bb4:	13a04000 	movne	r4, #0
 bb8:	0a000005 	beq	bd4 <__libc_init_array+0x38>
 bbc:	e5b53004 	ldr	r3, [r5, #4]!
 bc0:	e2844001 	add	r4, r4, #1
 bc4:	e1a0e00f 	mov	lr, pc
 bc8:	e12fff13 	bx	r3
 bcc:	e1560004 	cmp	r6, r4
 bd0:	1afffff9 	bne	bbc <__libc_init_array+0x20>
 bd4:	e59f5040 	ldr	r5, [pc, #64]	; c1c <__libc_init_array+0x80>
 bd8:	e59f6040 	ldr	r6, [pc, #64]	; c20 <__libc_init_array+0x84>
 bdc:	e0656006 	rsb	r6, r5, r6
 be0:	eb000012 	bl	c30 <_init>
 be4:	e1b06146 	asrs	r6, r6, #2
 be8:	12455004 	subne	r5, r5, #4
 bec:	13a04000 	movne	r4, #0
 bf0:	0a000005 	beq	c0c <__libc_init_array+0x70>
 bf4:	e5b53004 	ldr	r3, [r5, #4]!
 bf8:	e2844001 	add	r4, r4, #1
 bfc:	e1a0e00f 	mov	lr, pc
 c00:	e12fff13 	bx	r3
 c04:	e1560004 	cmp	r6, r4
 c08:	1afffff9 	bne	bf4 <__libc_init_array+0x58>
 c0c:	e8bd4070 	pop	{r4, r5, r6, lr}
 c10:	e12fff1e 	bx	lr
 c14:	00000c48 	.word	0x00000c48
 c18:	00000c48 	.word	0x00000c48
 c1c:	00000c48 	.word	0x00000c48
 c20:	00000c50 	.word	0x00000c50

Disassembly of section .rodata:

00000c28 <_global_impure_ptr>:
 c28:	00000c98 00000043                       ....C...

00000c30 <_init>:
 c30:	e1a0c00d 	mov	r12, sp
 c34:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c38:	e24cb004 	sub	r11, r12, #4
 c3c:	e24bd028 	sub	sp, r11, #40	; 0x28
 c40:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c44:	e12fff1e 	bx	lr

00000c48 <__init_array_start>:
 c48:	00000acc 	.word	0x00000acc

00000c4c <__frame_dummy_init_array_entry>:
 c4c:	00000208                                ....

00000c50 <__libc_fini>:
 c50:	e1a0c00d 	mov	r12, sp
 c54:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c58:	e24cb004 	sub	r11, r12, #4
 c5c:	e24bd028 	sub	sp, r11, #40	; 0x28
 c60:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c64:	e12fff1e 	bx	lr

00000c68 <__fini_array_start>:
 c68:	000001c4 	.word	0x000001c4

00000c6c <__cs3_regions>:
 c6c:	00000000 	.word	0x00000000
 c70:	00000040 	.word	0x00000040
 c74:	00000040 	.word	0x00000040
 c78:	00001088 	.word	0x00001088
 c7c:	00000038 	.word	0x00000038
