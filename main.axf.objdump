
D:/Files/Workspace/FPGA/243/Project/ECE243-Project/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	08 0d 00 00 0c 0d 00 00 10 0d 00 00 14 0d 00 00     ................
  30:	18 0d 00 00 14 2b 00 00 c8 0c 00 00 1c 0d 00 00     .....+..........

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000a46 	bl	29f4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00006848 	.word	0x00006848

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000070a8 	.word	0x000070a8

00000124 <__cs3_heap_start_ptr>:
     124:	00007218 	.word	0x00007218

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <__cs3_region_zero_size_ram+0x4>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <__cs3_region_zero_size_ram+0x8>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <__cs3_region_zero_size_ram+0xc>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000070b0 	.word	0x000070b0
     170:	000070b3 	.word	0x000070b3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000070b0 	.word	0x000070b0
     1bc:	000070b0 	.word	0x000070b0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000070b0 	.word	0x000070b0
     200:	00000000 	.word	0x00000000
     204:	00002bb0 	.word	0x00002bb0

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002bb0 	.word	0x00002bb0
     250:	000070b4 	.word	0x000070b4
     254:	00006848 	.word	0x00006848
     258:	00000000 	.word	0x00000000

0000025c <setup_buffer>:
                             // interrupts
    config_KEYs();           // configure pushbutton KEYs to generate interrupts

    enable_A9_interrupts(); // enable interrupts
}
void setup_buffer(){
     25c:	e92d4038 	push	{r3, r4, r5, lr}
    *(pixel_ctrl_ptr + 1) = FPGA_PIXEL_BUF_BASE;
     260:	e3064850 	movw	r4, #26704	; 0x6850
     264:	e3404000 	movt	r4, #0
     268:	e5943000 	ldr	r3, [r4]
     26c:	e3a02332 	mov	r2, #-939524096	; 0xc8000000
     270:	e5832004 	str	r2, [r3, #4]
	
    wait_for_vsync();
     274:	eb0000d9 	bl	5e0 <wait_for_vsync>
    pixel_buffer_start = *pixel_ctrl_ptr;
     278:	e5943000 	ldr	r3, [r4]
     27c:	e5933000 	ldr	r3, [r3]
     280:	e30750cc 	movw	r5, #28876	; 0x70cc
     284:	e3405000 	movt	r5, #0
     288:	e5853000 	str	r3, [r5]
    clear_screen();
     28c:	eb000043 	bl	3a0 <clear_screen>
	
    *(pixel_ctrl_ptr + 1) = SDRAM_BASE;
     290:	e5943000 	ldr	r3, [r4]
     294:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
     298:	e5832004 	str	r2, [r3, #4]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
     29c:	e5933004 	ldr	r3, [r3, #4]
     2a0:	e5853000 	str	r3, [r5]

    clear_screen();
     2a4:	eb00003d 	bl	3a0 <clear_screen>
     2a8:	e8bd8038 	pop	{r3, r4, r5, pc}

000002ac <config_interval_timer>:
/* setup the interval timer interrupts in the FPGA */
void config_interval_timer(){
    volatile int * interval_timer_ptr =(int *)TIMER_BASE; // interal timer base address

    int counter                 = 5000000; // 1/(100 MHz) x 5x10^6 = 50 msec
    *(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     2ac:	e3a03a02 	mov	r3, #8192	; 0x2000
     2b0:	e34f3f20 	movt	r3, #65312	; 0xff20
     2b4:	e3042b40 	movw	r2, #19264	; 0x4b40
     2b8:	e5832008 	str	r2, [r3, #8]
    *(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     2bc:	e3a0204c 	mov	r2, #76	; 0x4c
     2c0:	e583200c 	str	r2, [r3, #12]

    /* start interval timer, enable its interrupts */
    *(interval_timer_ptr + 1) = 0x7; // STOP = 0, START = 1, CONT = 1, ITO = 1
     2c4:	e3a02007 	mov	r2, #7
     2c8:	e5832004 	str	r2, [r3, #4]
     2cc:	e12fff1e 	bx	lr

000002d0 <config_KEYs>:

/* setup the KEY interrupts in the FPGA */
void config_KEYs(){
    volatile int * KEY_ptr = (int *)KEY_BASE; // pushbutton KEY address

    *(KEY_ptr + 2) = 0xF; // enable interrupts for KEY[0-3]
     2d0:	e3a03000 	mov	r3, #0
     2d4:	e34f3f20 	movt	r3, #65312	; 0xff20
     2d8:	e3a0200f 	mov	r2, #15
     2dc:	e5832058 	str	r2, [r3, #88]	; 0x58
     2e0:	e12fff1e 	bx	lr

000002e4 <setup_interupts>:
		scene_draw();
		wait_for_vsync();
		pixel_buffer_start = *(pixel_ctrl_ptr + 1);
	}
}
void setup_interupts(){
     2e4:	e92d4008 	push	{r3, lr}
	set_A9_IRQ_stack();      // initialize the stack pointer for IRQ mode
     2e8:	eb00028c 	bl	d20 <set_A9_IRQ_stack>
    config_GIC();            // configure the general interrupt controller
     2ec:	eb000295 	bl	d48 <config_GIC>
    config_interval_timer(); // configure Altera interval timer to generate
     2f0:	ebffffed 	bl	2ac <config_interval_timer>
                             // interrupts
    config_KEYs();           // configure pushbutton KEYs to generate interrupts
     2f4:	ebfffff5 	bl	2d0 <config_KEYs>

    enable_A9_interrupts(); // enable interrupts
     2f8:	eb00028f 	bl	d3c <enable_A9_interrupts>
     2fc:	e8bd8008 	pop	{r3, pc}

00000300 <main>:

void scene_draw();
void clear();
void logic();
void init();
int main(void){
     300:	e92d4038 	push	{r3, r4, r5, lr}
	setup_interupts();
     304:	ebfffff6 	bl	2e4 <setup_interupts>
	setup_buffer();
     308:	ebffffd3 	bl	25c <setup_buffer>
	
	init();
     30c:	eb00039b 	bl	1180 <init>
		clear_screen();
		logic();
		animate();
		scene_draw();
		wait_for_vsync();
		pixel_buffer_start = *(pixel_ctrl_ptr + 1);
     310:	e3065850 	movw	r5, #26704	; 0x6850
     314:	e3405000 	movt	r5, #0
     318:	e30740cc 	movw	r4, #28876	; 0x70cc
     31c:	e3404000 	movt	r4, #0
	setup_interupts();
	setup_buffer();
	
	init();
	while(1){
		clear_screen();
     320:	eb00001e 	bl	3a0 <clear_screen>
		logic();
     324:	eb000398 	bl	118c <logic>
		animate();
     328:	eb000536 	bl	1808 <animate>
		scene_draw();
     32c:	eb0004bc 	bl	1624 <scene_draw>
		wait_for_vsync();
     330:	eb0000aa 	bl	5e0 <wait_for_vsync>
		pixel_buffer_start = *(pixel_ctrl_ptr + 1);
     334:	e5953000 	ldr	r3, [r5]
     338:	e5933004 	ldr	r3, [r3, #4]
     33c:	e5843000 	str	r3, [r4]
     340:	eafffff6 	b	320 <main+0x20>

00000344 <rgb24to16>:
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
	short int g5 = (short int) g8/4;
     344:	e2813003 	add	r3, r1, #3
     348:	e3510000 	cmp	r1, #0
     34c:	b1a01003 	movlt	r1, r3
     350:	e1a01141 	asr	r1, r1, #2
	short int b5 = (short int) b8/8;
     354:	e2823007 	add	r3, r2, #7
     358:	e3520000 	cmp	r2, #0
     35c:	b1a02003 	movlt	r2, r3
     360:	e1a021c2 	asr	r2, r2, #3
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
     364:	e0822281 	add	r2, r2, r1, lsl #5
			error = error - deltax;
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
     368:	e2803007 	add	r3, r0, #7
     36c:	e3500000 	cmp	r0, #0
     370:	b1a00003 	movlt	r0, r3
     374:	e1a001c0 	asr	r0, r0, #3
	short int g5 = (short int) g8/4;
	short int b5 = (short int) b8/8;
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
     378:	e0820580 	add	r0, r2, r0, lsl #11
	return rgb565;
}
     37c:	e6bf0070 	sxth	r0, r0
     380:	e12fff1e 	bx	lr

00000384 <plot_pixel>:
void plot_pixel(int x, int y, short int color){
	*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
     384:	e30730cc 	movw	r3, #28876	; 0x70cc
     388:	e3403000 	movt	r3, #0
     38c:	e5933000 	ldr	r3, [r3]
     390:	e1a00080 	lsl	r0, r0, #1
     394:	e0831501 	add	r1, r3, r1, lsl #10
     398:	e18120b0 	strh	r2, [r1, r0]
     39c:	e12fff1e 	bx	lr

000003a0 <clear_screen>:
#include "image.h"

extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color

void clear_screen(){
     3a0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int x=0;
     3a4:	e3a05000 	mov	r5, #0
#include "image.h"

extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color

void clear_screen(){
     3a8:	e1a07005 	mov	r7, r5
	int x=0;
	for(;x<SCREEN_W;x++){
		int y=0;
		for(;y<SCREEN_H;y++){
			plot_pixel(x, y, bg_color);
     3ac:	e3066854 	movw	r6, #26708	; 0x6854
     3b0:	e3406000 	movt	r6, #0
     3b4:	ea000009 	b	3e0 <clear_screen+0x40>
     3b8:	e1a00005 	mov	r0, r5
     3bc:	e1a01004 	mov	r1, r4
     3c0:	e1d620f0 	ldrsh	r2, [r6]
     3c4:	ebffffee 	bl	384 <plot_pixel>

void clear_screen(){
	int x=0;
	for(;x<SCREEN_W;x++){
		int y=0;
		for(;y<SCREEN_H;y++){
     3c8:	e2844001 	add	r4, r4, #1
     3cc:	e35400f0 	cmp	r4, #240	; 0xf0
     3d0:	1afffff8 	bne	3b8 <clear_screen+0x18>
extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color

void clear_screen(){
	int x=0;
	for(;x<SCREEN_W;x++){
     3d4:	e2855001 	add	r5, r5, #1
     3d8:	e3550d05 	cmp	r5, #320	; 0x140
     3dc:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
#include "image.h"

extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color

void clear_screen(){
     3e0:	e1a04007 	mov	r4, r7
     3e4:	eafffff3 	b	3b8 <clear_screen+0x18>

000003e8 <swap>:
void plot_pixel(int x, int y, short int color){
	*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
}
void swap(int*p1 ,int *p2){
	int temp;
	temp=*p1;
     3e8:	e5903000 	ldr	r3, [r0]
	*p1=*p2 ;
     3ec:	e5912000 	ldr	r2, [r1]
     3f0:	e5802000 	str	r2, [r0]
	*p2=temp ;
     3f4:	e5813000 	str	r3, [r1]
     3f8:	e12fff1e 	bx	lr

000003fc <draw_line>:
	draw_line(x,y,x+w-1,y,color);
	draw_line(x,y,x,y+h-1,color);
	draw_line(x+w-1,y,x+w-1,y+h-1,color);
	draw_line(x,y+h-1,x+w-1,y+h-1,color);
}
void draw_line(int x0, int y0, int x1,int y1, short int color){
     3fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     400:	e24dd014 	sub	sp, sp, #20
     404:	e58d000c 	str	r0, [sp, #12]
     408:	e58d1008 	str	r1, [sp, #8]
     40c:	e58d2004 	str	r2, [sp, #4]
     410:	e58d3000 	str	r3, [sp]
     414:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	bool is_steep = abs(y1 - y0) > abs(x1 - x0);
     418:	e0613003 	rsb	r3, r1, r3
     41c:	e3530000 	cmp	r3, #0
     420:	b2633000 	rsblt	r3, r3, #0
     424:	e0602002 	rsb	r2, r0, r2
     428:	e0228fc2 	eor	r8, r2, r2, asr #31
     42c:	e0488fc2 	sub	r8, r8, r2, asr #31
     430:	e1530008 	cmp	r3, r8
     434:	d3a08000 	movle	r8, #0
     438:	c3a08001 	movgt	r8, #1
	if(is_steep){
     43c:	e3580000 	cmp	r8, #0
     440:	0a000005 	beq	45c <draw_line+0x60>
		swap(&x0, &y0);
     444:	e28d000c 	add	r0, sp, #12
     448:	e28d1008 	add	r1, sp, #8
     44c:	ebffffe5 	bl	3e8 <swap>
		swap(&x1, &y1);
     450:	e28d0004 	add	r0, sp, #4
     454:	e1a0100d 	mov	r1, sp
     458:	ebffffe2 	bl	3e8 <swap>
	}
	if (x0 > x1){
     45c:	e59d3004 	ldr	r3, [sp, #4]
     460:	e59d200c 	ldr	r2, [sp, #12]
     464:	e1520003 	cmp	r2, r3
     468:	da000005 	ble	484 <draw_line+0x88>
		swap(&x0, &x1);
     46c:	e28d000c 	add	r0, sp, #12
     470:	e28d1004 	add	r1, sp, #4
     474:	ebffffdb 	bl	3e8 <swap>
		swap(&y0, &y1);
     478:	e28d0008 	add	r0, sp, #8
     47c:	e1a0100d 	mov	r1, sp
     480:	ebffffd8 	bl	3e8 <swap>
	}
	int deltax = x1 - x0;
     484:	e59d3004 	ldr	r3, [sp, #4]
     488:	e59d500c 	ldr	r5, [sp, #12]
     48c:	e0659003 	rsb	r9, r5, r3
	int deltay = abs(y1 - y0);
     490:	e59d2000 	ldr	r2, [sp]
     494:	e59d6008 	ldr	r6, [sp, #8]
     498:	e0667002 	rsb	r7, r6, r2
     49c:	e3570000 	cmp	r7, #0
     4a0:	b2677000 	rsblt	r7, r7, #0
	int error = -(deltax / 2);
     4a4:	e0894fa9 	add	r4, r9, r9, lsr #31
     4a8:	e1a040c4 	asr	r4, r4, #1
     4ac:	e2644000 	rsb	r4, r4, #0
	int y = y0;
	int y_step=0;
	if (y0 < y1){
		y_step = 1;
     4b0:	e1520006 	cmp	r2, r6
     4b4:	d3e0b000 	mvnle	r11, #0
     4b8:	c3a0b001 	movgt	r11, #1
	} else{
		y_step = -1;
	}
	int x=x0;
	for(;x<x1;x++){
     4bc:	e1530005 	cmp	r3, r5
     4c0:	da00000d 	ble	4fc <draw_line+0x100>
		if (is_steep){
     4c4:	e3580000 	cmp	r8, #0
			plot_pixel(y, x, color);
     4c8:	11a00006 	movne	r0, r6
     4cc:	11a01005 	movne	r1, r5
		}else{
			plot_pixel(x, y, color);
     4d0:	01a00005 	moveq	r0, r5
     4d4:	01a01006 	moveq	r1, r6
     4d8:	e1a0200a 	mov	r2, r10
     4dc:	ebffffa8 	bl	384 <plot_pixel>
		}
		error = error + deltay;
		if (error >= 0){
     4e0:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
     4e4:	5086600b 	addpl	r6, r6, r11
			error = error - deltax;
     4e8:	50694004 	rsbpl	r4, r9, r4
		y_step = 1;
	} else{
		y_step = -1;
	}
	int x=x0;
	for(;x<x1;x++){
     4ec:	e2855001 	add	r5, r5, #1
     4f0:	e59d3004 	ldr	r3, [sp, #4]
     4f4:	e1530005 	cmp	r3, r5
     4f8:	cafffff1 	bgt	4c4 <draw_line+0xc8>
		if (error >= 0){
			y = y + y_step;
			error = error - deltax;
		}
	}
}
     4fc:	e28dd014 	add	sp, sp, #20
     500:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000504 <draw_rectangle>:
	int nx=x;
	for(;nx<(x+w);nx++){
		draw_line(nx,y,nx,y+h-1,color);
	}
}
void draw_rectangle(int x,int y,int w,int h, short int color){
     504:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     508:	e24dd008 	sub	sp, sp, #8
     50c:	e1a06000 	mov	r6, r0
     510:	e1a08001 	mov	r8, r1
     514:	e1a04003 	mov	r4, r3
     518:	e1dd72f0 	ldrsh	r7, [sp, #32]
	draw_line(x,y,x+w-1,y,color);
     51c:	e0802002 	add	r2, r0, r2
     520:	e2425001 	sub	r5, r2, #1
     524:	e58d7000 	str	r7, [sp]
     528:	e1a02005 	mov	r2, r5
     52c:	e1a03001 	mov	r3, r1
     530:	ebffffb1 	bl	3fc <draw_line>
	draw_line(x,y,x,y+h-1,color);
     534:	e0884004 	add	r4, r8, r4
     538:	e2444001 	sub	r4, r4, #1
     53c:	e58d7000 	str	r7, [sp]
     540:	e1a00006 	mov	r0, r6
     544:	e1a01008 	mov	r1, r8
     548:	e1a02006 	mov	r2, r6
     54c:	e1a03004 	mov	r3, r4
     550:	ebffffa9 	bl	3fc <draw_line>
	draw_line(x+w-1,y,x+w-1,y+h-1,color);
     554:	e58d7000 	str	r7, [sp]
     558:	e1a00005 	mov	r0, r5
     55c:	e1a01008 	mov	r1, r8
     560:	e1a02005 	mov	r2, r5
     564:	e1a03004 	mov	r3, r4
     568:	ebffffa3 	bl	3fc <draw_line>
	draw_line(x,y+h-1,x+w-1,y+h-1,color);
     56c:	e58d7000 	str	r7, [sp]
     570:	e1a00006 	mov	r0, r6
     574:	e1a01004 	mov	r1, r4
     578:	e1a02005 	mov	r2, r5
     57c:	e1a03004 	mov	r3, r4
     580:	ebffff9d 	bl	3fc <draw_line>
}
     584:	e28dd008 	add	sp, sp, #8
     588:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000058c <fill_rectangle>:
		for(;y<SCREEN_H;y++){
			plot_pixel(x, y, bg_color);
		}
	}
}
void fill_rectangle(int x,int y,int w,int h, short int color){
     58c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     590:	e24dd008 	sub	sp, sp, #8
     594:	e1a06001 	mov	r6, r1
     598:	e1dd72f0 	ldrsh	r7, [sp, #32]
	int nx=x;
	for(;nx<(x+w);nx++){
     59c:	e0805002 	add	r5, r0, r2
     5a0:	e1500005 	cmp	r0, r5
     5a4:	aa00000b 	bge	5d8 <fill_rectangle+0x4c>
			plot_pixel(x, y, bg_color);
		}
	}
}
void fill_rectangle(int x,int y,int w,int h, short int color){
	int nx=x;
     5a8:	e1a04000 	mov	r4, r0
	for(;nx<(x+w);nx++){
		draw_line(nx,y,nx,y+h-1,color);
     5ac:	e0818003 	add	r8, r1, r3
     5b0:	e2488001 	sub	r8, r8, #1
     5b4:	e58d7000 	str	r7, [sp]
     5b8:	e1a00004 	mov	r0, r4
     5bc:	e1a01006 	mov	r1, r6
     5c0:	e1a02004 	mov	r2, r4
     5c4:	e1a03008 	mov	r3, r8
     5c8:	ebffff8b 	bl	3fc <draw_line>
		}
	}
}
void fill_rectangle(int x,int y,int w,int h, short int color){
	int nx=x;
	for(;nx<(x+w);nx++){
     5cc:	e2844001 	add	r4, r4, #1
     5d0:	e1540005 	cmp	r4, r5
     5d4:	bafffff6 	blt	5b4 <fill_rectangle+0x28>
		draw_line(nx,y,nx,y+h-1,color);
	}
}
     5d8:	e28dd008 	add	sp, sp, #8
     5dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000005e0 <wait_for_vsync>:
}
void wait_for_vsync(){
    volatile int *pixel_ctrl_ptr = (int *)PIXEL_BUF_CTRL_BASE;
    register int status;

    *pixel_ctrl_ptr = 1; // start synchronized process
     5e0:	e3033fff 	movw	r3, #16383	; 0x3fff
     5e4:	e34f3f20 	movt	r3, #65312	; 0xff20
     5e8:	e3a02001 	mov	r2, #1
     5ec:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

    status = *(pixel_ctrl_ptr + 3);
     5f0:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while ((status & 0x01) != 0){
     5f4:	e3130001 	tst	r3, #1
     5f8:	012fff1e 	bxeq	lr
        status = *(pixel_ctrl_ptr + 3);
     5fc:	e3032fff 	movw	r2, #16383	; 0x3fff
     600:	e34f2f20 	movt	r2, #65312	; 0xff20
     604:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    register int status;

    *pixel_ctrl_ptr = 1; // start synchronized process

    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0){
     608:	e3130001 	tst	r3, #1
     60c:	1afffffc 	bne	604 <wait_for_vsync+0x24>
     610:	e12fff1e 	bx	lr

00000614 <draw_number>:
        status = *(pixel_ctrl_ptr + 3);
    }
}
void draw_number(int x, int y, int num, bool bold) { // num must be between 0 - 9
     614:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     618:	e24dd00c 	sub	sp, sp, #12
     61c:	e1a0b000 	mov	r11, r0
     620:	e1a09001 	mov	r9, r1
	int t, boldedThickness;

	if (bold) {
		boldedThickness = 3;
	} else {
		boldedThickness = 0;
     624:	e3530000 	cmp	r3, #0
     628:	13a03003 	movne	r3, #3
     62c:	03a03000 	moveq	r3, #0
     630:	e58d3000 	str	r3, [sp]
	}
	for (t = 0; t <= boldedThickness; t++) {
     634:	e3a07000 	mov	r7, #0
    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0){
        status = *(pixel_ctrl_ptr + 3);
    }
}
void draw_number(int x, int y, int num, bool bold) { // num must be between 0 - 9
     638:	e3023bb4 	movw	r3, #11188	; 0x2bb4
     63c:	e3403000 	movt	r3, #0
     640:	e3001222 	movw	r1, #546	; 0x222
     644:	e0213291 	mla	r1, r1, r2, r3
     648:	e58d1004 	str	r1, [sp, #4]
     64c:	e1a08007 	mov	r8, r7
		boldedThickness = 0;
	}
	for (t = 0; t <= boldedThickness; t++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (number[num][dim] == color2) {
				plot_pixel(x + dim % NUM_W + t, y + dim / NUM_W, number[num][dim]);
     650:	e30eac4f 	movw	r10, #60495	; 0xec4f
     654:	e344aec4 	movt	r10, #20164	; 0x4ec4
		boldedThickness = 3;
	} else {
		boldedThickness = 0;
	}
	for (t = 0; t <= boldedThickness; t++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     658:	e3006111 	movw	r6, #273	; 0x111
     65c:	ea000014 	b	6b4 <draw_number+0xa0>
			if (number[num][dim] == color2) {
     660:	e1f530b2 	ldrh	r3, [r5, #2]!
     664:	e3530000 	cmp	r3, #0
     668:	1a00000a 	bne	698 <draw_number+0x84>
				plot_pixel(x + dim % NUM_W + t, y + dim / NUM_W, number[num][dim]);
     66c:	e0c1349a 	smull	r3, r1, r10, r4
     670:	e1a03fc4 	asr	r3, r4, #31
     674:	e0631141 	rsb	r1, r3, r1, asr #2
     678:	e0810081 	add	r0, r1, r1, lsl #1
     67c:	e0810100 	add	r0, r1, r0, lsl #2
     680:	e0600004 	rsb	r0, r0, r4
     684:	e080000b 	add	r0, r0, r11
     688:	e0800007 	add	r0, r0, r7
     68c:	e0811009 	add	r1, r1, r9
     690:	e1a02008 	mov	r2, r8
     694:	ebffff3a 	bl	384 <plot_pixel>
		boldedThickness = 3;
	} else {
		boldedThickness = 0;
	}
	for (t = 0; t <= boldedThickness; t++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     698:	e2844001 	add	r4, r4, #1
     69c:	e1540006 	cmp	r4, r6
     6a0:	1affffee 	bne	660 <draw_number+0x4c>
	if (bold) {
		boldedThickness = 3;
	} else {
		boldedThickness = 0;
	}
	for (t = 0; t <= boldedThickness; t++) {
     6a4:	e2877001 	add	r7, r7, #1
     6a8:	e59d3000 	ldr	r3, [sp]
     6ac:	e1570003 	cmp	r7, r3
     6b0:	ca000003 	bgt	6c4 <draw_number+0xb0>
    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0){
        status = *(pixel_ctrl_ptr + 3);
    }
}
void draw_number(int x, int y, int num, bool bold) { // num must be between 0 - 9
     6b4:	e59d3004 	ldr	r3, [sp, #4]
     6b8:	e2435002 	sub	r5, r3, #2
     6bc:	e1a04008 	mov	r4, r8
     6c0:	eaffffe6 	b	660 <draw_number+0x4c>
			if (number[num][dim] == color2) {
				plot_pixel(x + dim % NUM_W + t, y + dim / NUM_W, number[num][dim]);
			}
		}
	}
}
     6c4:	e28dd00c 	add	sp, sp, #12
     6c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000006cc <draw_sequence>:
void draw_sequence(int x, int y, int num, bool bold) {
     6cc:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     6d0:	e1a0a001 	mov	r10, r1
	int numOfDigits = 0;
	int boldThickness;

	if (bold) {
     6d4:	e2537000 	subs	r7, r3, #0
		boldThickness = 3;
     6d8:	e3530000 	cmp	r3, #0
     6dc:	13a03003 	movne	r3, #3
     6e0:	03a03000 	moveq	r3, #0
	} else {
		boldThickness = 0;
	}
	while (num > 0) {
     6e4:	e3520000 	cmp	r2, #0
     6e8:	d8bd85f8 	pople	{r3, r4, r5, r6, r7, r8, r10, pc}
				plot_pixel(x + dim % NUM_W + t, y + dim / NUM_W, number[num][dim]);
			}
		}
	}
}
void draw_sequence(int x, int y, int num, bool bold) {
     6ec:	e30f6ff1 	movw	r6, #65521	; 0xfff1
     6f0:	e34f6fff 	movt	r6, #65535	; 0xffff
     6f4:	e0636006 	rsb	r6, r3, r6
     6f8:	e1a05000 	mov	r5, r0
		boldThickness = 3;
	} else {
		boldThickness = 0;
	}
	while (num > 0) {
		int digit = num % 10;
     6fc:	e3068667 	movw	r8, #26215	; 0x6667
     700:	e3468666 	movt	r8, #26214	; 0x6666
     704:	e0c43298 	smull	r3, r4, r8, r2
     708:	e1a03fc2 	asr	r3, r2, #31
     70c:	e0634144 	rsb	r4, r3, r4, asr #2
     710:	e084c104 	add	r12, r4, r4, lsl #2

		draw_number(x - (NUM_W + boldThickness) * numOfDigits - SPACE_BETWEEN_CHAR * numOfDigits, y, digit, bold);
     714:	e1a00005 	mov	r0, r5
     718:	e1a0100a 	mov	r1, r10
     71c:	e042208c 	sub	r2, r2, r12, lsl #1
     720:	e1a03007 	mov	r3, r7
     724:	ebffffba 	bl	614 <draw_number>

		num = num / 10;
     728:	e1a02004 	mov	r2, r4
     72c:	e0855006 	add	r5, r5, r6
	if (bold) {
		boldThickness = 3;
	} else {
		boldThickness = 0;
	}
	while (num > 0) {
     730:	e3540000 	cmp	r4, #0
     734:	cafffff2 	bgt	704 <draw_sequence+0x38>
     738:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

0000073c <draw_start>:

		num = num / 10;
		numOfDigits++;
	}
}
void draw_start(int x, int y) {
     73c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     740:	e24dd014 	sub	sp, sp, #20
     744:	e1a0b000 	mov	r11, r0
     748:	e58d1004 	str	r1, [sp, #4]
     74c:	e3a01000 	mov	r1, #0
     750:	e58d100c 	str	r1, [sp, #12]
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
     754:	e58d1008 	str	r1, [sp, #8]

		num = num / 10;
		numOfDigits++;
	}
}
void draw_start(int x, int y) {
     758:	e1a07001 	mov	r7, r1
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (start[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
     75c:	e30e9c4f 	movw	r9, #60495	; 0xec4f
     760:	e3449ec4 	movt	r9, #20164	; 0x4ec4
}
void draw_start(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     764:	e3006111 	movw	r6, #273	; 0x111
     768:	ea00001a 	b	7d8 <draw_start+0x9c>
			if (start[letter][dim] == color2) {
     76c:	e1f530b2 	ldrh	r3, [r5, #2]!
     770:	e3530000 	cmp	r3, #0
     774:	1a00000c 	bne	7ac <draw_start+0x70>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
     778:	e0c12499 	smull	r2, r1, r9, r4
     77c:	e1a03fc4 	asr	r3, r4, #31
     780:	e0631141 	rsb	r1, r3, r1, asr #2
     784:	e0810081 	add	r0, r1, r1, lsl #1
     788:	e0810100 	add	r0, r1, r0, lsl #2
     78c:	e0600004 	rsb	r0, r0, r4
     790:	e080000b 	add	r0, r0, r11
     794:	e080000a 	add	r0, r0, r10
     798:	e0800008 	add	r0, r0, r8
     79c:	e59d3004 	ldr	r3, [sp, #4]
     7a0:	e0811003 	add	r1, r1, r3
     7a4:	e1a02007 	mov	r2, r7
     7a8:	ebfffef5 	bl	384 <plot_pixel>
}
void draw_start(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     7ac:	e2844001 	add	r4, r4, #1
     7b0:	e1540006 	cmp	r4, r6
     7b4:	1affffec 	bne	76c <draw_start+0x30>
	}
}
void draw_start(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
     7b8:	e59d1008 	ldr	r1, [sp, #8]
     7bc:	e2811001 	add	r1, r1, #1
     7c0:	e58d1008 	str	r1, [sp, #8]
     7c4:	e59d200c 	ldr	r2, [sp, #12]
     7c8:	e282200d 	add	r2, r2, #13
     7cc:	e58d200c 	str	r2, [sp, #12]
     7d0:	e3510005 	cmp	r1, #5
     7d4:	0a000008 	beq	7fc <draw_start+0xc0>

		num = num / 10;
		numOfDigits++;
	}
}
void draw_start(int x, int y) {
     7d8:	e59d3008 	ldr	r3, [sp, #8]
     7dc:	e1a0a083 	lsl	r10, r3, #1
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (start[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
     7e0:	e59d800c 	ldr	r8, [sp, #12]

		num = num / 10;
		numOfDigits++;
	}
}
void draw_start(int x, int y) {
     7e4:	e3001222 	movw	r1, #546	; 0x222
     7e8:	e59f2014 	ldr	r2, [pc, #20]	; 804 <draw_start+0xc8>
     7ec:	e0252391 	mla	r5, r1, r3, r2
     7f0:	e2455002 	sub	r5, r5, #2
     7f4:	e1a04007 	mov	r4, r7
     7f8:	eaffffdb 	b	76c <draw_start+0x30>
			if (start[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
			}
		}
	}
}
     7fc:	e28dd014 	add	sp, sp, #20
     800:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     804:	00004108 	.word	0x00004108

00000808 <draw_go>:
void draw_go(int x, int y) {
     808:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     80c:	e24dd014 	sub	sp, sp, #20
     810:	e1a0b000 	mov	r11, r0
     814:	e58d1004 	str	r1, [sp, #4]
     818:	e3a01000 	mov	r1, #0
     81c:	e58d100c 	str	r1, [sp, #12]
	int letter, dim;

	for (letter = 0; letter < 2; letter++) {
     820:	e58d1008 	str	r1, [sp, #8]
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
			}
		}
	}
}
void draw_go(int x, int y) {
     824:	e1a07001 	mov	r7, r1
	int letter, dim;

	for (letter = 0; letter < 2; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (go[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, go[letter][dim]);
     828:	e30e8c4f 	movw	r8, #60495	; 0xec4f
     82c:	e3448ec4 	movt	r8, #20164	; 0x4ec4
}
void draw_go(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 2; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     830:	e3006111 	movw	r6, #273	; 0x111
     834:	ea00001a 	b	8a4 <draw_go+0x9c>
			if (go[letter][dim] == color2) {
     838:	e1f530b2 	ldrh	r3, [r5, #2]!
     83c:	e3530000 	cmp	r3, #0
     840:	1a00000c 	bne	878 <draw_go+0x70>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, go[letter][dim]);
     844:	e0c12498 	smull	r2, r1, r8, r4
     848:	e1a03fc4 	asr	r3, r4, #31
     84c:	e0631141 	rsb	r1, r3, r1, asr #2
     850:	e0810081 	add	r0, r1, r1, lsl #1
     854:	e0810100 	add	r0, r1, r0, lsl #2
     858:	e0600004 	rsb	r0, r0, r4
     85c:	e080000b 	add	r0, r0, r11
     860:	e0800009 	add	r0, r0, r9
     864:	e080000a 	add	r0, r0, r10
     868:	e59d3004 	ldr	r3, [sp, #4]
     86c:	e0811003 	add	r1, r1, r3
     870:	e1a02007 	mov	r2, r7
     874:	ebfffec2 	bl	384 <plot_pixel>
}
void draw_go(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 2; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     878:	e2844001 	add	r4, r4, #1
     87c:	e1540006 	cmp	r4, r6
     880:	1affffec 	bne	838 <draw_go+0x30>
	}
}
void draw_go(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 2; letter++) {
     884:	e59d1008 	ldr	r1, [sp, #8]
     888:	e2811001 	add	r1, r1, #1
     88c:	e58d1008 	str	r1, [sp, #8]
     890:	e59d200c 	ldr	r2, [sp, #12]
     894:	e282200d 	add	r2, r2, #13
     898:	e58d200c 	str	r2, [sp, #12]
     89c:	e3510002 	cmp	r1, #2
     8a0:	0a000008 	beq	8c8 <draw_go+0xc0>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
			}
		}
	}
}
void draw_go(int x, int y) {
     8a4:	e59d3008 	ldr	r3, [sp, #8]
     8a8:	e1a09083 	lsl	r9, r3, #1
	int letter, dim;

	for (letter = 0; letter < 2; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (go[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, go[letter][dim]);
     8ac:	e59da00c 	ldr	r10, [sp, #12]
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
			}
		}
	}
}
void draw_go(int x, int y) {
     8b0:	e3001222 	movw	r1, #546	; 0x222
     8b4:	e59f2014 	ldr	r2, [pc, #20]	; 8d0 <draw_go+0xc8>
     8b8:	e0252391 	mla	r5, r1, r3, r2
     8bc:	e2455002 	sub	r5, r5, #2
     8c0:	e1a04007 	mov	r4, r7
     8c4:	eaffffdb 	b	838 <draw_go+0x30>
			if (go[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, go[letter][dim]);
			}
		}
	}
}
     8c8:	e28dd014 	add	sp, sp, #20
     8cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     8d0:	00004bb4 	.word	0x00004bb4

000008d4 <draw_win>:
void draw_win(int x, int y) {
     8d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     8d8:	e24dd014 	sub	sp, sp, #20
     8dc:	e1a0b000 	mov	r11, r0
     8e0:	e58d1004 	str	r1, [sp, #4]
     8e4:	e3a01000 	mov	r1, #0
     8e8:	e58d100c 	str	r1, [sp, #12]
	int letter, dim;

	for (letter = 0; letter < 3; letter++) {
     8ec:	e58d1008 	str	r1, [sp, #8]
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, go[letter][dim]);
			}
		}
	}
}
void draw_win(int x, int y) {
     8f0:	e1a07001 	mov	r7, r1
	int letter, dim;

	for (letter = 0; letter < 3; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (win[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, win[letter][dim]);
     8f4:	e30e9c4f 	movw	r9, #60495	; 0xec4f
     8f8:	e3449ec4 	movt	r9, #20164	; 0x4ec4
}
void draw_win(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 3; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     8fc:	e3006111 	movw	r6, #273	; 0x111
     900:	ea00001a 	b	970 <draw_win+0x9c>
			if (win[letter][dim] == color2) {
     904:	e1f530b2 	ldrh	r3, [r5, #2]!
     908:	e3530000 	cmp	r3, #0
     90c:	1a00000c 	bne	944 <draw_win+0x70>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, win[letter][dim]);
     910:	e0c12499 	smull	r2, r1, r9, r4
     914:	e1a03fc4 	asr	r3, r4, #31
     918:	e0631141 	rsb	r1, r3, r1, asr #2
     91c:	e0810081 	add	r0, r1, r1, lsl #1
     920:	e0810100 	add	r0, r1, r0, lsl #2
     924:	e0600004 	rsb	r0, r0, r4
     928:	e080000b 	add	r0, r0, r11
     92c:	e080000a 	add	r0, r0, r10
     930:	e0800008 	add	r0, r0, r8
     934:	e59d3004 	ldr	r3, [sp, #4]
     938:	e0811003 	add	r1, r1, r3
     93c:	e1a02007 	mov	r2, r7
     940:	ebfffe8f 	bl	384 <plot_pixel>
}
void draw_win(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 3; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     944:	e2844001 	add	r4, r4, #1
     948:	e1540006 	cmp	r4, r6
     94c:	1affffec 	bne	904 <draw_win+0x30>
	}
}
void draw_win(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 3; letter++) {
     950:	e59d1008 	ldr	r1, [sp, #8]
     954:	e2811001 	add	r1, r1, #1
     958:	e58d1008 	str	r1, [sp, #8]
     95c:	e59d200c 	ldr	r2, [sp, #12]
     960:	e282200d 	add	r2, r2, #13
     964:	e58d200c 	str	r2, [sp, #12]
     968:	e3510003 	cmp	r1, #3
     96c:	0a000008 	beq	994 <draw_win+0xc0>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, go[letter][dim]);
			}
		}
	}
}
void draw_win(int x, int y) {
     970:	e59d3008 	ldr	r3, [sp, #8]
     974:	e1a0a083 	lsl	r10, r3, #1
	int letter, dim;

	for (letter = 0; letter < 3; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (win[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, win[letter][dim]);
     978:	e59d800c 	ldr	r8, [sp, #12]
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, go[letter][dim]);
			}
		}
	}
}
void draw_win(int x, int y) {
     97c:	e3001222 	movw	r1, #546	; 0x222
     980:	e59f2014 	ldr	r2, [pc, #20]	; 99c <draw_win+0xc8>
     984:	e0252391 	mla	r5, r1, r3, r2
     988:	e2455002 	sub	r5, r5, #2
     98c:	e1a04007 	mov	r4, r7
     990:	eaffffdb 	b	904 <draw_win+0x30>
			if (win[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, win[letter][dim]);
			}
		}
	}
}
     994:	e28dd014 	add	sp, sp, #20
     998:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     99c:	00004ff8 	.word	0x00004ff8

000009a0 <draw_lose>:
void draw_lose(int x, int y) {
     9a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     9a4:	e24dd014 	sub	sp, sp, #20
     9a8:	e1a0b000 	mov	r11, r0
     9ac:	e58d1004 	str	r1, [sp, #4]
     9b0:	e3a01000 	mov	r1, #0
     9b4:	e58d100c 	str	r1, [sp, #12]
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
     9b8:	e58d1008 	str	r1, [sp, #8]
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, win[letter][dim]);
			}
		}
	}
}
void draw_lose(int x, int y) {
     9bc:	e1a07001 	mov	r7, r1
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (lose[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, lose[letter][dim]);
     9c0:	e30e9c4f 	movw	r9, #60495	; 0xec4f
     9c4:	e3449ec4 	movt	r9, #20164	; 0x4ec4
}
void draw_lose(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     9c8:	e3006111 	movw	r6, #273	; 0x111
     9cc:	ea00001a 	b	a3c <draw_lose+0x9c>
			if (lose[letter][dim] == color2) {
     9d0:	e1f530b2 	ldrh	r3, [r5, #2]!
     9d4:	e3530000 	cmp	r3, #0
     9d8:	1a00000c 	bne	a10 <draw_lose+0x70>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, lose[letter][dim]);
     9dc:	e0c12499 	smull	r2, r1, r9, r4
     9e0:	e1a03fc4 	asr	r3, r4, #31
     9e4:	e0631141 	rsb	r1, r3, r1, asr #2
     9e8:	e0810081 	add	r0, r1, r1, lsl #1
     9ec:	e0810100 	add	r0, r1, r0, lsl #2
     9f0:	e0600004 	rsb	r0, r0, r4
     9f4:	e080000b 	add	r0, r0, r11
     9f8:	e080000a 	add	r0, r0, r10
     9fc:	e0800008 	add	r0, r0, r8
     a00:	e59d3004 	ldr	r3, [sp, #4]
     a04:	e0811003 	add	r1, r1, r3
     a08:	e1a02007 	mov	r2, r7
     a0c:	ebfffe5c 	bl	384 <plot_pixel>
}
void draw_lose(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     a10:	e2844001 	add	r4, r4, #1
     a14:	e1540006 	cmp	r4, r6
     a18:	1affffec 	bne	9d0 <draw_lose+0x30>
	}
}
void draw_lose(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
     a1c:	e59d1008 	ldr	r1, [sp, #8]
     a20:	e2811001 	add	r1, r1, #1
     a24:	e58d1008 	str	r1, [sp, #8]
     a28:	e59d200c 	ldr	r2, [sp, #12]
     a2c:	e282200d 	add	r2, r2, #13
     a30:	e58d200c 	str	r2, [sp, #12]
     a34:	e3510004 	cmp	r1, #4
     a38:	0a000008 	beq	a60 <draw_lose+0xc0>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, win[letter][dim]);
			}
		}
	}
}
void draw_lose(int x, int y) {
     a3c:	e59d3008 	ldr	r3, [sp, #8]
     a40:	e1a0a083 	lsl	r10, r3, #1
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (lose[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, lose[letter][dim]);
     a44:	e59d800c 	ldr	r8, [sp, #12]
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, win[letter][dim]);
			}
		}
	}
}
void draw_lose(int x, int y) {
     a48:	e3001222 	movw	r1, #546	; 0x222
     a4c:	e59f2014 	ldr	r2, [pc, #20]	; a68 <draw_lose+0xc8>
     a50:	e0252391 	mla	r5, r1, r3, r2
     a54:	e2455002 	sub	r5, r5, #2
     a58:	e1a04007 	mov	r4, r7
     a5c:	eaffffdb 	b	9d0 <draw_lose+0x30>
			if (lose[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, lose[letter][dim]);
			}
		}
	}
}
     a60:	e28dd014 	add	sp, sp, #20
     a64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     a68:	00005660 	.word	0x00005660

00000a6c <draw_draw>:
void draw_draw(int x, int y) {
     a6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a70:	e24dd014 	sub	sp, sp, #20
     a74:	e1a0b000 	mov	r11, r0
     a78:	e58d1004 	str	r1, [sp, #4]
     a7c:	e3a01000 	mov	r1, #0
     a80:	e58d100c 	str	r1, [sp, #12]
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
     a84:	e58d1008 	str	r1, [sp, #8]
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, lose[letter][dim]);
			}
		}
	}
}
void draw_draw(int x, int y) {
     a88:	e1a07001 	mov	r7, r1
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (draw[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, draw[letter][dim]);
     a8c:	e30e9c4f 	movw	r9, #60495	; 0xec4f
     a90:	e3449ec4 	movt	r9, #20164	; 0x4ec4
}
void draw_draw(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     a94:	e3006111 	movw	r6, #273	; 0x111
     a98:	ea00001a 	b	b08 <draw_draw+0x9c>
			if (draw[letter][dim] == color2) {
     a9c:	e1f530b2 	ldrh	r3, [r5, #2]!
     aa0:	e3530000 	cmp	r3, #0
     aa4:	1a00000c 	bne	adc <draw_draw+0x70>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, draw[letter][dim]);
     aa8:	e0c12499 	smull	r2, r1, r9, r4
     aac:	e1a03fc4 	asr	r3, r4, #31
     ab0:	e0631141 	rsb	r1, r3, r1, asr #2
     ab4:	e0810081 	add	r0, r1, r1, lsl #1
     ab8:	e0810100 	add	r0, r1, r0, lsl #2
     abc:	e0600004 	rsb	r0, r0, r4
     ac0:	e080000b 	add	r0, r0, r11
     ac4:	e080000a 	add	r0, r0, r10
     ac8:	e0800008 	add	r0, r0, r8
     acc:	e59d3004 	ldr	r3, [sp, #4]
     ad0:	e0811003 	add	r1, r1, r3
     ad4:	e1a02007 	mov	r2, r7
     ad8:	ebfffe29 	bl	384 <plot_pixel>
}
void draw_draw(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     adc:	e2844001 	add	r4, r4, #1
     ae0:	e1540006 	cmp	r4, r6
     ae4:	1affffec 	bne	a9c <draw_draw+0x30>
	}
}
void draw_draw(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
     ae8:	e59d1008 	ldr	r1, [sp, #8]
     aec:	e2811001 	add	r1, r1, #1
     af0:	e58d1008 	str	r1, [sp, #8]
     af4:	e59d200c 	ldr	r2, [sp, #12]
     af8:	e282200d 	add	r2, r2, #13
     afc:	e58d200c 	str	r2, [sp, #12]
     b00:	e3510004 	cmp	r1, #4
     b04:	0a000008 	beq	b2c <draw_draw+0xc0>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, lose[letter][dim]);
			}
		}
	}
}
void draw_draw(int x, int y) {
     b08:	e59d3008 	ldr	r3, [sp, #8]
     b0c:	e1a0a083 	lsl	r10, r3, #1
	int letter, dim;

	for (letter = 0; letter < 4; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (draw[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, draw[letter][dim]);
     b10:	e59d800c 	ldr	r8, [sp, #12]
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, lose[letter][dim]);
			}
		}
	}
}
void draw_draw(int x, int y) {
     b14:	e3001222 	movw	r1, #546	; 0x222
     b18:	e59f2014 	ldr	r2, [pc, #20]	; b34 <draw_draw+0xc8>
     b1c:	e0252391 	mla	r5, r1, r3, r2
     b20:	e2455002 	sub	r5, r5, #2
     b24:	e1a04007 	mov	r4, r7
     b28:	eaffffdb 	b	a9c <draw_draw+0x30>
			if (draw[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, draw[letter][dim]);
			}
		}
	}
}
     b2c:	e28dd014 	add	sp, sp, #20
     b30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     b34:	00005ee8 	.word	0x00005ee8

00000b38 <draw_spikes>:
void draw_spikes(int x, int y) {
     b38:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     b3c:	e1a0a000 	mov	r10, r0
     b40:	e1a08001 	mov	r8, r1
	int numOfSpikes, dim;

	for (numOfSpikes = 0; numOfSpikes < 3; numOfSpikes++) {
		for (dim = 0; dim < SPIKE_DIM * SPIKE_DIM; dim++) {
			if (spike[dim] == color2) {
				plot_pixel(x + dim % SPIKE_DIM + SPIKE_DIM * numOfSpikes, y + dim / SPIKE_DIM, spike[dim]);
     b44:	e3a09000 	mov	r9, #0
     b48:	e59fb06c 	ldr	r11, [pc, #108]	; bbc <draw_spikes+0x84>
     b4c:	e1a06009 	mov	r6, r9
     b50:	ea000015 	b	bac <draw_spikes+0x74>
void draw_spikes(int x, int y) {
	int numOfSpikes, dim;

	for (numOfSpikes = 0; numOfSpikes < 3; numOfSpikes++) {
		for (dim = 0; dim < SPIKE_DIM * SPIKE_DIM; dim++) {
			if (spike[dim] == color2) {
     b54:	e1f530b2 	ldrh	r3, [r5, #2]!
     b58:	e3530000 	cmp	r3, #0
     b5c:	1a00000c 	bne	b94 <draw_spikes+0x5c>
				plot_pixel(x + dim % SPIKE_DIM + SPIKE_DIM * numOfSpikes, y + dim / SPIKE_DIM, spike[dim]);
     b60:	e1a03fc4 	asr	r3, r4, #31
     b64:	e1a03ea3 	lsr	r3, r3, #29
     b68:	e0840003 	add	r0, r4, r3
     b6c:	e2000007 	and	r0, r0, #7
     b70:	e0633000 	rsb	r3, r3, r0
     b74:	e083000a 	add	r0, r3, r10
     b78:	e2841007 	add	r1, r4, #7
     b7c:	e3540000 	cmp	r4, #0
     b80:	a1a01004 	movge	r1, r4
     b84:	e0800007 	add	r0, r0, r7
     b88:	e08811c1 	add	r1, r8, r1, asr #3
     b8c:	e1a02006 	mov	r2, r6
     b90:	ebfffdfb 	bl	384 <plot_pixel>
}
void draw_spikes(int x, int y) {
	int numOfSpikes, dim;

	for (numOfSpikes = 0; numOfSpikes < 3; numOfSpikes++) {
		for (dim = 0; dim < SPIKE_DIM * SPIKE_DIM; dim++) {
     b94:	e2844001 	add	r4, r4, #1
     b98:	e3540040 	cmp	r4, #64	; 0x40
     b9c:	1affffec 	bne	b54 <draw_spikes+0x1c>
     ba0:	e2899008 	add	r9, r9, #8
	}
}
void draw_spikes(int x, int y) {
	int numOfSpikes, dim;

	for (numOfSpikes = 0; numOfSpikes < 3; numOfSpikes++) {
     ba4:	e3590018 	cmp	r9, #24
     ba8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
		for (dim = 0; dim < SPIKE_DIM * SPIKE_DIM; dim++) {
			if (spike[dim] == color2) {
				plot_pixel(x + dim % SPIKE_DIM + SPIKE_DIM * numOfSpikes, y + dim / SPIKE_DIM, spike[dim]);
     bac:	e1a07009 	mov	r7, r9
     bb0:	e24b5006 	sub	r5, r11, #6
     bb4:	e1a04006 	mov	r4, r6
     bb8:	eaffffe5 	b	b54 <draw_spikes+0x1c>
     bbc:	00006774 	.word	0x00006774

00000bc0 <interval_timer_ISR>:

extern int t_minus;
extern int restart_t_minus;
void interval_timer_ISR(){
    volatile int * interval_timer_ptr = (int *)TIMER_BASE;
    *(interval_timer_ptr) = 0; // Clear the interrupt
     bc0:	e3a03a02 	mov	r3, #8192	; 0x2000
     bc4:	e34f3f20 	movt	r3, #65312	; 0xff20
     bc8:	e3a02000 	mov	r2, #0
     bcc:	e5832000 	str	r2, [r3]
	
	tick++;
     bd0:	e30731c8 	movw	r3, #29128	; 0x71c8
     bd4:	e3403000 	movt	r3, #0
     bd8:	e5933000 	ldr	r3, [r3]
     bdc:	e2833001 	add	r3, r3, #1
	if(tick == 20){//1s
     be0:	e3530014 	cmp	r3, #20
     be4:	0a000003 	beq	bf8 <interval_timer_ISR+0x38>
extern int restart_t_minus;
void interval_timer_ISR(){
    volatile int * interval_timer_ptr = (int *)TIMER_BASE;
    *(interval_timer_ptr) = 0; // Clear the interrupt
	
	tick++;
     be8:	e30721c8 	movw	r2, #29128	; 0x71c8
     bec:	e3402000 	movt	r2, #0
     bf0:	e5823000 	str	r3, [r2]
     bf4:	e12fff1e 	bx	lr
	if(tick == 20){//1s
		tick = 0;
     bf8:	e30731c8 	movw	r3, #29128	; 0x71c8
     bfc:	e3403000 	movt	r3, #0
     c00:	e3a02000 	mov	r2, #0
     c04:	e5832000 	str	r2, [r3]
		if(restart_t_minus > 0){
     c08:	e30730f4 	movw	r3, #28916	; 0x70f4
     c0c:	e3403000 	movt	r3, #0
     c10:	e5933000 	ldr	r3, [r3]
     c14:	e1530002 	cmp	r3, r2
     c18:	da000004 	ble	c30 <interval_timer_ISR+0x70>
			restart_t_minus--;
     c1c:	e30720f4 	movw	r2, #28916	; 0x70f4
     c20:	e3402000 	movt	r2, #0
     c24:	e2433001 	sub	r3, r3, #1
     c28:	e5823000 	str	r3, [r2]
     c2c:	e12fff1e 	bx	lr
		}
		else{
			if(t_minus > 0){
     c30:	e3063858 	movw	r3, #26712	; 0x6858
     c34:	e3403000 	movt	r3, #0
     c38:	e5932000 	ldr	r2, [r3]
     c3c:	e3520000 	cmp	r2, #0
				t_minus --;
     c40:	c3063858 	movwgt	r3, #26712	; 0x6858
     c44:	c3403000 	movtgt	r3, #0
     c48:	c2422001 	subgt	r2, r2, #1
     c4c:	c5832000 	strgt	r2, [r3]
     c50:	e12fff1e 	bx	lr

00000c54 <pushbutton_ISR>:

void pushbutton_ISR(void){
    volatile int * KEY_ptr = (int *)KEY_BASE;
    int            press;

    press          = *(KEY_ptr + 3); // read the pushbutton interrupt register
     c54:	e3a02000 	mov	r2, #0
     c58:	e34f2f20 	movt	r2, #65312	; 0xff20
     c5c:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
    *(KEY_ptr + 3) = press;          // Clear the interrupt
     c60:	e582305c 	str	r3, [r2, #92]	; 0x5c
	
	//In case of hyper-tapping
	if(press&1){
     c64:	e3130001 	tst	r3, #1
		key[0]++;
     c68:	130720d0 	movwne	r2, #28880	; 0x70d0
     c6c:	13402000 	movtne	r2, #0
     c70:	15921000 	ldrne	r1, [r2]
     c74:	12811001 	addne	r1, r1, #1
     c78:	15821000 	strne	r1, [r2]
	}
	if((press>>1)&1){
     c7c:	e3130002 	tst	r3, #2
		key[1]++;
     c80:	130720d0 	movwne	r2, #28880	; 0x70d0
     c84:	13402000 	movtne	r2, #0
     c88:	15921004 	ldrne	r1, [r2, #4]
     c8c:	12811001 	addne	r1, r1, #1
     c90:	15821004 	strne	r1, [r2, #4]
	}
	if((press>>2)&1){
     c94:	e3130004 	tst	r3, #4
		key[2]++;
     c98:	130720d0 	movwne	r2, #28880	; 0x70d0
     c9c:	13402000 	movtne	r2, #0
     ca0:	15921008 	ldrne	r1, [r2, #8]
     ca4:	12811001 	addne	r1, r1, #1
     ca8:	15821008 	strne	r1, [r2, #8]
	}
	if((press>>3)&1){
     cac:	e3130008 	tst	r3, #8
		key[3]++;
     cb0:	130730d0 	movwne	r3, #28880	; 0x70d0
     cb4:	13403000 	movtne	r3, #0
     cb8:	1593200c 	ldrne	r2, [r3, #12]
     cbc:	12822001 	addne	r2, r2, #1
     cc0:	1583200c 	strne	r2, [r3, #12]
     cc4:	e12fff1e 	bx	lr

00000cc8 <__cs3_isr_irq>:
void interval_timer_ISR(void);
void pushbutton_ISR(void);

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(void)
{
     cc8:	e24ee004 	sub	lr, lr, #4
     ccc:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
    // Read the ICCIAR from the processor interface
    int address = MPCORE_GIC_CPUIF + ICCIAR;
    int int_ID  = *((int *)address);
     cd0:	e3e03a13 	mvn	r3, #77824	; 0x13000
     cd4:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d

	if (int_ID == INTERVAL_TIMER_IRQ) // check if interrupt is from the Altera timer
     cd8:	e3540048 	cmp	r4, #72	; 0x48
     cdc:	1a000001 	bne	ce8 <__cs3_isr_irq+0x20>
        interval_timer_ISR();
     ce0:	ebffffb6 	bl	bc0 <interval_timer_ISR>
     ce4:	ea000004 	b	cfc <__cs3_isr_irq+0x34>
    else if (int_ID == KEYS_IRQ) // check if interrupt is from the KEYs
     ce8:	e3540049 	cmp	r4, #73	; 0x49
     cec:	1a000001 	bne	cf8 <__cs3_isr_irq+0x30>
        pushbutton_ISR();
     cf0:	ebffffd7 	bl	c54 <pushbutton_ISR>
     cf4:	ea000000 	b	cfc <__cs3_isr_irq+0x34>
     cf8:	eafffffe 	b	cf8 <__cs3_isr_irq+0x30>
        while (1)
            ; // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address           = MPCORE_GIC_CPUIF + ICCEOIR;
    *((int *)address) = int_ID;
     cfc:	e3e03a13 	mvn	r3, #77824	; 0x13000
     d00:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
     d04:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

00000d08 <__cs3_reset>:
    return;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void)
{
     d08:	eafffffe 	b	d08 <__cs3_reset>

00000d0c <__cs3_isr_undef>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_undef(void)
{
     d0c:	eafffffe 	b	d0c <__cs3_isr_undef>

00000d10 <__cs3_isr_swi>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_swi(void)
{
     d10:	eafffffe 	b	d10 <__cs3_isr_swi>

00000d14 <__cs3_isr_pabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_pabort(void)
{
     d14:	eafffffe 	b	d14 <__cs3_isr_pabort>

00000d18 <__cs3_isr_dabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_dabort(void)
{
     d18:	eafffffe 	b	d18 <__cs3_isr_dabort>

00000d1c <__cs3_isr_fiq>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_fiq(void)
{
     d1c:	eafffffe 	b	d1c <__cs3_isr_fiq>

00000d20 <set_A9_IRQ_stack>:
{
    int stack, mode;
    stack = A9_ONCHIP_END - 7; // top of A9 onchip memory, aligned to 8 bytes
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     d20:	e3a030d2 	mov	r3, #210	; 0xd2
     d24:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r"(stack));
     d28:	e3e03007 	mvn	r3, #7
     d2c:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     d30:	e3a030d3 	mov	r3, #211	; 0xd3
     d34:	e129f003 	msr	CPSR_fc, r3
     d38:	e12fff1e 	bx	lr

00000d3c <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
    int status = SVC_MODE | INT_ENABLE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(status));
     d3c:	e3a03053 	mov	r3, #83	; 0x53
     d40:	e129f003 	msr	CPSR_fc, r3
     d44:	e12fff1e 	bx	lr

00000d48 <config_GIC>:
void config_GIC(void)
{
    int address; // used to calculate register addresses

    /* configure the FPGA interval timer and KEYs interrupts */
    *((int *)0xFFFED848) = 0x00000101;
     d48:	e3e03a12 	mvn	r3, #73728	; 0x12000
     d4c:	e3002101 	movw	r2, #257	; 0x101
     d50:	e50327b7 	str	r2, [r3, #-1975]	; 0xfffff849
    *((int *)0xFFFED108) = 0x00000300;
     d54:	e3a02c03 	mov	r2, #768	; 0x300
     d58:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
    // priorities
    address           = MPCORE_GIC_CPUIF + ICCPMR;
    *((int *)address) = 0xFFFF;
     d5c:	e3e01a13 	mvn	r1, #77824	; 0x13000
     d60:	e30f2fff 	movw	r2, #65535	; 0xffff
     d64:	e5012efb 	str	r2, [r1, #-3835]	; 0xfffff105

    // Set CPU Interface Control Register (ICCICR). Enable signaling of
    // interrupts
    address           = MPCORE_GIC_CPUIF + ICCICR;
    *((int *)address) = ENABLE;
     d68:	e3a02001 	mov	r2, #1
     d6c:	e5012eff 	str	r2, [r1, #-3839]	; 0xfffff101

    // Configure the Distributor Control Register (ICDDCR) to send pending
    // interrupts to CPUs
    address           = MPCORE_GIC_DIST + ICDDCR;
    *((int *)address) = ENABLE;
     d70:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
     d74:	e12fff1e 	bx	lr

00000d78 <match_over>:
		}
		key[3]--;
	}
}
void match_over(int r){
	restart_t_minus = RESTART_DELAY;
     d78:	e30730f4 	movw	r3, #28916	; 0x70f4
     d7c:	e3403000 	movt	r3, #0
     d80:	e3a02005 	mov	r2, #5
     d84:	e5832000 	str	r2, [r3]
	game_over = true;
     d88:	e30730e0 	movw	r3, #28896	; 0x70e0
     d8c:	e3403000 	movt	r3, #0
     d90:	e3a02001 	mov	r2, #1
     d94:	e5c32000 	strb	r2, [r3]
	result = r;
     d98:	e5830004 	str	r0, [r3, #4]
	t_minus = T_MINUS;
     d9c:	e3063858 	movw	r3, #26712	; 0x6858
     da0:	e3403000 	movt	r3, #0
     da4:	e3a0200a 	mov	r2, #10
     da8:	e5832000 	str	r2, [r3]
     dac:	e12fff1e 	bx	lr

00000db0 <lift_board>:
	p1_score = 0;
	p2_score = 0;
	game_over = false;
	init_board();
}
void lift_board(int board[][BOARD_COLS], bool *odd, int *path_end){
     db0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     db4:	e1a08000 	mov	r8, r0
     db8:	e1a06001 	mov	r6, r1
     dbc:	e1a0a002 	mov	r10, r2
     dc0:	e1a03000 	mov	r3, r0
	int row = 0;
     dc4:	e3a02000 	mov	r2, #0
	for(row;row<BOARD_ROWS-1;row++){
		int col = 0;
		for(col;col<BOARD_COLS;col++){
			board[row][col] = board[row+1][col];
     dc8:	e5931014 	ldr	r1, [r3, #20]
     dcc:	e5831000 	str	r1, [r3]
     dd0:	e5931018 	ldr	r1, [r3, #24]
     dd4:	e5831004 	str	r1, [r3, #4]
     dd8:	e593101c 	ldr	r1, [r3, #28]
     ddc:	e5831008 	str	r1, [r3, #8]
     de0:	e5931020 	ldr	r1, [r3, #32]
     de4:	e583100c 	str	r1, [r3, #12]
     de8:	e5931024 	ldr	r1, [r3, #36]	; 0x24
     dec:	e5831010 	str	r1, [r3, #16]
	game_over = false;
	init_board();
}
void lift_board(int board[][BOARD_COLS], bool *odd, int *path_end){
	int row = 0;
	for(row;row<BOARD_ROWS-1;row++){
     df0:	e2822001 	add	r2, r2, #1
     df4:	e2833014 	add	r3, r3, #20
     df8:	e3520004 	cmp	r2, #4
     dfc:	1afffff1 	bne	dc8 <lift_board+0x18>
	p1_score = 0;
	p2_score = 0;
	game_over = false;
	init_board();
}
void lift_board(int board[][BOARD_COLS], bool *odd, int *path_end){
     e00:	e2885050 	add	r5, r8, #80	; 0x50
     e04:	e3a04000 	mov	r4, #0
		}	
	}
	row = BOARD_ROWS-1;
	int col=0;
	for(col;col<BOARD_COLS;col++){
		board[row][col] = NONE;
     e08:	e1a09004 	mov	r9, r4
		int type = rand()%TOTAL_TYPES;
     e0c:	e3057556 	movw	r7, #21846	; 0x5556
     e10:	e3457555 	movt	r7, #21845	; 0x5555
		}	
	}
	row = BOARD_ROWS-1;
	int col=0;
	for(col;col<BOARD_COLS;col++){
		board[row][col] = NONE;
     e14:	e4859004 	str	r9, [r5], #4
		int type = rand()%TOTAL_TYPES;
     e18:	eb0002eb 	bl	19cc <rand>
     e1c:	e0c32097 	smull	r2, r3, r7, r0
     e20:	e0433fc0 	sub	r3, r3, r0, asr #31
     e24:	e0833083 	add	r3, r3, r3, lsl #1
     e28:	e0633000 	rsb	r3, r3, r0
		if(*odd){
     e2c:	e5d62000 	ldrb	r2, [r6]
     e30:	e3520000 	cmp	r2, #0
     e34:	0a000006 	beq	e54 <lift_board+0xa4>
			if(col%2==1){
     e38:	e1a02fa4 	lsr	r2, r4, #31
     e3c:	e0841002 	add	r1, r4, r2
     e40:	e2011001 	and	r1, r1, #1
     e44:	e0622001 	rsb	r2, r2, r1
     e48:	e3520001 	cmp	r2, #1
				board[row][col] = type;
     e4c:	05053004 	streq	r3, [r5, #-4]
     e50:	ea000001 	b	e5c <lift_board+0xac>
			}
		}else{
			if(col%2==0){
     e54:	e3140001 	tst	r4, #1
				board[row][col] = type;
     e58:	05053004 	streq	r3, [r5, #-4]
			board[row][col] = board[row+1][col];
		}	
	}
	row = BOARD_ROWS-1;
	int col=0;
	for(col;col<BOARD_COLS;col++){
     e5c:	e2844001 	add	r4, r4, #1
     e60:	e3540005 	cmp	r4, #5
     e64:	1affffea 	bne	e14 <lift_board+0x64>
			if(col%2==0){
				board[row][col] = type;
			}
		}
	}
	*odd = !*odd;
     e68:	e5d63000 	ldrb	r3, [r6]
     e6c:	e2233001 	eor	r3, r3, #1
     e70:	e5c63000 	strb	r3, [r6]
	
	row = BOARD_ROWS - 1;
	int next = rand()%2;
     e74:	eb0002d4 	bl	19cc <rand>
     e78:	e0803fa0 	add	r3, r0, r0, lsr #31
     e7c:	e2033001 	and	r3, r3, #1
     e80:	e0430fa0 	sub	r0, r3, r0, lsr #31
	next = next*2-1;
     e84:	e1a03080 	lsl	r3, r0, #1
     e88:	e2433001 	sub	r3, r3, #1
	
	int temp = *path_end;
     e8c:	e59a2000 	ldr	r2, [r10]
	
	if((temp+next) >= BOARD_COLS||(temp+next)<0){
     e90:	e0821003 	add	r1, r2, r3
     e94:	e3510004 	cmp	r1, #4
		temp -= next;
     e98:	80633002 	rsbhi	r3, r3, r2
	int next = rand()%2;
	next = next*2-1;
	
	int temp = *path_end;
	
	if((temp+next) >= BOARD_COLS||(temp+next)<0){
     e9c:	8a000008 	bhi	ec4 <lift_board+0x114>
		temp -= next;
	}else if((temp-next) >= BOARD_COLS||(temp-next)<0){
     ea0:	e0633002 	rsb	r3, r3, r2
     ea4:	e3530004 	cmp	r3, #4
		temp += next;
     ea8:	81a03001 	movhi	r3, r1
	
	int temp = *path_end;
	
	if((temp+next) >= BOARD_COLS||(temp+next)<0){
		temp -= next;
	}else if((temp-next) >= BOARD_COLS||(temp-next)<0){
     eac:	8a000004 	bhi	ec4 <lift_board+0x114>
		temp += next;
	}else{
		if(board[row][temp+next] == PLATFORM){
     eb0:	e0882101 	add	r2, r8, r1, lsl #2
     eb4:	e5922050 	ldr	r2, [r2, #80]	; 0x50
			temp += next;
     eb8:	e3520001 	cmp	r2, #1
     ebc:	01a03001 	moveq	r3, r1
     ec0:	eaffffff 	b	ec4 <lift_board+0x114>
		}else{
			temp -= next;
		}
	}
	board[row][temp] = PLATFORM;
     ec4:	e0888103 	add	r8, r8, r3, lsl #2
     ec8:	e3a02001 	mov	r2, #1
     ecc:	e5882050 	str	r2, [r8, #80]	; 0x50
	*path_end = temp;
     ed0:	e58a3000 	str	r3, [r10]
     ed4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

00000ed8 <init_board>:
}
void init_board(){
     ed8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
	p1_x = BOARD_COLS/2;
     edc:	e3063860 	movw	r3, #26720	; 0x6860
     ee0:	e3403000 	movt	r3, #0
     ee4:	e3a02002 	mov	r2, #2
     ee8:	e5832000 	str	r2, [r3]
	p2_x = BOARD_COLS/2;
     eec:	e306385c 	movw	r3, #26716	; 0x685c
     ef0:	e3403000 	movt	r3, #0
     ef4:	e5832000 	str	r2, [r3]
	
	p1_odd_row = false;
     ef8:	e30730e0 	movw	r3, #28896	; 0x70e0
     efc:	e3403000 	movt	r3, #0
     f00:	e3a00000 	mov	r0, #0
     f04:	e5c30008 	strb	r0, [r3, #8]
	p2_odd_row = false;
     f08:	e5c30009 	strb	r0, [r3, #9]
	
	p1_path_end = p1_x;	
     f0c:	e583200c 	str	r2, [r3, #12]
	p2_path_end = p2_x;
     f10:	e5832010 	str	r2, [r3, #16]
	
	srand(time(NULL));
     f14:	eb0002c3 	bl	1a28 <time>
     f18:	eb0002a4 	bl	19b0 <srand>
     f1c:	e3072164 	movw	r2, #29028	; 0x7164
     f20:	e3402000 	movt	r2, #0
     f24:	e3071100 	movw	r1, #28928	; 0x7100
     f28:	e3401000 	movt	r1, #0
		}
	}
	board[row][temp] = PLATFORM;
	*path_end = temp;
}
void init_board(){
     f2c:	e2820064 	add	r0, r2, #100	; 0x64
	int col=0;
	
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			p1_board[row][col] = NONE;
     f30:	e3a03000 	mov	r3, #0
     f34:	ea000006 	b	f54 <init_board+0x7c>
     f38:	e59f91ec 	ldr	r9, [pc, #492]	; 112c <init_board+0x254>
     f3c:	e59fa1ec 	ldr	r10, [pc, #492]	; 1130 <init_board+0x258>
	
	srand(time(NULL));
	int row=0;
	int col=0;
	
	for(row;row<BOARD_ROWS;row++){
     f40:	e3a08001 	mov	r8, #1
		}
	}
	board[row][temp] = PLATFORM;
	*path_end = temp;
}
void init_board(){
     f44:	e3a0b000 	mov	r11, #0
	}
	row = 1;
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			int type = rand()%TOTAL_TYPES;
     f48:	e3057556 	movw	r7, #21846	; 0x5556
     f4c:	e3457555 	movt	r7, #21845	; 0x5555
     f50:	ea000029 	b	ffc <init_board+0x124>
	int col=0;
	
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			p1_board[row][col] = NONE;
     f54:	e5823000 	str	r3, [r2]
			p2_board[row][col] = NONE;
     f58:	e5813000 	str	r3, [r1]
	int col=0;
	
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			p1_board[row][col] = NONE;
     f5c:	e5823004 	str	r3, [r2, #4]
			p2_board[row][col] = NONE;
     f60:	e5813004 	str	r3, [r1, #4]
	int col=0;
	
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			p1_board[row][col] = NONE;
     f64:	e5823008 	str	r3, [r2, #8]
			p2_board[row][col] = NONE;
     f68:	e5813008 	str	r3, [r1, #8]
	int col=0;
	
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			p1_board[row][col] = NONE;
     f6c:	e582300c 	str	r3, [r2, #12]
			p2_board[row][col] = NONE;
     f70:	e581300c 	str	r3, [r1, #12]
	int col=0;
	
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			p1_board[row][col] = NONE;
     f74:	e5823010 	str	r3, [r2, #16]
			p2_board[row][col] = NONE;
     f78:	e5813010 	str	r3, [r1, #16]
     f7c:	e2822014 	add	r2, r2, #20
     f80:	e2811014 	add	r1, r1, #20
	
	srand(time(NULL));
	int row=0;
	int col=0;
	
	for(row;row<BOARD_ROWS;row++){
     f84:	e1520000 	cmp	r2, r0
     f88:	1afffff1 	bne	f54 <init_board+0x7c>
     f8c:	eaffffe9 	b	f38 <init_board+0x60>
	}
	row = 1;
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			int type = rand()%TOTAL_TYPES;
     f90:	eb00028d 	bl	19cc <rand>
     f94:	e0c32097 	smull	r2, r3, r7, r0
     f98:	e0433fc0 	sub	r3, r3, r0, asr #31
     f9c:	e0833083 	add	r3, r3, r3, lsl #1
     fa0:	e0633000 	rsb	r3, r3, r0
			if(row%2==0){
     fa4:	e3560000 	cmp	r6, #0
     fa8:	1a000007 	bne	fcc <init_board+0xf4>
				if(col%2==1){
     fac:	e1a02fa4 	lsr	r2, r4, #31
     fb0:	e0841002 	add	r1, r4, r2
     fb4:	e2011001 	and	r1, r1, #1
     fb8:	e0622001 	rsb	r2, r2, r1
     fbc:	e3520001 	cmp	r2, #1
					p1_board[row][col] = type;
     fc0:	07893005 	streq	r3, [r9, r5]
					p2_board[row][col] = type;
     fc4:	078a3005 	streq	r3, [r10, r5]
     fc8:	ea000002 	b	fd8 <init_board+0x100>
				}
			}
			else{
				if(col%2==0){
     fcc:	e3140001 	tst	r4, #1
					p1_board[row][col] = type;
     fd0:	07893005 	streq	r3, [r9, r5]
					p2_board[row][col] = type;
     fd4:	078a3005 	streq	r3, [r10, r5]
		}
	}
	row = 1;
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
     fd8:	e2844001 	add	r4, r4, #1
     fdc:	e2855004 	add	r5, r5, #4
     fe0:	e3540005 	cmp	r4, #5
     fe4:	1affffe9 	bne	f90 <init_board+0xb8>
			p1_board[row][col] = NONE;
			p2_board[row][col] = NONE;
		}
	}
	row = 1;
	for(row;row<BOARD_ROWS;row++){
     fe8:	e2888001 	add	r8, r8, #1
     fec:	e2899014 	add	r9, r9, #20
     ff0:	e28aa014 	add	r10, r10, #20
     ff4:	e3580005 	cmp	r8, #5
     ff8:	0a000003 	beq	100c <init_board+0x134>
		}
	}
	board[row][temp] = PLATFORM;
	*path_end = temp;
}
void init_board(){
     ffc:	e1a0500b 	mov	r5, r11
    1000:	e1a0400b 	mov	r4, r11
	row = 1;
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			int type = rand()%TOTAL_TYPES;
			if(row%2==0){
    1004:	e2086001 	and	r6, r8, #1
    1008:	eaffffe0 	b	f90 <init_board+0xb8>
				}
			}
		}
	}
	
	p1_board[PLAYER_AT_ROW][p1_x] = PLATFORM;
    100c:	e3073164 	movw	r3, #29028	; 0x7164
    1010:	e3403000 	movt	r3, #0
    1014:	e3062860 	movw	r2, #26720	; 0x6860
    1018:	e3402000 	movt	r2, #0
    101c:	e5922000 	ldr	r2, [r2]
    1020:	e2822005 	add	r2, r2, #5
    1024:	e3a01001 	mov	r1, #1
    1028:	e7831102 	str	r1, [r3, r2, lsl #2]
	p2_board[PLAYER_AT_ROW][p2_x] = PLATFORM;
    102c:	e3073100 	movw	r3, #28928	; 0x7100
    1030:	e3403000 	movt	r3, #0
    1034:	e306285c 	movw	r2, #26716	; 0x685c
    1038:	e3402000 	movt	r2, #0
    103c:	e5922000 	ldr	r2, [r2]
    1040:	e2822005 	add	r2, r2, #5
    1044:	e7831102 	str	r1, [r3, r2, lsl #2]
	
	
	
	row = 2;
    1048:	e3a04002 	mov	r4, #2
	for(row;row<BOARD_COLS;row++){
		if(p1_path_end+1 < BOARD_COLS && p1_board[row][p1_path_end+1] == PLATFORM){
    104c:	e30750e0 	movw	r5, #28896	; 0x70e0
    1050:	e3405000 	movt	r5, #0
				next = -next;
			}
			p1_path_end = p1_path_end + next;
			p2_path_end = p2_path_end + next;
			
			p1_board[row][p1_path_end] = PLATFORM;
    1054:	e3076164 	movw	r6, #29028	; 0x7164
    1058:	e3406000 	movt	r6, #0
    105c:	e1a08001 	mov	r8, r1
			p2_board[row][p2_path_end] = PLATFORM;
    1060:	e1a07003 	mov	r7, r3
	
	
	
	row = 2;
	for(row;row<BOARD_COLS;row++){
		if(p1_path_end+1 < BOARD_COLS && p1_board[row][p1_path_end+1] == PLATFORM){
    1064:	e595300c 	ldr	r3, [r5, #12]
    1068:	e2832001 	add	r2, r3, #1
    106c:	e3520004 	cmp	r2, #4
    1070:	ca000009 	bgt	109c <init_board+0x1c4>
    1074:	e0841104 	add	r1, r4, r4, lsl #2
    1078:	e0811002 	add	r1, r1, r2
    107c:	e7961101 	ldr	r1, [r6, r1, lsl #2]
    1080:	e3510001 	cmp	r1, #1
    1084:	1a000004 	bne	109c <init_board+0x1c4>
			p1_path_end++;
    1088:	e585200c 	str	r2, [r5, #12]
			p2_path_end++;
    108c:	e5953010 	ldr	r3, [r5, #16]
    1090:	e2833001 	add	r3, r3, #1
    1094:	e5853010 	str	r3, [r5, #16]
    1098:	ea00001f 	b	111c <init_board+0x244>
		}else if(p1_path_end-1 >= 0 && p1_board[row][p1_path_end-1] == PLATFORM){
    109c:	e2533001 	subs	r3, r3, #1
    10a0:	4a000009 	bmi	10cc <init_board+0x1f4>
    10a4:	e0842104 	add	r2, r4, r4, lsl #2
    10a8:	e0822003 	add	r2, r2, r3
    10ac:	e7962102 	ldr	r2, [r6, r2, lsl #2]
    10b0:	e3520001 	cmp	r2, #1
    10b4:	1a000004 	bne	10cc <init_board+0x1f4>
			p1_path_end--;
    10b8:	e585300c 	str	r3, [r5, #12]
			p2_path_end--;
    10bc:	e5953010 	ldr	r3, [r5, #16]
    10c0:	e2433001 	sub	r3, r3, #1
    10c4:	e5853010 	str	r3, [r5, #16]
    10c8:	ea000013 	b	111c <init_board+0x244>
		}else{
			int next = rand()%2;
    10cc:	eb00023e 	bl	19cc <rand>
    10d0:	e0803fa0 	add	r3, r0, r0, lsr #31
    10d4:	e2033001 	and	r3, r3, #1
    10d8:	e0430fa0 	sub	r0, r3, r0, lsr #31
			next = next*2-1;
    10dc:	e1a03080 	lsl	r3, r0, #1
    10e0:	e2433001 	sub	r3, r3, #1
			
			if(p1_path_end+next >= BOARD_COLS||p1_path_end+next<0){
    10e4:	e595100c 	ldr	r1, [r5, #12]
    10e8:	e0812003 	add	r2, r1, r3
    10ec:	e3520004 	cmp	r2, #4
				next = -next;
    10f0:	82633000 	rsbhi	r3, r3, #0
			}
			p1_path_end = p1_path_end + next;
    10f4:	e0831001 	add	r1, r3, r1
    10f8:	e585100c 	str	r1, [r5, #12]
			p2_path_end = p2_path_end + next;
    10fc:	e5952010 	ldr	r2, [r5, #16]
    1100:	e0833002 	add	r3, r3, r2
    1104:	e5853010 	str	r3, [r5, #16]
			
			p1_board[row][p1_path_end] = PLATFORM;
    1108:	e0842104 	add	r2, r4, r4, lsl #2
    110c:	e0821001 	add	r1, r2, r1
    1110:	e7868101 	str	r8, [r6, r1, lsl #2]
			p2_board[row][p2_path_end] = PLATFORM;
    1114:	e0823003 	add	r3, r2, r3
    1118:	e7878103 	str	r8, [r7, r3, lsl #2]
	p2_board[PLAYER_AT_ROW][p2_x] = PLATFORM;
	
	
	
	row = 2;
	for(row;row<BOARD_COLS;row++){
    111c:	e2844001 	add	r4, r4, #1
    1120:	e3540005 	cmp	r4, #5
    1124:	1affffce 	bne	1064 <init_board+0x18c>
			p1_board[row][p1_path_end] = PLATFORM;
			p2_board[row][p2_path_end] = PLATFORM;
		}
		
	}	
}
    1128:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    112c:	00007178 	.word	0x00007178
    1130:	00007114 	.word	0x00007114

00001134 <restart>:
	t_minus = T_MINUS;
}
void init(){
	restart();
}
void restart(){
    1134:	e92d4008 	push	{r3, lr}
	key[0] = 0;
    1138:	e30720d0 	movw	r2, #28880	; 0x70d0
    113c:	e3402000 	movt	r2, #0
    1140:	e3a03000 	mov	r3, #0
    1144:	e5823000 	str	r3, [r2]
	key[1] = 0;
    1148:	e5823004 	str	r3, [r2, #4]
	key[2] = 0;
    114c:	e5823008 	str	r3, [r2, #8]
	key[3] = 0;
    1150:	e582300c 	str	r3, [r2, #12]
	p1_score = 0;
    1154:	e30720fc 	movw	r2, #28924	; 0x70fc
    1158:	e3402000 	movt	r2, #0
    115c:	e5823000 	str	r3, [r2]
	p2_score = 0;
    1160:	e30720f8 	movw	r2, #28920	; 0x70f8
    1164:	e3402000 	movt	r2, #0
    1168:	e5823000 	str	r3, [r2]
	game_over = false;
    116c:	e30720e0 	movw	r2, #28896	; 0x70e0
    1170:	e3402000 	movt	r2, #0
    1174:	e5c23000 	strb	r3, [r2]
	init_board();
    1178:	ebffff56 	bl	ed8 <init_board>
    117c:	e8bd8008 	pop	{r3, pc}

00001180 <init>:
	restart_t_minus = RESTART_DELAY;
	game_over = true;
	result = r;
	t_minus = T_MINUS;
}
void init(){
    1180:	e92d4008 	push	{r3, lr}
	restart();
    1184:	ebffffea 	bl	1134 <restart>
    1188:	e8bd8008 	pop	{r3, pc}

0000118c <logic>:

void lift_board(int board[][BOARD_COLS], bool *odd, int *path_end);
void init_board();
void restart();
void match_over(int r);
void logic(){
    118c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	*(LED_ptr) = keys; */
	
	//Handle key input
	//Used while loop to handle hyper-tapping between frames
	
	if(game_over){
    1190:	e30730e0 	movw	r3, #28896	; 0x70e0
    1194:	e3403000 	movt	r3, #0
    1198:	e5d33000 	ldrb	r3, [r3]
    119c:	e3530000 	cmp	r3, #0
    11a0:	0a000006 	beq	11c0 <logic+0x34>
		if(restart_t_minus==0){
    11a4:	e30730f4 	movw	r3, #28916	; 0x70f4
    11a8:	e3403000 	movt	r3, #0
    11ac:	e5933000 	ldr	r3, [r3]
    11b0:	e3530000 	cmp	r3, #0
    11b4:	18bd85f8 	popne	{r3, r4, r5, r6, r7, r8, r10, pc}
			restart();
    11b8:	ebffffdd 	bl	1134 <restart>
    11bc:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
		}
		return;
	}
	if(t_minus==0){
    11c0:	e3063858 	movw	r3, #26712	; 0x6858
    11c4:	e3403000 	movt	r3, #0
    11c8:	e5933000 	ldr	r3, [r3]
    11cc:	e3530000 	cmp	r3, #0
    11d0:	1a000009 	bne	11fc <logic+0x70>
		if(p1_score == p2_score){
    11d4:	e30730fc 	movw	r3, #28924	; 0x70fc
    11d8:	e3403000 	movt	r3, #0
    11dc:	e5930000 	ldr	r0, [r3]
    11e0:	e30730f8 	movw	r3, #28920	; 0x70f8
    11e4:	e3403000 	movt	r3, #0
    11e8:	e5933000 	ldr	r3, [r3]
    11ec:	e1500003 	cmp	r0, r3
    11f0:	1a000007 	bne	1214 <logic+0x88>
			match_over(DRAW);
    11f4:	e3a00000 	mov	r0, #0
    11f8:	ebfffede 	bl	d78 <match_over>
			match_over(p1_score > p2_score ? P1_WIN : P2_WIN);
		}
	}

	//Player 2. Key[0] = right, Key[1] = left
	while(key[0]!=0){
    11fc:	e30730d0 	movw	r3, #28880	; 0x70d0
    1200:	e3403000 	movt	r3, #0
    1204:	e5933000 	ldr	r3, [r3]
    1208:	e3530000 	cmp	r3, #0
    120c:	1a000005 	bne	1228 <logic+0x9c>
    1210:	ea00002e 	b	12d0 <logic+0x144>
	}
	if(t_minus==0){
		if(p1_score == p2_score){
			match_over(DRAW);
		}else{
			match_over(p1_score > p2_score ? P1_WIN : P2_WIN);
    1214:	e1500003 	cmp	r0, r3
    1218:	d3a00002 	movle	r0, #2
    121c:	c3a00001 	movgt	r0, #1
    1220:	ebfffed4 	bl	d78 <match_over>
    1224:	eafffff4 	b	11fc <logic+0x70>

	//Player 2. Key[0] = right, Key[1] = left
	while(key[0]!=0){
		//right
		p2_move(RIGHT);
		if(p2_x != (BOARD_ROWS-1)){
    1228:	e306485c 	movw	r4, #26716	; 0x685c
    122c:	e3404000 	movt	r4, #0
			p2_x+=1;
			p2_score++;
    1230:	e30770f8 	movw	r7, #28920	; 0x70f8
    1234:	e3407000 	movt	r7, #0
			p2b_move(UP);
			lift_board(p2_board,&p2_odd_row,&p2_path_end);
    1238:	e3076100 	movw	r6, #28928	; 0x7100
    123c:	e3406000 	movt	r6, #0
    1240:	e30780e0 	movw	r8, #28896	; 0x70e0
    1244:	e3408000 	movt	r8, #0
    1248:	e288a009 	add	r10, r8, #9
			}
		}else{
			match_over(P1_WIN);
		}
		
		key[0]--;
    124c:	e30750d0 	movw	r5, #28880	; 0x70d0
    1250:	e3405000 	movt	r5, #0
	}

	//Player 2. Key[0] = right, Key[1] = left
	while(key[0]!=0){
		//right
		p2_move(RIGHT);
    1254:	e3e00000 	mvn	r0, #0
    1258:	eb0001b3 	bl	192c <p2_move>
		if(p2_x != (BOARD_ROWS-1)){
    125c:	e5943000 	ldr	r3, [r4]
    1260:	e3530004 	cmp	r3, #4
    1264:	0a000012 	beq	12b4 <logic+0x128>
			p2_x+=1;
    1268:	e2833001 	add	r3, r3, #1
    126c:	e5843000 	str	r3, [r4]
			p2_score++;
    1270:	e5973000 	ldr	r3, [r7]
    1274:	e2833001 	add	r3, r3, #1
    1278:	e5873000 	str	r3, [r7]
			p2b_move(UP);
    127c:	e3a00001 	mov	r0, #1
    1280:	eb0001af 	bl	1944 <p2b_move>
			lift_board(p2_board,&p2_odd_row,&p2_path_end);
    1284:	e1a00006 	mov	r0, r6
    1288:	e1a0100a 	mov	r1, r10
    128c:	e2882010 	add	r2, r8, #16
    1290:	ebfffec6 	bl	db0 <lift_board>
			if(p2_board[PLAYER_AT_ROW][p2_x] != PLATFORM){
    1294:	e5943000 	ldr	r3, [r4]
    1298:	e2833005 	add	r3, r3, #5
    129c:	e7963103 	ldr	r3, [r6, r3, lsl #2]
    12a0:	e3530001 	cmp	r3, #1
    12a4:	0a000004 	beq	12bc <logic+0x130>
				match_over(P1_WIN);
    12a8:	e3a00001 	mov	r0, #1
    12ac:	ebfffeb1 	bl	d78 <match_over>
    12b0:	ea000001 	b	12bc <logic+0x130>
			}
		}else{
			match_over(P1_WIN);
    12b4:	e3a00001 	mov	r0, #1
    12b8:	ebfffeae 	bl	d78 <match_over>
		}
		
		key[0]--;
    12bc:	e5953000 	ldr	r3, [r5]
    12c0:	e2433001 	sub	r3, r3, #1
    12c4:	e5853000 	str	r3, [r5]
			match_over(p1_score > p2_score ? P1_WIN : P2_WIN);
		}
	}

	//Player 2. Key[0] = right, Key[1] = left
	while(key[0]!=0){
    12c8:	e3530000 	cmp	r3, #0
    12cc:	1affffe0 	bne	1254 <logic+0xc8>
			match_over(P1_WIN);
		}
		
		key[0]--;
	}
	while(key[1]!=0){
    12d0:	e30730d0 	movw	r3, #28880	; 0x70d0
    12d4:	e3403000 	movt	r3, #0
    12d8:	e5933004 	ldr	r3, [r3, #4]
    12dc:	e3530000 	cmp	r3, #0
    12e0:	0a000029 	beq	138c <logic+0x200>
		//left
		p2_move(LEFT);
		if(p2_x != 0){
    12e4:	e306585c 	movw	r5, #26716	; 0x685c
    12e8:	e3405000 	movt	r5, #0
			p2_x-=1;
			p2b_move(UP);
			p2_score++;
    12ec:	e30770f8 	movw	r7, #28920	; 0x70f8
    12f0:	e3407000 	movt	r7, #0
			lift_board(p2_board,&p2_odd_row,&p2_path_end);
    12f4:	e3076100 	movw	r6, #28928	; 0x7100
    12f8:	e3406000 	movt	r6, #0
    12fc:	e30780e0 	movw	r8, #28896	; 0x70e0
    1300:	e3408000 	movt	r8, #0
    1304:	e288a009 	add	r10, r8, #9
			}
		}else{
			match_over(P1_WIN);
		}
		
		key[1]--;
    1308:	e30740d0 	movw	r4, #28880	; 0x70d0
    130c:	e3404000 	movt	r4, #0
		
		key[0]--;
	}
	while(key[1]!=0){
		//left
		p2_move(LEFT);
    1310:	e3a00001 	mov	r0, #1
    1314:	eb000184 	bl	192c <p2_move>
		if(p2_x != 0){
    1318:	e5953000 	ldr	r3, [r5]
    131c:	e3530000 	cmp	r3, #0
    1320:	0a000012 	beq	1370 <logic+0x1e4>
			p2_x-=1;
    1324:	e2433001 	sub	r3, r3, #1
    1328:	e5853000 	str	r3, [r5]
			p2b_move(UP);
    132c:	e3a00001 	mov	r0, #1
    1330:	eb000183 	bl	1944 <p2b_move>
			p2_score++;
    1334:	e5973000 	ldr	r3, [r7]
    1338:	e2833001 	add	r3, r3, #1
    133c:	e5873000 	str	r3, [r7]
			lift_board(p2_board,&p2_odd_row,&p2_path_end);
    1340:	e1a00006 	mov	r0, r6
    1344:	e1a0100a 	mov	r1, r10
    1348:	e2882010 	add	r2, r8, #16
    134c:	ebfffe97 	bl	db0 <lift_board>
			if(p2_board[PLAYER_AT_ROW][p2_x] != PLATFORM){
    1350:	e5953000 	ldr	r3, [r5]
    1354:	e2833005 	add	r3, r3, #5
    1358:	e7963103 	ldr	r3, [r6, r3, lsl #2]
    135c:	e3530001 	cmp	r3, #1
    1360:	0a000004 	beq	1378 <logic+0x1ec>
				match_over(P1_WIN);
    1364:	e3a00001 	mov	r0, #1
    1368:	ebfffe82 	bl	d78 <match_over>
    136c:	ea000001 	b	1378 <logic+0x1ec>
			}
		}else{
			match_over(P1_WIN);
    1370:	e3a00001 	mov	r0, #1
    1374:	ebfffe7f 	bl	d78 <match_over>
		}
		
		key[1]--;
    1378:	e5943004 	ldr	r3, [r4, #4]
    137c:	e2433001 	sub	r3, r3, #1
    1380:	e5843004 	str	r3, [r4, #4]
			match_over(P1_WIN);
		}
		
		key[0]--;
	}
	while(key[1]!=0){
    1384:	e3530000 	cmp	r3, #0
    1388:	1affffe0 	bne	1310 <logic+0x184>
		
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
    138c:	e30730d0 	movw	r3, #28880	; 0x70d0
    1390:	e3403000 	movt	r3, #0
    1394:	e5933008 	ldr	r3, [r3, #8]
    1398:	e3530000 	cmp	r3, #0
    139c:	0a000029 	beq	1448 <logic+0x2bc>
		//right
		
		p1_move(RIGHT);
		if(p1_x != (BOARD_ROWS-1)){
    13a0:	e3064860 	movw	r4, #26720	; 0x6860
    13a4:	e3404000 	movt	r4, #0
			p1_x+=1;
			p1_score++;
    13a8:	e30770fc 	movw	r7, #28924	; 0x70fc
    13ac:	e3407000 	movt	r7, #0
			p1b_move(UP);
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
    13b0:	e3076164 	movw	r6, #29028	; 0x7164
    13b4:	e3406000 	movt	r6, #0
    13b8:	e30780e0 	movw	r8, #28896	; 0x70e0
    13bc:	e3408000 	movt	r8, #0
    13c0:	e288a008 	add	r10, r8, #8
			}
		}else{
			match_over(P2_WIN);
		}
		
		key[2]--;
    13c4:	e30750d0 	movw	r5, #28880	; 0x70d0
    13c8:	e3405000 	movt	r5, #0
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
		//right
		
		p1_move(RIGHT);
    13cc:	e3e00000 	mvn	r0, #0
    13d0:	eb000149 	bl	18fc <p1_move>
		if(p1_x != (BOARD_ROWS-1)){
    13d4:	e5943000 	ldr	r3, [r4]
    13d8:	e3530004 	cmp	r3, #4
    13dc:	0a000012 	beq	142c <logic+0x2a0>
			p1_x+=1;
    13e0:	e2833001 	add	r3, r3, #1
    13e4:	e5843000 	str	r3, [r4]
			p1_score++;
    13e8:	e5973000 	ldr	r3, [r7]
    13ec:	e2833001 	add	r3, r3, #1
    13f0:	e5873000 	str	r3, [r7]
			p1b_move(UP);
    13f4:	e3a00001 	mov	r0, #1
    13f8:	eb000145 	bl	1914 <p1b_move>
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
    13fc:	e1a00006 	mov	r0, r6
    1400:	e1a0100a 	mov	r1, r10
    1404:	e288200c 	add	r2, r8, #12
    1408:	ebfffe68 	bl	db0 <lift_board>
			if(p1_board[PLAYER_AT_ROW][p1_x] != PLATFORM){
    140c:	e5943000 	ldr	r3, [r4]
    1410:	e2833005 	add	r3, r3, #5
    1414:	e7963103 	ldr	r3, [r6, r3, lsl #2]
    1418:	e3530001 	cmp	r3, #1
    141c:	0a000004 	beq	1434 <logic+0x2a8>
				match_over(P2_WIN);
    1420:	e3a00002 	mov	r0, #2
    1424:	ebfffe53 	bl	d78 <match_over>
    1428:	ea000001 	b	1434 <logic+0x2a8>
			}
		}else{
			match_over(P2_WIN);
    142c:	e3a00002 	mov	r0, #2
    1430:	ebfffe50 	bl	d78 <match_over>
		}
		
		key[2]--;
    1434:	e5953008 	ldr	r3, [r5, #8]
    1438:	e2433001 	sub	r3, r3, #1
    143c:	e5853008 	str	r3, [r5, #8]
		
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
    1440:	e3530000 	cmp	r3, #0
    1444:	1affffe0 	bne	13cc <logic+0x240>
			match_over(P2_WIN);
		}
		
		key[2]--;
	}
	while(key[3]!=0){
    1448:	e30730d0 	movw	r3, #28880	; 0x70d0
    144c:	e3403000 	movt	r3, #0
    1450:	e593300c 	ldr	r3, [r3, #12]
    1454:	e3530000 	cmp	r3, #0
    1458:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
		//left
		p1_move(LEFT);
		if(p1_x != 0){
    145c:	e3065860 	movw	r5, #26720	; 0x6860
    1460:	e3405000 	movt	r5, #0
			p1_x-=1;
			p1b_move(UP);
			p1_score++;
    1464:	e30770fc 	movw	r7, #28924	; 0x70fc
    1468:	e3407000 	movt	r7, #0
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
    146c:	e3076164 	movw	r6, #29028	; 0x7164
    1470:	e3406000 	movt	r6, #0
    1474:	e30780e0 	movw	r8, #28896	; 0x70e0
    1478:	e3408000 	movt	r8, #0
    147c:	e288a008 	add	r10, r8, #8
				match_over(P2_WIN);
			}
		}else{
			match_over(P2_WIN);
		}
		key[3]--;
    1480:	e30740d0 	movw	r4, #28880	; 0x70d0
    1484:	e3404000 	movt	r4, #0
		
		key[2]--;
	}
	while(key[3]!=0){
		//left
		p1_move(LEFT);
    1488:	e3a00001 	mov	r0, #1
    148c:	eb00011a 	bl	18fc <p1_move>
		if(p1_x != 0){
    1490:	e5953000 	ldr	r3, [r5]
    1494:	e3530000 	cmp	r3, #0
    1498:	0a000012 	beq	14e8 <logic+0x35c>
			p1_x-=1;
    149c:	e2433001 	sub	r3, r3, #1
    14a0:	e5853000 	str	r3, [r5]
			p1b_move(UP);
    14a4:	e3a00001 	mov	r0, #1
    14a8:	eb000119 	bl	1914 <p1b_move>
			p1_score++;
    14ac:	e5973000 	ldr	r3, [r7]
    14b0:	e2833001 	add	r3, r3, #1
    14b4:	e5873000 	str	r3, [r7]
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
    14b8:	e1a00006 	mov	r0, r6
    14bc:	e1a0100a 	mov	r1, r10
    14c0:	e288200c 	add	r2, r8, #12
    14c4:	ebfffe39 	bl	db0 <lift_board>
			if(p1_board[PLAYER_AT_ROW][p1_x] != PLATFORM){
    14c8:	e5953000 	ldr	r3, [r5]
    14cc:	e2833005 	add	r3, r3, #5
    14d0:	e7963103 	ldr	r3, [r6, r3, lsl #2]
    14d4:	e3530001 	cmp	r3, #1
    14d8:	0a000004 	beq	14f0 <logic+0x364>
				match_over(P2_WIN);
    14dc:	e3a00002 	mov	r0, #2
    14e0:	ebfffe24 	bl	d78 <match_over>
    14e4:	ea000001 	b	14f0 <logic+0x364>
			}
		}else{
			match_over(P2_WIN);
    14e8:	e3a00002 	mov	r0, #2
    14ec:	ebfffe21 	bl	d78 <match_over>
		}
		key[3]--;
    14f0:	e594300c 	ldr	r3, [r4, #12]
    14f4:	e2433001 	sub	r3, r3, #1
    14f8:	e584300c 	str	r3, [r4, #12]
			match_over(P2_WIN);
		}
		
		key[2]--;
	}
	while(key[3]!=0){
    14fc:	e3530000 	cmp	r3, #0
    1500:	1affffe0 	bne	1488 <logic+0x2fc>
    1504:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00001508 <draw_role>:
		}
	}else{
		draw_sequence(SCREEN_W/2,SCREEN_H - NUM_H - SPACE_BETWEEN_CHAR,restart_t_minus,false);
	}
}
void draw_role(int center, int x, int x_offset){
    1508:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    150c:	e24dd00c 	sub	sp, sp, #12
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	fill_rectangle((x-col_center)*PLATFORM_W + center - ROLE_W/2 + x_offset,
    1510:	e2411002 	sub	r1, r1, #2
    1514:	e0811081 	add	r1, r1, r1, lsl #1
    1518:	e0800181 	add	r0, r0, r1, lsl #3
    151c:	e2400005 	sub	r0, r0, #5
    1520:	e3a03000 	mov	r3, #0
    1524:	e58d3000 	str	r3, [sp]
    1528:	e0800002 	add	r0, r0, r2
    152c:	e3a0104a 	mov	r1, #74	; 0x4a
    1530:	e3a0200a 	mov	r2, #10
    1534:	e1a03002 	mov	r3, r2
    1538:	ebfffc13 	bl	58c <fill_rectangle>
					(PLATFORM_H+P_V_INTERVAL)+board_y-ROLE_H,
					ROLE_W,ROLE_H,0);
}
    153c:	e28dd00c 	add	sp, sp, #12
    1540:	e8bd8000 	ldmfd	sp!, {pc}

00001544 <draw_board>:
void draw_board(int center, int y_offset,int board[][BOARD_COLS]){
    1544:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1548:	e24dd014 	sub	sp, sp, #20
    154c:	e58d000c 	str	r0, [sp, #12]
    1550:	e2817030 	add	r7, r1, #48	; 0x30
    1554:	e1a0a002 	mov	r10, r2
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
    1558:	e3a08000 	mov	r8, #0
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	fill_rectangle((x-col_center)*PLATFORM_W + center - ROLE_W/2 + x_offset,
					(PLATFORM_H+P_V_INTERVAL)+board_y-ROLE_H,
					ROLE_W,ROLE_H,0);
}
void draw_board(int center, int y_offset,int board[][BOARD_COLS]){
    155c:	e1a0b008 	mov	r11, r8
    1560:	ea000025 	b	15fc <draw_board+0xb8>
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
	for(row;row<BOARD_ROWS;row++){
		int col=0;
		for(col;col<BOARD_COLS;col++){
			int type = board[row][col];
    1564:	e7963004 	ldr	r3, [r6, r4]
			if(type == PLATFORM){
    1568:	e3530001 	cmp	r3, #1
    156c:	1a00000a 	bne	159c <draw_board+0x58>
				fill_rectangle((col-col_center)*PLATFORM_W + center - PLATFORM_W/2,
    1570:	e1a0000b 	mov	r0, r11
    1574:	e3a010ff 	mov	r1, #255	; 0xff
    1578:	e1a0200b 	mov	r2, r11
    157c:	ebfffb70 	bl	344 <rgb24to16>
    1580:	e58d0000 	str	r0, [sp]
    1584:	e1a00005 	mov	r0, r5
    1588:	e1a01009 	mov	r1, r9
    158c:	e3a02018 	mov	r2, #24
    1590:	e3a03006 	mov	r3, #6
    1594:	ebfffbfc 	bl	58c <fill_rectangle>
    1598:	ea00000e 	b	15d8 <draw_board+0x94>
								row*(PLATFORM_H+P_V_INTERVAL)+board_y + y_offset,
								PLATFORM_W,PLATFORM_H,
								rgb24to16(0,255,0));
			}else if(type == SPIKE){
    159c:	e3530002 	cmp	r3, #2
    15a0:	1a00000c 	bne	15d8 <draw_board+0x94>
				fill_rectangle((col-col_center)*PLATFORM_W + center - PLATFORM_W/2,
    15a4:	e3a000ff 	mov	r0, #255	; 0xff
    15a8:	e1a0100b 	mov	r1, r11
    15ac:	e1a0200b 	mov	r2, r11
    15b0:	ebfffb63 	bl	344 <rgb24to16>
    15b4:	e58d0000 	str	r0, [sp]
    15b8:	e1a00005 	mov	r0, r5
    15bc:	e1a01009 	mov	r1, r9
    15c0:	e3a02018 	mov	r2, #24
    15c4:	e3a03006 	mov	r3, #6
    15c8:	ebfffbef 	bl	58c <fill_rectangle>
								row*(PLATFORM_H+P_V_INTERVAL)+board_y + y_offset,
								PLATFORM_W,PLATFORM_H,
								rgb24to16(255,0,0));
				draw_spikes((col-col_center)*PLATFORM_W + center - PLATFORM_W/2,
    15cc:	e1a00005 	mov	r0, r5
    15d0:	e59d1008 	ldr	r1, [sp, #8]
    15d4:	ebfffd57 	bl	b38 <draw_spikes>
    15d8:	e2844004 	add	r4, r4, #4
    15dc:	e2855018 	add	r5, r5, #24
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
	for(row;row<BOARD_ROWS;row++){
		int col=0;
		for(col;col<BOARD_COLS;col++){
    15e0:	e3540014 	cmp	r4, #20
    15e4:	1affffde 	bne	1564 <draw_board+0x20>
}
void draw_board(int center, int y_offset,int board[][BOARD_COLS]){
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
	for(row;row<BOARD_ROWS;row++){
    15e8:	e2888001 	add	r8, r8, #1
    15ec:	e2877024 	add	r7, r7, #36	; 0x24
    15f0:	e28aa014 	add	r10, r10, #20
    15f4:	e3580005 	cmp	r8, #5
    15f8:	0a000007 	beq	161c <draw_board+0xd8>
		int col=0;
		for(col;col<BOARD_COLS;col++){
			int type = board[row][col];
    15fc:	e1a0600a 	mov	r6, r10
			if(type == PLATFORM){
				fill_rectangle((col-col_center)*PLATFORM_W + center - PLATFORM_W/2,
    1600:	e1a09007 	mov	r9, r7
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	fill_rectangle((x-col_center)*PLATFORM_W + center - ROLE_W/2 + x_offset,
					(PLATFORM_H+P_V_INTERVAL)+board_y-ROLE_H,
					ROLE_W,ROLE_H,0);
}
void draw_board(int center, int y_offset,int board[][BOARD_COLS]){
    1604:	e2473008 	sub	r3, r7, #8
    1608:	e58d3008 	str	r3, [sp, #8]
    160c:	e59d300c 	ldr	r3, [sp, #12]
    1610:	e243503c 	sub	r5, r3, #60	; 0x3c
    1614:	e1a0400b 	mov	r4, r11
    1618:	eaffffd1 	b	1564 <draw_board+0x20>
				draw_spikes((col-col_center)*PLATFORM_W + center - PLATFORM_W/2,
								row*(PLATFORM_H+P_V_INTERVAL)+board_y + y_offset - SPIKE_DIM);
			}
		}
	}
    161c:	e28dd014 	add	sp, sp, #20
    1620:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001624 <scene_draw>:
extern int game_mode;
void draw_board(int center, int y_offset,int board[][BOARD_COLS]);
void draw_role(int center, int x, int x_offset);
void draw_score();

void scene_draw(){
    1624:	e92d4030 	push	{r4, r5, lr}
    1628:	e24dd00c 	sub	sp, sp, #12
	if(game_mode == SINGLE){
    162c:	e3063864 	movw	r3, #26724	; 0x6864
    1630:	e3403000 	movt	r3, #0
    1634:	e5933000 	ldr	r3, [r3]
    1638:	e3530001 	cmp	r3, #1
    163c:	0a000054 	beq	1794 <scene_draw+0x170>
	}
	else if(game_mode == DUEL){
    1640:	e3530002 	cmp	r3, #2
    1644:	1a000052 	bne	1794 <scene_draw+0x170>
		draw_line(SCREEN_W/2,0,SCREEN_W/2,SCREEN_H - NUM_H - SPACE_BETWEEN_CHAR*2,0);
    1648:	e3a05000 	mov	r5, #0
    164c:	e58d5000 	str	r5, [sp]
    1650:	e3a000a0 	mov	r0, #160	; 0xa0
    1654:	e1a01005 	mov	r1, r5
    1658:	e1a02000 	mov	r2, r0
    165c:	e3a030d7 	mov	r3, #215	; 0xd7
    1660:	ebfffb65 	bl	3fc <draw_line>
		draw_rectangle(SCREEN_W/2 - NUM_W - SPACE_BETWEEN_CHAR ,SCREEN_H - NUM_H - SPACE_BETWEEN_CHAR*2, 
    1664:	e58d5000 	str	r5, [sp]
    1668:	e3a00091 	mov	r0, #145	; 0x91
    166c:	e3a010d7 	mov	r1, #215	; 0xd7
    1670:	e3a0201e 	mov	r2, #30
    1674:	e3a03019 	mov	r3, #25
    1678:	ebfffba1 	bl	504 <draw_rectangle>
						(NUM_W + SPACE_BETWEEN_CHAR)*2, NUM_H + SPACE_BETWEEN_CHAR*2,0);
						
		int p1_center = SCREEN_W/4;
		int p2_center = SCREEN_W*3/4;
		
		draw_board(p1_center,p1b_offset,p1_board);
    167c:	e30741cc 	movw	r4, #29132	; 0x71cc
    1680:	e3404000 	movt	r4, #0
    1684:	e3a00050 	mov	r0, #80	; 0x50
    1688:	e5941000 	ldr	r1, [r4]
    168c:	e3072164 	movw	r2, #29028	; 0x7164
    1690:	e3402000 	movt	r2, #0
    1694:	ebffffaa 	bl	1544 <draw_board>
		draw_board(p2_center,p2b_offset,p2_board);
    1698:	e3a000f0 	mov	r0, #240	; 0xf0
    169c:	e5941004 	ldr	r1, [r4, #4]
    16a0:	e3072100 	movw	r2, #28928	; 0x7100
    16a4:	e3402000 	movt	r2, #0
    16a8:	ebffffa5 	bl	1544 <draw_board>
		
		draw_sequence(p1_center,SCORE_Y,p1_score,false);
    16ac:	e30730fc 	movw	r3, #28924	; 0x70fc
    16b0:	e3403000 	movt	r3, #0
    16b4:	e3a00050 	mov	r0, #80	; 0x50
    16b8:	e3a0100a 	mov	r1, #10
    16bc:	e5932000 	ldr	r2, [r3]
    16c0:	e1a03005 	mov	r3, r5
    16c4:	ebfffc00 	bl	6cc <draw_sequence>
		draw_sequence(p2_center,SCORE_Y,p2_score,false);
    16c8:	e30730f8 	movw	r3, #28920	; 0x70f8
    16cc:	e3403000 	movt	r3, #0
    16d0:	e3a000f0 	mov	r0, #240	; 0xf0
    16d4:	e3a0100a 	mov	r1, #10
    16d8:	e5932000 	ldr	r2, [r3]
    16dc:	e1a03005 	mov	r3, r5
    16e0:	ebfffbf9 	bl	6cc <draw_sequence>
		
		draw_role(p1_center,p1_x,p1_offset);
    16e4:	e3063860 	movw	r3, #26720	; 0x6860
    16e8:	e3403000 	movt	r3, #0
    16ec:	e3a00050 	mov	r0, #80	; 0x50
    16f0:	e5931000 	ldr	r1, [r3]
    16f4:	e5942008 	ldr	r2, [r4, #8]
    16f8:	ebffff82 	bl	1508 <draw_role>
		draw_role(p2_center,p2_x,p2_offset);
    16fc:	e306385c 	movw	r3, #26716	; 0x685c
    1700:	e3403000 	movt	r3, #0
    1704:	e3a000f0 	mov	r0, #240	; 0xf0
    1708:	e5931000 	ldr	r1, [r3]
    170c:	e594200c 	ldr	r2, [r4, #12]
    1710:	ebffff7c 	bl	1508 <draw_role>
		if(game_over){
    1714:	e30730e0 	movw	r3, #28896	; 0x70e0
    1718:	e3403000 	movt	r3, #0
    171c:	e5d33000 	ldrb	r3, [r3]
    1720:	e1530005 	cmp	r3, r5
    1724:	0a00001f 	beq	17a8 <scene_draw+0x184>
			if(result == P1_WIN){
    1728:	e30730e4 	movw	r3, #28900	; 0x70e4
    172c:	e3403000 	movt	r3, #0
    1730:	e5933000 	ldr	r3, [r3]
    1734:	e3530001 	cmp	r3, #1
    1738:	1a000006 	bne	1758 <scene_draw+0x134>
				draw_win(p1_center - NUM_W*3/2,SCREEN_H/2);
    173c:	e3a0003d 	mov	r0, #61	; 0x3d
    1740:	e3a01078 	mov	r1, #120	; 0x78
    1744:	ebfffc62 	bl	8d4 <draw_win>
				draw_lose(p2_center - NUM_W*4/2,SCREEN_H/2);
    1748:	e3a000d6 	mov	r0, #214	; 0xd6
    174c:	e3a01078 	mov	r1, #120	; 0x78
    1750:	ebfffc92 	bl	9a0 <draw_lose>
    1754:	ea00000e 	b	1794 <scene_draw+0x170>
			}else if(result == P2_WIN){
    1758:	e3530002 	cmp	r3, #2
    175c:	1a000006 	bne	177c <scene_draw+0x158>
				draw_lose(p1_center - NUM_W*4/2,SCREEN_H/2);
    1760:	e3a00036 	mov	r0, #54	; 0x36
    1764:	e3a01078 	mov	r1, #120	; 0x78
    1768:	ebfffc8c 	bl	9a0 <draw_lose>
				draw_win(p2_center - NUM_W*3/2,SCREEN_H/2);
    176c:	e3a000dd 	mov	r0, #221	; 0xdd
    1770:	e3a01078 	mov	r1, #120	; 0x78
    1774:	ebfffc56 	bl	8d4 <draw_win>
    1778:	ea000005 	b	1794 <scene_draw+0x170>
			}else{
				draw_draw(p1_center - NUM_W*4/2,SCREEN_H/2);
    177c:	e3a00036 	mov	r0, #54	; 0x36
    1780:	e3a01078 	mov	r1, #120	; 0x78
    1784:	ebfffcb8 	bl	a6c <draw_draw>
				draw_draw(p2_center - NUM_W*4/2,SCREEN_H/2);
    1788:	e3a000d6 	mov	r0, #214	; 0xd6
    178c:	e3a01078 	mov	r1, #120	; 0x78
    1790:	ebfffcb5 	bl	a6c <draw_draw>
			}
		}
	}
	if(!game_over){
    1794:	e30730e0 	movw	r3, #28896	; 0x70e0
    1798:	e3403000 	movt	r3, #0
    179c:	e5d33000 	ldrb	r3, [r3]
    17a0:	e3530000 	cmp	r3, #0
    17a4:	1a00000e 	bne	17e4 <scene_draw+0x1c0>
		if(T_MINUS - t_minus >= GO_DISPLAY_TIME){
    17a8:	e3063858 	movw	r3, #26712	; 0x6858
    17ac:	e3403000 	movt	r3, #0
    17b0:	e5932000 	ldr	r2, [r3]
    17b4:	e262300a 	rsb	r3, r2, #10
    17b8:	e3530001 	cmp	r3, #1
    17bc:	da000004 	ble	17d4 <scene_draw+0x1b0>
			draw_sequence(SCREEN_W/2 ,SCREEN_H - NUM_H - SPACE_BETWEEN_CHAR,t_minus,false);
    17c0:	e3a000a0 	mov	r0, #160	; 0xa0
    17c4:	e3a010d9 	mov	r1, #217	; 0xd9
    17c8:	e3a03000 	mov	r3, #0
    17cc:	ebfffbbe 	bl	6cc <draw_sequence>
    17d0:	ea00000a 	b	1800 <scene_draw+0x1dc>
		}else{
			draw_go(SCREEN_W/2 - NUM_W,SCREEN_H - NUM_H - SPACE_BETWEEN_CHAR);
    17d4:	e3a00093 	mov	r0, #147	; 0x93
    17d8:	e3a010d9 	mov	r1, #217	; 0xd9
    17dc:	ebfffc09 	bl	808 <draw_go>
    17e0:	ea000006 	b	1800 <scene_draw+0x1dc>
		}
	}else{
		draw_sequence(SCREEN_W/2,SCREEN_H - NUM_H - SPACE_BETWEEN_CHAR,restart_t_minus,false);
    17e4:	e30730f4 	movw	r3, #28916	; 0x70f4
    17e8:	e3403000 	movt	r3, #0
    17ec:	e3a000a0 	mov	r0, #160	; 0xa0
    17f0:	e3a010d9 	mov	r1, #217	; 0xd9
    17f4:	e5932000 	ldr	r2, [r3]
    17f8:	e3a03000 	mov	r3, #0
    17fc:	ebfffbb2 	bl	6cc <draw_sequence>
	}
}
    1800:	e28dd00c 	add	sp, sp, #12
    1804:	e8bd8030 	pop	{r4, r5, pc}

00001808 <animate>:
extern int p1b_offset;
extern int p2_offset;
extern int p2b_offset;

void animate(){
	if(p1_offset>0){
    1808:	e30731d4 	movw	r3, #29140	; 0x71d4
    180c:	e3403000 	movt	r3, #0
    1810:	e5933000 	ldr	r3, [r3]
    1814:	e3530000 	cmp	r3, #0
    1818:	da000004 	ble	1830 <animate+0x28>
		p1_offset-=ROLE_MOVE_SPEED;
    181c:	e30721d4 	movw	r2, #29140	; 0x71d4
    1820:	e3402000 	movt	r2, #0
    1824:	e2433006 	sub	r3, r3, #6
    1828:	e5823000 	str	r3, [r2]
    182c:	ea000004 	b	1844 <animate+0x3c>
	}else if(p1_offset<0){
    1830:	e3530000 	cmp	r3, #0
		p1_offset+=ROLE_MOVE_SPEED;
    1834:	b30721d4 	movwlt	r2, #29140	; 0x71d4
    1838:	b3402000 	movtlt	r2, #0
    183c:	b2833006 	addlt	r3, r3, #6
    1840:	b5823000 	strlt	r3, [r2]
	}
	
	if(p1b_offset>0){
    1844:	e30731cc 	movw	r3, #29132	; 0x71cc
    1848:	e3403000 	movt	r3, #0
    184c:	e5933000 	ldr	r3, [r3]
    1850:	e3530000 	cmp	r3, #0
    1854:	da000004 	ble	186c <animate+0x64>
		p1b_offset-=BOARD_MOVE_SPEED;
    1858:	e30721cc 	movw	r2, #29132	; 0x71cc
    185c:	e3402000 	movt	r2, #0
    1860:	e2433006 	sub	r3, r3, #6
    1864:	e5823000 	str	r3, [r2]
    1868:	ea000004 	b	1880 <animate+0x78>
	}else if(p1b_offset<0){
    186c:	e3530000 	cmp	r3, #0
		p1b_offset+=BOARD_MOVE_SPEED;
    1870:	b30721cc 	movwlt	r2, #29132	; 0x71cc
    1874:	b3402000 	movtlt	r2, #0
    1878:	b2833006 	addlt	r3, r3, #6
    187c:	b5823000 	strlt	r3, [r2]
	}
	
	if(p2_offset>0){
    1880:	e30731d8 	movw	r3, #29144	; 0x71d8
    1884:	e3403000 	movt	r3, #0
    1888:	e5933000 	ldr	r3, [r3]
    188c:	e3530000 	cmp	r3, #0
    1890:	da000004 	ble	18a8 <animate+0xa0>
		p2_offset-=ROLE_MOVE_SPEED;
    1894:	e30721d8 	movw	r2, #29144	; 0x71d8
    1898:	e3402000 	movt	r2, #0
    189c:	e2433006 	sub	r3, r3, #6
    18a0:	e5823000 	str	r3, [r2]
    18a4:	ea000004 	b	18bc <animate+0xb4>
	}else if(p2_offset<0){
    18a8:	e3530000 	cmp	r3, #0
		p2_offset+=ROLE_MOVE_SPEED;
    18ac:	b30721d8 	movwlt	r2, #29144	; 0x71d8
    18b0:	b3402000 	movtlt	r2, #0
    18b4:	b2833006 	addlt	r3, r3, #6
    18b8:	b5823000 	strlt	r3, [r2]
	}
	
	if(p2b_offset>0){
    18bc:	e30731d0 	movw	r3, #29136	; 0x71d0
    18c0:	e3403000 	movt	r3, #0
    18c4:	e5933000 	ldr	r3, [r3]
    18c8:	e3530000 	cmp	r3, #0
    18cc:	da000004 	ble	18e4 <animate+0xdc>
		p2b_offset-=BOARD_MOVE_SPEED;
    18d0:	e30721d0 	movw	r2, #29136	; 0x71d0
    18d4:	e3402000 	movt	r2, #0
    18d8:	e2433006 	sub	r3, r3, #6
    18dc:	e5823000 	str	r3, [r2]
    18e0:	e12fff1e 	bx	lr
	}else if(p2b_offset<0){
    18e4:	e3530000 	cmp	r3, #0
		p2b_offset+=BOARD_MOVE_SPEED;
    18e8:	b30721d0 	movwlt	r2, #29136	; 0x71d0
    18ec:	b3402000 	movtlt	r2, #0
    18f0:	b2833006 	addlt	r3, r3, #6
    18f4:	b5823000 	strlt	r3, [r2]
    18f8:	e12fff1e 	bx	lr

000018fc <p1_move>:
	}
}
void p1_move(int dir){
	p1_offset = dir*PLATFORM_W;
    18fc:	e30731d4 	movw	r3, #29140	; 0x71d4
    1900:	e3403000 	movt	r3, #0
    1904:	e0800080 	add	r0, r0, r0, lsl #1
    1908:	e1a00180 	lsl	r0, r0, #3
    190c:	e5830000 	str	r0, [r3]
    1910:	e12fff1e 	bx	lr

00001914 <p1b_move>:
}
void p1b_move(int dir){
	p1b_offset = dir*(PLATFORM_H+P_V_INTERVAL);
    1914:	e30731cc 	movw	r3, #29132	; 0x71cc
    1918:	e3403000 	movt	r3, #0
    191c:	e0800180 	add	r0, r0, r0, lsl #3
    1920:	e1a00100 	lsl	r0, r0, #2
    1924:	e5830000 	str	r0, [r3]
    1928:	e12fff1e 	bx	lr

0000192c <p2_move>:
}
void p2_move(int dir){
	p2_offset = dir*PLATFORM_W;
    192c:	e30731d8 	movw	r3, #29144	; 0x71d8
    1930:	e3403000 	movt	r3, #0
    1934:	e0800080 	add	r0, r0, r0, lsl #1
    1938:	e1a00180 	lsl	r0, r0, #3
    193c:	e5830000 	str	r0, [r3]
    1940:	e12fff1e 	bx	lr

00001944 <p2b_move>:
}
void p2b_move(int dir){
	p2b_offset = dir*(PLATFORM_H+P_V_INTERVAL);
    1944:	e30731d0 	movw	r3, #29136	; 0x71d0
    1948:	e3403000 	movt	r3, #0
    194c:	e0800180 	add	r0, r0, r0, lsl #3
    1950:	e1a00100 	lsl	r0, r0, #2
    1954:	e5830000 	str	r0, [r3]
    1958:	e12fff1e 	bx	lr

0000195c <atexit>:
    195c:	e1a01000 	mov	r1, r0
    1960:	e3a00000 	mov	r0, #0
    1964:	e92d4008 	push	{r3, lr}
    1968:	e1a02000 	mov	r2, r0
    196c:	e1a03000 	mov	r3, r0
    1970:	eb00003f 	bl	1a74 <__register_exitproc>
    1974:	e8bd4008 	pop	{r3, lr}
    1978:	e12fff1e 	bx	lr

0000197c <exit>:
    197c:	e92d4008 	push	{r3, lr}
    1980:	e3a01000 	mov	r1, #0
    1984:	e1a04000 	mov	r4, r0
    1988:	eb000076 	bl	1b68 <__call_exitprocs>
    198c:	e59f3018 	ldr	r3, [pc, #24]	; 19ac <exit+0x30>
    1990:	e5930000 	ldr	r0, [r3]
    1994:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1998:	e3530000 	cmp	r3, #0
    199c:	11a0e00f 	movne	lr, pc
    19a0:	112fff13 	bxne	r3
    19a4:	e1a00004 	mov	r0, r4
    19a8:	eb000424 	bl	2a40 <_exit>
    19ac:	000067f0 	.word	0x000067f0

000019b0 <srand>:
    19b0:	e59f3010 	ldr	r3, [pc, #16]	; 19c8 <srand+0x18>
    19b4:	e5933000 	ldr	r3, [r3]
    19b8:	e3a02000 	mov	r2, #0
    19bc:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    19c0:	e58320ac 	str	r2, [r3, #172]	; 0xac
    19c4:	e12fff1e 	bx	lr
    19c8:	00006868 	.word	0x00006868

000019cc <rand>:
    19cc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    19d0:	e59f3044 	ldr	r3, [pc, #68]	; 1a1c <rand+0x50>
    19d4:	e593c000 	ldr	r12, [r3]
    19d8:	e59f4040 	ldr	r4, [pc, #64]	; 1a20 <rand+0x54>
    19dc:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    19e0:	e0040492 	mul	r4, r2, r4
    19e4:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    19e8:	e59f3034 	ldr	r3, [pc, #52]	; 1a24 <rand+0x58>
    19ec:	e0244193 	mla	r4, r3, r1, r4
    19f0:	e0810392 	umull	r0, r1, r2, r3
    19f4:	e3a02001 	mov	r2, #1
    19f8:	e0922000 	adds	r2, r2, r0
    19fc:	e0841001 	add	r1, r4, r1
    1a00:	e3a03000 	mov	r3, #0
    1a04:	e0a33001 	adc	r3, r3, r1
    1a08:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    1a0c:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    1a10:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    1a14:	e8bd0010 	ldmfd	sp!, {r4}
    1a18:	e12fff1e 	bx	lr
    1a1c:	00006868 	.word	0x00006868
    1a20:	5851f42d 	.word	0x5851f42d
    1a24:	4c957f2d 	.word	0x4c957f2d

00001a28 <time>:
    1a28:	e92d4010 	push	{r4, lr}
    1a2c:	e59f303c 	ldr	r3, [pc, #60]	; 1a70 <time+0x48>
    1a30:	e24dd008 	sub	sp, sp, #8
    1a34:	e1a04000 	mov	r4, r0
    1a38:	e1a0100d 	mov	r1, sp
    1a3c:	e5930000 	ldr	r0, [r3]
    1a40:	e3a02000 	mov	r2, #0
    1a44:	eb0000c0 	bl	1d4c <_gettimeofday_r>
    1a48:	e3500000 	cmp	r0, #0
    1a4c:	ba000005 	blt	1a68 <time+0x40>
    1a50:	e59d0000 	ldr	r0, [sp]
    1a54:	e3540000 	cmp	r4, #0
    1a58:	15840000 	strne	r0, [r4]
    1a5c:	e28dd008 	add	sp, sp, #8
    1a60:	e8bd4010 	pop	{r4, lr}
    1a64:	e12fff1e 	bx	lr
    1a68:	e3e00000 	mvn	r0, #0
    1a6c:	eafffffa 	b	1a5c <time+0x34>
    1a70:	00006868 	.word	0x00006868

00001a74 <__register_exitproc>:
    1a74:	e59fc0e4 	ldr	r12, [pc, #228]	; 1b60 <__register_exitproc+0xec>
    1a78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1a7c:	e59c4000 	ldr	r4, [r12]
    1a80:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1a84:	e35c0000 	cmp	r12, #0
    1a88:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1a8c:	e59c5004 	ldr	r5, [r12, #4]
    1a90:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1a94:	e355001f 	cmp	r5, #31
    1a98:	e24dd010 	sub	sp, sp, #16
    1a9c:	e1a06000 	mov	r6, r0
    1aa0:	da000015 	ble	1afc <__register_exitproc+0x88>
    1aa4:	e59f00b8 	ldr	r0, [pc, #184]	; 1b64 <__register_exitproc+0xf0>
    1aa8:	e3500000 	cmp	r0, #0
    1aac:	1a000001 	bne	1ab8 <__register_exitproc+0x44>
    1ab0:	e3e00000 	mvn	r0, #0
    1ab4:	ea000018 	b	1b1c <__register_exitproc+0xa8>
    1ab8:	e3a00e19 	mov	r0, #400	; 0x190
    1abc:	e58d100c 	str	r1, [sp, #12]
    1ac0:	e58d2008 	str	r2, [sp, #8]
    1ac4:	e58d3004 	str	r3, [sp, #4]
    1ac8:	e320f000 	nop	{0}
    1acc:	e250c000 	subs	r12, r0, #0
    1ad0:	e59d100c 	ldr	r1, [sp, #12]
    1ad4:	e59d2008 	ldr	r2, [sp, #8]
    1ad8:	e59d3004 	ldr	r3, [sp, #4]
    1adc:	0afffff3 	beq	1ab0 <__register_exitproc+0x3c>
    1ae0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1ae4:	e3a00000 	mov	r0, #0
    1ae8:	e58c0004 	str	r0, [r12, #4]
    1aec:	e58c5000 	str	r5, [r12]
    1af0:	e584c148 	str	r12, [r4, #328]	; 0x148
    1af4:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1af8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1afc:	e3560000 	cmp	r6, #0
    1b00:	e59c4004 	ldr	r4, [r12, #4]
    1b04:	1a000007 	bne	1b28 <__register_exitproc+0xb4>
    1b08:	e2843002 	add	r3, r4, #2
    1b0c:	e2844001 	add	r4, r4, #1
    1b10:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1b14:	e58c4004 	str	r4, [r12, #4]
    1b18:	e3a00000 	mov	r0, #0
    1b1c:	e28dd010 	add	sp, sp, #16
    1b20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1b24:	e12fff1e 	bx	lr
    1b28:	e3a00001 	mov	r0, #1
    1b2c:	e1a00410 	lsl	r0, r0, r4
    1b30:	e08c8104 	add	r8, r12, r4, lsl #2
    1b34:	e3560002 	cmp	r6, #2
    1b38:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1b3c:	e5883108 	str	r3, [r8, #264]	; 0x108
    1b40:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1b44:	e1877000 	orr	r7, r7, r0
    1b48:	01830000 	orreq	r0, r3, r0
    1b4c:	e1a05008 	mov	r5, r8
    1b50:	e5882088 	str	r2, [r8, #136]	; 0x88
    1b54:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1b58:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1b5c:	eaffffe9 	b	1b08 <__register_exitproc+0x94>
    1b60:	000067f0 	.word	0x000067f0
    1b64:	00000000 	.word	0x00000000

00001b68 <__call_exitprocs>:
    1b68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1b6c:	e59f3168 	ldr	r3, [pc, #360]	; 1cdc <__call_exitprocs+0x174>
    1b70:	e5933000 	ldr	r3, [r3]
    1b74:	e24dd014 	sub	sp, sp, #20
    1b78:	e58d3004 	str	r3, [sp, #4]
    1b7c:	e2833f52 	add	r3, r3, #328	; 0x148
    1b80:	e58d0008 	str	r0, [sp, #8]
    1b84:	e58d300c 	str	r3, [sp, #12]
    1b88:	e1a07001 	mov	r7, r1
    1b8c:	e3a08001 	mov	r8, #1
    1b90:	e59d3004 	ldr	r3, [sp, #4]
    1b94:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1b98:	e3560000 	cmp	r6, #0
    1b9c:	e59db00c 	ldr	r11, [sp, #12]
    1ba0:	0a000033 	beq	1c74 <__call_exitprocs+0x10c>
    1ba4:	e5965004 	ldr	r5, [r6, #4]
    1ba8:	e2554001 	subs	r4, r5, #1
    1bac:	5286a088 	addpl	r10, r6, #136	; 0x88
    1bb0:	5285501f 	addpl	r5, r5, #31
    1bb4:	508a5105 	addpl	r5, r10, r5, lsl #2
    1bb8:	5a000007 	bpl	1bdc <__call_exitprocs+0x74>
    1bbc:	ea000029 	b	1c68 <__call_exitprocs+0x100>
    1bc0:	e5953000 	ldr	r3, [r5]
    1bc4:	e1530007 	cmp	r3, r7
    1bc8:	0a000005 	beq	1be4 <__call_exitprocs+0x7c>
    1bcc:	e2444001 	sub	r4, r4, #1
    1bd0:	e3740001 	cmn	r4, #1
    1bd4:	e2455004 	sub	r5, r5, #4
    1bd8:	0a000022 	beq	1c68 <__call_exitprocs+0x100>
    1bdc:	e3570000 	cmp	r7, #0
    1be0:	1afffff6 	bne	1bc0 <__call_exitprocs+0x58>
    1be4:	e5963004 	ldr	r3, [r6, #4]
    1be8:	e06a2005 	rsb	r2, r10, r5
    1bec:	e2433001 	sub	r3, r3, #1
    1bf0:	e0862002 	add	r2, r6, r2
    1bf4:	e1530004 	cmp	r3, r4
    1bf8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1bfc:	13a01000 	movne	r1, #0
    1c00:	05864004 	streq	r4, [r6, #4]
    1c04:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1c08:	e3530000 	cmp	r3, #0
    1c0c:	0affffee 	beq	1bcc <__call_exitprocs+0x64>
    1c10:	e1a02418 	lsl	r2, r8, r4
    1c14:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1c18:	e1120001 	tst	r2, r1
    1c1c:	e5969004 	ldr	r9, [r6, #4]
    1c20:	0a000016 	beq	1c80 <__call_exitprocs+0x118>
    1c24:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1c28:	e1120001 	tst	r2, r1
    1c2c:	1a000016 	bne	1c8c <__call_exitprocs+0x124>
    1c30:	e59d0008 	ldr	r0, [sp, #8]
    1c34:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1c38:	e1a0e00f 	mov	lr, pc
    1c3c:	e12fff13 	bx	r3
    1c40:	e5963004 	ldr	r3, [r6, #4]
    1c44:	e1530009 	cmp	r3, r9
    1c48:	1affffd0 	bne	1b90 <__call_exitprocs+0x28>
    1c4c:	e59b3000 	ldr	r3, [r11]
    1c50:	e1530006 	cmp	r3, r6
    1c54:	1affffcd 	bne	1b90 <__call_exitprocs+0x28>
    1c58:	e2444001 	sub	r4, r4, #1
    1c5c:	e3740001 	cmn	r4, #1
    1c60:	e2455004 	sub	r5, r5, #4
    1c64:	1affffdc 	bne	1bdc <__call_exitprocs+0x74>
    1c68:	e59f1070 	ldr	r1, [pc, #112]	; 1ce0 <__call_exitprocs+0x178>
    1c6c:	e3510000 	cmp	r1, #0
    1c70:	1a000009 	bne	1c9c <__call_exitprocs+0x134>
    1c74:	e28dd014 	add	sp, sp, #20
    1c78:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1c7c:	e12fff1e 	bx	lr
    1c80:	e1a0e00f 	mov	lr, pc
    1c84:	e12fff13 	bx	r3
    1c88:	eaffffec 	b	1c40 <__call_exitprocs+0xd8>
    1c8c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1c90:	e1a0e00f 	mov	lr, pc
    1c94:	e12fff13 	bx	r3
    1c98:	eaffffe8 	b	1c40 <__call_exitprocs+0xd8>
    1c9c:	e5963004 	ldr	r3, [r6, #4]
    1ca0:	e3530000 	cmp	r3, #0
    1ca4:	e5963000 	ldr	r3, [r6]
    1ca8:	1a000008 	bne	1cd0 <__call_exitprocs+0x168>
    1cac:	e3530000 	cmp	r3, #0
    1cb0:	0a000006 	beq	1cd0 <__call_exitprocs+0x168>
    1cb4:	e1a00006 	mov	r0, r6
    1cb8:	e58b3000 	str	r3, [r11]
    1cbc:	e320f000 	nop	{0}
    1cc0:	e59b6000 	ldr	r6, [r11]
    1cc4:	e3560000 	cmp	r6, #0
    1cc8:	1affffb5 	bne	1ba4 <__call_exitprocs+0x3c>
    1ccc:	eaffffe8 	b	1c74 <__call_exitprocs+0x10c>
    1cd0:	e1a0b006 	mov	r11, r6
    1cd4:	e1a06003 	mov	r6, r3
    1cd8:	eafffff9 	b	1cc4 <__call_exitprocs+0x15c>
    1cdc:	000067f0 	.word	0x000067f0
    1ce0:	00000000 	.word	0x00000000

00001ce4 <register_fini>:
    1ce4:	e92d4008 	push	{r3, lr}
    1ce8:	e59f3010 	ldr	r3, [pc, #16]	; 1d00 <register_fini+0x1c>
    1cec:	e3530000 	cmp	r3, #0
    1cf0:	159f000c 	ldrne	r0, [pc, #12]	; 1d04 <register_fini+0x20>
    1cf4:	1bffff18 	blne	195c <atexit>
    1cf8:	e8bd4008 	pop	{r3, lr}
    1cfc:	e12fff1e 	bx	lr
    1d00:	00006818 	.word	0x00006818
    1d04:	00001d08 	.word	0x00001d08

00001d08 <__libc_fini_array>:
    1d08:	e92d4038 	push	{r3, r4, r5, lr}
    1d0c:	e59f5030 	ldr	r5, [pc, #48]	; 1d44 <__libc_fini_array+0x3c>
    1d10:	e59f4030 	ldr	r4, [pc, #48]	; 1d48 <__libc_fini_array+0x40>
    1d14:	e0654004 	rsb	r4, r5, r4
    1d18:	e1b04144 	asrs	r4, r4, #2
    1d1c:	10855104 	addne	r5, r5, r4, lsl #2
    1d20:	0a000004 	beq	1d38 <__libc_fini_array+0x30>
    1d24:	e5353004 	ldr	r3, [r5, #-4]!
    1d28:	e1a0e00f 	mov	lr, pc
    1d2c:	e12fff13 	bx	r3
    1d30:	e2544001 	subs	r4, r4, #1
    1d34:	1afffffa 	bne	1d24 <__libc_fini_array+0x1c>
    1d38:	eb0012b6 	bl	6818 <__libc_fini>
    1d3c:	e8bd4038 	pop	{r3, r4, r5, lr}
    1d40:	e12fff1e 	bx	lr
    1d44:	00006830 	.word	0x00006830
    1d48:	00006834 	.word	0x00006834

00001d4c <_gettimeofday_r>:
    1d4c:	e92d4038 	push	{r3, r4, r5, lr}
    1d50:	e59f4030 	ldr	r4, [pc, #48]	; 1d88 <_gettimeofday_r+0x3c>
    1d54:	e3a03000 	mov	r3, #0
    1d58:	e1a05000 	mov	r5, r0
    1d5c:	e1a00001 	mov	r0, r1
    1d60:	e1a01002 	mov	r1, r2
    1d64:	e5843000 	str	r3, [r4]
    1d68:	eb00033a 	bl	2a58 <_gettimeofday>
    1d6c:	e3700001 	cmn	r0, #1
    1d70:	1a000002 	bne	1d80 <_gettimeofday_r+0x34>
    1d74:	e5943000 	ldr	r3, [r4]
    1d78:	e3530000 	cmp	r3, #0
    1d7c:	15853000 	strne	r3, [r5]
    1d80:	e8bd4038 	pop	{r3, r4, r5, lr}
    1d84:	e12fff1e 	bx	lr
    1d88:	000071dc 	.word	0x000071dc

00001d8c <cleanup_glue>:
    1d8c:	e92d4038 	push	{r3, r4, r5, lr}
    1d90:	e1a04001 	mov	r4, r1
    1d94:	e5911000 	ldr	r1, [r1]
    1d98:	e3510000 	cmp	r1, #0
    1d9c:	e1a05000 	mov	r5, r0
    1da0:	1bfffff9 	blne	1d8c <cleanup_glue>
    1da4:	e1a00005 	mov	r0, r5
    1da8:	e1a01004 	mov	r1, r4
    1dac:	eb00009c 	bl	2024 <_free_r>
    1db0:	e8bd4038 	pop	{r3, r4, r5, lr}
    1db4:	e12fff1e 	bx	lr

00001db8 <_reclaim_reent>:
    1db8:	e59f30f0 	ldr	r3, [pc, #240]	; 1eb0 <_reclaim_reent+0xf8>
    1dbc:	e5933000 	ldr	r3, [r3]
    1dc0:	e1500003 	cmp	r0, r3
    1dc4:	e92d4070 	push	{r4, r5, r6, lr}
    1dc8:	e1a05000 	mov	r5, r0
    1dcc:	0a00002b 	beq	1e80 <_reclaim_reent+0xc8>
    1dd0:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    1dd4:	e3520000 	cmp	r2, #0
    1dd8:	0a000011 	beq	1e24 <_reclaim_reent+0x6c>
    1ddc:	e3a03000 	mov	r3, #0
    1de0:	e1a06003 	mov	r6, r3
    1de4:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    1de8:	e3510000 	cmp	r1, #0
    1dec:	0a000005 	beq	1e08 <_reclaim_reent+0x50>
    1df0:	e5914000 	ldr	r4, [r1]
    1df4:	e1a00005 	mov	r0, r5
    1df8:	eb000089 	bl	2024 <_free_r>
    1dfc:	e2541000 	subs	r1, r4, #0
    1e00:	1afffffa 	bne	1df0 <_reclaim_reent+0x38>
    1e04:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    1e08:	e2866001 	add	r6, r6, #1
    1e0c:	e3560020 	cmp	r6, #32
    1e10:	e1a03006 	mov	r3, r6
    1e14:	1afffff2 	bne	1de4 <_reclaim_reent+0x2c>
    1e18:	e1a00005 	mov	r0, r5
    1e1c:	e1a01002 	mov	r1, r2
    1e20:	eb00007f 	bl	2024 <_free_r>
    1e24:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    1e28:	e3510000 	cmp	r1, #0
    1e2c:	11a00005 	movne	r0, r5
    1e30:	1b00007b 	blne	2024 <_free_r>
    1e34:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    1e38:	e3510000 	cmp	r1, #0
    1e3c:	0a000008 	beq	1e64 <_reclaim_reent+0xac>
    1e40:	e2856f53 	add	r6, r5, #332	; 0x14c
    1e44:	e1510006 	cmp	r1, r6
    1e48:	0a000005 	beq	1e64 <_reclaim_reent+0xac>
    1e4c:	e5914000 	ldr	r4, [r1]
    1e50:	e1a00005 	mov	r0, r5
    1e54:	eb000072 	bl	2024 <_free_r>
    1e58:	e1560004 	cmp	r6, r4
    1e5c:	e1a01004 	mov	r1, r4
    1e60:	1afffff9 	bne	1e4c <_reclaim_reent+0x94>
    1e64:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    1e68:	e3510000 	cmp	r1, #0
    1e6c:	11a00005 	movne	r0, r5
    1e70:	1b00006b 	blne	2024 <_free_r>
    1e74:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    1e78:	e3530000 	cmp	r3, #0
    1e7c:	1a000001 	bne	1e88 <_reclaim_reent+0xd0>
    1e80:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e84:	e12fff1e 	bx	lr
    1e88:	e1a00005 	mov	r0, r5
    1e8c:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    1e90:	e1a0e00f 	mov	lr, pc
    1e94:	e12fff1c 	bx	r12
    1e98:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    1e9c:	e3510000 	cmp	r1, #0
    1ea0:	0afffff6 	beq	1e80 <_reclaim_reent+0xc8>
    1ea4:	e1a00005 	mov	r0, r5
    1ea8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1eac:	eaffffb6 	b	1d8c <cleanup_glue>
    1eb0:	00006868 	.word	0x00006868

00001eb4 <_wrapup_reent>:
    1eb4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    1eb8:	e2507000 	subs	r7, r0, #0
    1ebc:	059f3060 	ldreq	r3, [pc, #96]	; 1f24 <_wrapup_reent+0x70>
    1ec0:	05937000 	ldreq	r7, [r3]
    1ec4:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    1ec8:	e3560000 	cmp	r6, #0
    1ecc:	0a00000d 	beq	1f08 <_wrapup_reent+0x54>
    1ed0:	e5965004 	ldr	r5, [r6, #4]
    1ed4:	e2554001 	subs	r4, r5, #1
    1ed8:	52855002 	addpl	r5, r5, #2
    1edc:	50865105 	addpl	r5, r6, r5, lsl #2
    1ee0:	4a000005 	bmi	1efc <_wrapup_reent+0x48>
    1ee4:	e5353004 	ldr	r3, [r5, #-4]!
    1ee8:	e2444001 	sub	r4, r4, #1
    1eec:	e1a0e00f 	mov	lr, pc
    1ef0:	e12fff13 	bx	r3
    1ef4:	e3740001 	cmn	r4, #1
    1ef8:	1afffff9 	bne	1ee4 <_wrapup_reent+0x30>
    1efc:	e5966000 	ldr	r6, [r6]
    1f00:	e3560000 	cmp	r6, #0
    1f04:	1afffff1 	bne	1ed0 <_wrapup_reent+0x1c>
    1f08:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    1f0c:	e3530000 	cmp	r3, #0
    1f10:	11a00007 	movne	r0, r7
    1f14:	11a0e00f 	movne	lr, pc
    1f18:	112fff13 	bxne	r3
    1f1c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    1f20:	e12fff1e 	bx	lr
    1f24:	00006868 	.word	0x00006868

00001f28 <_malloc_trim_r>:
    1f28:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    1f2c:	e59f50e4 	ldr	r5, [pc, #228]	; 2018 <_malloc_trim_r+0xf0>
    1f30:	e1a07001 	mov	r7, r1
    1f34:	e1a04000 	mov	r4, r0
    1f38:	eb00029b 	bl	29ac <__malloc_lock>
    1f3c:	e5953008 	ldr	r3, [r5, #8]
    1f40:	e5936004 	ldr	r6, [r3, #4]
    1f44:	e3c66003 	bic	r6, r6, #3
    1f48:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    1f4c:	e283300f 	add	r3, r3, #15
    1f50:	e0677003 	rsb	r7, r7, r3
    1f54:	e1a07627 	lsr	r7, r7, #12
    1f58:	e2477001 	sub	r7, r7, #1
    1f5c:	e1a07607 	lsl	r7, r7, #12
    1f60:	e3570a01 	cmp	r7, #4096	; 0x1000
    1f64:	ba000006 	blt	1f84 <_malloc_trim_r+0x5c>
    1f68:	e1a00004 	mov	r0, r4
    1f6c:	e3a01000 	mov	r1, #0
    1f70:	eb00028f 	bl	29b4 <_sbrk_r>
    1f74:	e5953008 	ldr	r3, [r5, #8]
    1f78:	e0833006 	add	r3, r3, r6
    1f7c:	e1500003 	cmp	r0, r3
    1f80:	0a000004 	beq	1f98 <_malloc_trim_r+0x70>
    1f84:	e1a00004 	mov	r0, r4
    1f88:	eb000288 	bl	29b0 <__malloc_unlock>
    1f8c:	e3a00000 	mov	r0, #0
    1f90:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    1f94:	e12fff1e 	bx	lr
    1f98:	e1a00004 	mov	r0, r4
    1f9c:	e2671000 	rsb	r1, r7, #0
    1fa0:	eb000283 	bl	29b4 <_sbrk_r>
    1fa4:	e3700001 	cmn	r0, #1
    1fa8:	0a00000b 	beq	1fdc <_malloc_trim_r+0xb4>
    1fac:	e59f3068 	ldr	r3, [pc, #104]	; 201c <_malloc_trim_r+0xf4>
    1fb0:	e5952008 	ldr	r2, [r5, #8]
    1fb4:	e5931000 	ldr	r1, [r3]
    1fb8:	e0676006 	rsb	r6, r7, r6
    1fbc:	e3866001 	orr	r6, r6, #1
    1fc0:	e0677001 	rsb	r7, r7, r1
    1fc4:	e1a00004 	mov	r0, r4
    1fc8:	e5826004 	str	r6, [r2, #4]
    1fcc:	e5837000 	str	r7, [r3]
    1fd0:	eb000276 	bl	29b0 <__malloc_unlock>
    1fd4:	e3a00001 	mov	r0, #1
    1fd8:	eaffffec 	b	1f90 <_malloc_trim_r+0x68>
    1fdc:	e1a00004 	mov	r0, r4
    1fe0:	e3a01000 	mov	r1, #0
    1fe4:	eb000272 	bl	29b4 <_sbrk_r>
    1fe8:	e5953008 	ldr	r3, [r5, #8]
    1fec:	e0632000 	rsb	r2, r3, r0
    1ff0:	e352000f 	cmp	r2, #15
    1ff4:	daffffe2 	ble	1f84 <_malloc_trim_r+0x5c>
    1ff8:	e59f1020 	ldr	r1, [pc, #32]	; 2020 <_malloc_trim_r+0xf8>
    1ffc:	e5911000 	ldr	r1, [r1]
    2000:	e0610000 	rsb	r0, r1, r0
    2004:	e59f1010 	ldr	r1, [pc, #16]	; 201c <_malloc_trim_r+0xf4>
    2008:	e3822001 	orr	r2, r2, #1
    200c:	e5810000 	str	r0, [r1]
    2010:	e5832004 	str	r2, [r3, #4]
    2014:	eaffffda 	b	1f84 <_malloc_trim_r+0x5c>
    2018:	00006c98 	.word	0x00006c98
    201c:	000071e4 	.word	0x000071e4
    2020:	000070a0 	.word	0x000070a0

00002024 <_free_r>:
    2024:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2028:	e2514000 	subs	r4, r1, #0
    202c:	e1a06000 	mov	r6, r0
    2030:	0a000046 	beq	2150 <_free_r+0x12c>
    2034:	eb00025c 	bl	29ac <__malloc_lock>
    2038:	e514e004 	ldr	lr, [r4, #-4]
    203c:	e59f1238 	ldr	r1, [pc, #568]	; 227c <_free_r+0x258>
    2040:	e244c008 	sub	r12, r4, #8
    2044:	e3ce3001 	bic	r3, lr, #1
    2048:	e08c2003 	add	r2, r12, r3
    204c:	e5910008 	ldr	r0, [r1, #8]
    2050:	e5925004 	ldr	r5, [r2, #4]
    2054:	e1500002 	cmp	r0, r2
    2058:	e3c55003 	bic	r5, r5, #3
    205c:	0a00004a 	beq	218c <_free_r+0x168>
    2060:	e21ee001 	ands	lr, lr, #1
    2064:	e5825004 	str	r5, [r2, #4]
    2068:	13a0e000 	movne	lr, #0
    206c:	1a000009 	bne	2098 <_free_r+0x74>
    2070:	e5144008 	ldr	r4, [r4, #-8]
    2074:	e064c00c 	rsb	r12, r4, r12
    2078:	e59c0008 	ldr	r0, [r12, #8]
    207c:	e2817008 	add	r7, r1, #8
    2080:	e1500007 	cmp	r0, r7
    2084:	e0833004 	add	r3, r3, r4
    2088:	159c400c 	ldrne	r4, [r12, #12]
    208c:	1580400c 	strne	r4, [r0, #12]
    2090:	15840008 	strne	r0, [r4, #8]
    2094:	03a0e001 	moveq	lr, #1
    2098:	e0820005 	add	r0, r2, r5
    209c:	e5900004 	ldr	r0, [r0, #4]
    20a0:	e3100001 	tst	r0, #1
    20a4:	1a000009 	bne	20d0 <_free_r+0xac>
    20a8:	e35e0000 	cmp	lr, #0
    20ac:	e5920008 	ldr	r0, [r2, #8]
    20b0:	e0833005 	add	r3, r3, r5
    20b4:	1a000002 	bne	20c4 <_free_r+0xa0>
    20b8:	e59f41c0 	ldr	r4, [pc, #448]	; 2280 <_free_r+0x25c>
    20bc:	e1500004 	cmp	r0, r4
    20c0:	0a000047 	beq	21e4 <_free_r+0x1c0>
    20c4:	e592200c 	ldr	r2, [r2, #12]
    20c8:	e580200c 	str	r2, [r0, #12]
    20cc:	e5820008 	str	r0, [r2, #8]
    20d0:	e3832001 	orr	r2, r3, #1
    20d4:	e35e0000 	cmp	lr, #0
    20d8:	e58c2004 	str	r2, [r12, #4]
    20dc:	e78c3003 	str	r3, [r12, r3]
    20e0:	1a000018 	bne	2148 <_free_r+0x124>
    20e4:	e3530c02 	cmp	r3, #512	; 0x200
    20e8:	3a00001a 	bcc	2158 <_free_r+0x134>
    20ec:	e1a024a3 	lsr	r2, r3, #9
    20f0:	e3520004 	cmp	r2, #4
    20f4:	8a000042 	bhi	2204 <_free_r+0x1e0>
    20f8:	e1a0e323 	lsr	lr, r3, #6
    20fc:	e28ee038 	add	lr, lr, #56	; 0x38
    2100:	e1a0008e 	lsl	r0, lr, #1
    2104:	e0810100 	add	r0, r1, r0, lsl #2
    2108:	e5902008 	ldr	r2, [r0, #8]
    210c:	e1520000 	cmp	r2, r0
    2110:	e59f1164 	ldr	r1, [pc, #356]	; 227c <_free_r+0x258>
    2114:	0a000044 	beq	222c <_free_r+0x208>
    2118:	e5921004 	ldr	r1, [r2, #4]
    211c:	e3c11003 	bic	r1, r1, #3
    2120:	e1530001 	cmp	r3, r1
    2124:	2a000002 	bcs	2134 <_free_r+0x110>
    2128:	e5922008 	ldr	r2, [r2, #8]
    212c:	e1500002 	cmp	r0, r2
    2130:	1afffff8 	bne	2118 <_free_r+0xf4>
    2134:	e592300c 	ldr	r3, [r2, #12]
    2138:	e58c300c 	str	r3, [r12, #12]
    213c:	e58c2008 	str	r2, [r12, #8]
    2140:	e582c00c 	str	r12, [r2, #12]
    2144:	e583c008 	str	r12, [r3, #8]
    2148:	e1a00006 	mov	r0, r6
    214c:	eb000217 	bl	29b0 <__malloc_unlock>
    2150:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    2154:	e12fff1e 	bx	lr
    2158:	e5912004 	ldr	r2, [r1, #4]
    215c:	e1a031a3 	lsr	r3, r3, #3
    2160:	e1a00143 	asr	r0, r3, #2
    2164:	e3a0e001 	mov	lr, #1
    2168:	e182001e 	orr	r0, r2, lr, lsl r0
    216c:	e0813183 	add	r3, r1, r3, lsl #3
    2170:	e5932008 	ldr	r2, [r3, #8]
    2174:	e58c300c 	str	r3, [r12, #12]
    2178:	e58c2008 	str	r2, [r12, #8]
    217c:	e5810004 	str	r0, [r1, #4]
    2180:	e583c008 	str	r12, [r3, #8]
    2184:	e582c00c 	str	r12, [r2, #12]
    2188:	eaffffee 	b	2148 <_free_r+0x124>
    218c:	e31e0001 	tst	lr, #1
    2190:	e0853003 	add	r3, r5, r3
    2194:	1a000006 	bne	21b4 <_free_r+0x190>
    2198:	e5142008 	ldr	r2, [r4, #-8]
    219c:	e062c00c 	rsb	r12, r2, r12
    21a0:	e59c000c 	ldr	r0, [r12, #12]
    21a4:	e59ce008 	ldr	lr, [r12, #8]
    21a8:	e58e000c 	str	r0, [lr, #12]
    21ac:	e580e008 	str	lr, [r0, #8]
    21b0:	e0833002 	add	r3, r3, r2
    21b4:	e59f20c8 	ldr	r2, [pc, #200]	; 2284 <_free_r+0x260>
    21b8:	e5920000 	ldr	r0, [r2]
    21bc:	e3832001 	orr	r2, r3, #1
    21c0:	e1530000 	cmp	r3, r0
    21c4:	e58c2004 	str	r2, [r12, #4]
    21c8:	e581c008 	str	r12, [r1, #8]
    21cc:	3affffdd 	bcc	2148 <_free_r+0x124>
    21d0:	e59f30b0 	ldr	r3, [pc, #176]	; 2288 <_free_r+0x264>
    21d4:	e1a00006 	mov	r0, r6
    21d8:	e5931000 	ldr	r1, [r3]
    21dc:	ebffff51 	bl	1f28 <_malloc_trim_r>
    21e0:	eaffffd8 	b	2148 <_free_r+0x124>
    21e4:	e3832001 	orr	r2, r3, #1
    21e8:	e581c014 	str	r12, [r1, #20]
    21ec:	e581c010 	str	r12, [r1, #16]
    21f0:	e58c000c 	str	r0, [r12, #12]
    21f4:	e58c0008 	str	r0, [r12, #8]
    21f8:	e58c2004 	str	r2, [r12, #4]
    21fc:	e78c3003 	str	r3, [r12, r3]
    2200:	eaffffd0 	b	2148 <_free_r+0x124>
    2204:	e3520014 	cmp	r2, #20
    2208:	9282e05b 	addls	lr, r2, #91	; 0x5b
    220c:	91a0008e 	lslls	r0, lr, #1
    2210:	9affffbb 	bls	2104 <_free_r+0xe0>
    2214:	e3520054 	cmp	r2, #84	; 0x54
    2218:	8a00000a 	bhi	2248 <_free_r+0x224>
    221c:	e1a0e623 	lsr	lr, r3, #12
    2220:	e28ee06e 	add	lr, lr, #110	; 0x6e
    2224:	e1a0008e 	lsl	r0, lr, #1
    2228:	eaffffb5 	b	2104 <_free_r+0xe0>
    222c:	e5913004 	ldr	r3, [r1, #4]
    2230:	e1a0e14e 	asr	lr, lr, #2
    2234:	e3a00001 	mov	r0, #1
    2238:	e1830e10 	orr	r0, r3, r0, lsl lr
    223c:	e1a03002 	mov	r3, r2
    2240:	e5810004 	str	r0, [r1, #4]
    2244:	eaffffbb 	b	2138 <_free_r+0x114>
    2248:	e3520f55 	cmp	r2, #340	; 0x154
    224c:	91a0e7a3 	lsrls	lr, r3, #15
    2250:	928ee077 	addls	lr, lr, #119	; 0x77
    2254:	91a0008e 	lslls	r0, lr, #1
    2258:	9affffa9 	bls	2104 <_free_r+0xe0>
    225c:	e59f0028 	ldr	r0, [pc, #40]	; 228c <_free_r+0x268>
    2260:	e1520000 	cmp	r2, r0
    2264:	91a0e923 	lsrls	lr, r3, #18
    2268:	928ee07c 	addls	lr, lr, #124	; 0x7c
    226c:	91a0008e 	lslls	r0, lr, #1
    2270:	83a000fc 	movhi	r0, #252	; 0xfc
    2274:	83a0e07e 	movhi	lr, #126	; 0x7e
    2278:	eaffffa1 	b	2104 <_free_r+0xe0>
    227c:	00006c98 	.word	0x00006c98
    2280:	00006ca0 	.word	0x00006ca0
    2284:	000070a4 	.word	0x000070a4
    2288:	000071e0 	.word	0x000071e0
    228c:	00000554 	.word	0x00000554

00002290 <_malloc_r>:
    2290:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2294:	e281500b 	add	r5, r1, #11
    2298:	e3550016 	cmp	r5, #22
    229c:	83c55007 	bichi	r5, r5, #7
    22a0:	81a03fa5 	lsrhi	r3, r5, #31
    22a4:	93a03000 	movls	r3, #0
    22a8:	93a05010 	movls	r5, #16
    22ac:	e1550001 	cmp	r5, r1
    22b0:	21a01003 	movcs	r1, r3
    22b4:	33831001 	orrcc	r1, r3, #1
    22b8:	e3510000 	cmp	r1, #0
    22bc:	13a0300c 	movne	r3, #12
    22c0:	e24dd00c 	sub	sp, sp, #12
    22c4:	e1a06000 	mov	r6, r0
    22c8:	15803000 	strne	r3, [r0]
    22cc:	13a04000 	movne	r4, #0
    22d0:	1a000015 	bne	232c <_malloc_r+0x9c>
    22d4:	eb0001b4 	bl	29ac <__malloc_lock>
    22d8:	e3550f7e 	cmp	r5, #504	; 0x1f8
    22dc:	2a000016 	bcs	233c <_malloc_r+0xac>
    22e0:	e59f76b8 	ldr	r7, [pc, #1720]	; 29a0 <_malloc_r+0x710>
    22e4:	e1a0e1a5 	lsr	lr, r5, #3
    22e8:	e087318e 	add	r3, r7, lr, lsl #3
    22ec:	e593400c 	ldr	r4, [r3, #12]
    22f0:	e1540003 	cmp	r4, r3
    22f4:	0a00014b 	beq	2828 <_malloc_r+0x598>
    22f8:	e5943004 	ldr	r3, [r4, #4]
    22fc:	e3c33003 	bic	r3, r3, #3
    2300:	e0843003 	add	r3, r4, r3
    2304:	e5930004 	ldr	r0, [r3, #4]
    2308:	e2841008 	add	r1, r4, #8
    230c:	e8910006 	ldm	r1, {r1, r2}
    2310:	e3800001 	orr	r0, r0, #1
    2314:	e5830004 	str	r0, [r3, #4]
    2318:	e581200c 	str	r2, [r1, #12]
    231c:	e5821008 	str	r1, [r2, #8]
    2320:	e1a00006 	mov	r0, r6
    2324:	eb0001a1 	bl	29b0 <__malloc_unlock>
    2328:	e2844008 	add	r4, r4, #8
    232c:	e1a00004 	mov	r0, r4
    2330:	e28dd00c 	add	sp, sp, #12
    2334:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2338:	e12fff1e 	bx	lr
    233c:	e1b0e4a5 	lsrs	lr, r5, #9
    2340:	01a0e1a5 	lsreq	lr, r5, #3
    2344:	01a0108e 	lsleq	r1, lr, #1
    2348:	1a000061 	bne	24d4 <_malloc_r+0x244>
    234c:	e59f764c 	ldr	r7, [pc, #1612]	; 29a0 <_malloc_r+0x710>
    2350:	e0871101 	add	r1, r7, r1, lsl #2
    2354:	e591400c 	ldr	r4, [r1, #12]
    2358:	e1510004 	cmp	r1, r4
    235c:	1a000005 	bne	2378 <_malloc_r+0xe8>
    2360:	ea00000a 	b	2390 <_malloc_r+0x100>
    2364:	e3530000 	cmp	r3, #0
    2368:	aa0000d7 	bge	26cc <_malloc_r+0x43c>
    236c:	e594400c 	ldr	r4, [r4, #12]
    2370:	e1510004 	cmp	r1, r4
    2374:	0a000005 	beq	2390 <_malloc_r+0x100>
    2378:	e5942004 	ldr	r2, [r4, #4]
    237c:	e3c22003 	bic	r2, r2, #3
    2380:	e0653002 	rsb	r3, r5, r2
    2384:	e353000f 	cmp	r3, #15
    2388:	dafffff5 	ble	2364 <_malloc_r+0xd4>
    238c:	e24ee001 	sub	lr, lr, #1
    2390:	e28ee001 	add	lr, lr, #1
    2394:	e59f3604 	ldr	r3, [pc, #1540]	; 29a0 <_malloc_r+0x710>
    2398:	e5974010 	ldr	r4, [r7, #16]
    239c:	e2838008 	add	r8, r3, #8
    23a0:	e1540008 	cmp	r4, r8
    23a4:	05931004 	ldreq	r1, [r3, #4]
    23a8:	0a000016 	beq	2408 <_malloc_r+0x178>
    23ac:	e5942004 	ldr	r2, [r4, #4]
    23b0:	e3c22003 	bic	r2, r2, #3
    23b4:	e0651002 	rsb	r1, r5, r2
    23b8:	e351000f 	cmp	r1, #15
    23bc:	ca0000f7 	bgt	27a0 <_malloc_r+0x510>
    23c0:	e3510000 	cmp	r1, #0
    23c4:	e5838014 	str	r8, [r3, #20]
    23c8:	e5838010 	str	r8, [r3, #16]
    23cc:	aa000046 	bge	24ec <_malloc_r+0x25c>
    23d0:	e3520c02 	cmp	r2, #512	; 0x200
    23d4:	2a0000d2 	bcs	2724 <_malloc_r+0x494>
    23d8:	e5930004 	ldr	r0, [r3, #4]
    23dc:	e1a021a2 	lsr	r2, r2, #3
    23e0:	e1a01142 	asr	r1, r2, #2
    23e4:	e3a0c001 	mov	r12, #1
    23e8:	e180111c 	orr	r1, r0, r12, lsl r1
    23ec:	e0832182 	add	r2, r3, r2, lsl #3
    23f0:	e5920008 	ldr	r0, [r2, #8]
    23f4:	e584200c 	str	r2, [r4, #12]
    23f8:	e5840008 	str	r0, [r4, #8]
    23fc:	e5831004 	str	r1, [r3, #4]
    2400:	e5824008 	str	r4, [r2, #8]
    2404:	e580400c 	str	r4, [r0, #12]
    2408:	e1a0014e 	asr	r0, lr, #2
    240c:	e3a03001 	mov	r3, #1
    2410:	e1a00013 	lsl	r0, r3, r0
    2414:	e1500001 	cmp	r0, r1
    2418:	8a00003b 	bhi	250c <_malloc_r+0x27c>
    241c:	e1110000 	tst	r1, r0
    2420:	1a000008 	bne	2448 <_malloc_r+0x1b8>
    2424:	e1a00310 	lsl	r0, r0, r3
    2428:	e3cee003 	bic	lr, lr, #3
    242c:	e1110000 	tst	r1, r0
    2430:	e28ee004 	add	lr, lr, #4
    2434:	1a000003 	bne	2448 <_malloc_r+0x1b8>
    2438:	e1a00080 	lsl	r0, r0, #1
    243c:	e1110000 	tst	r1, r0
    2440:	e28ee004 	add	lr, lr, #4
    2444:	0afffffb 	beq	2438 <_malloc_r+0x1a8>
    2448:	e087a18e 	add	r10, r7, lr, lsl #3
    244c:	e1a0c00a 	mov	r12, r10
    2450:	e1a0400e 	mov	r4, lr
    2454:	e59c300c 	ldr	r3, [r12, #12]
    2458:	e15c0003 	cmp	r12, r3
    245c:	1a000005 	bne	2478 <_malloc_r+0x1e8>
    2460:	ea0000db 	b	27d4 <_malloc_r+0x544>
    2464:	e3520000 	cmp	r2, #0
    2468:	aa0000f4 	bge	2840 <_malloc_r+0x5b0>
    246c:	e593300c 	ldr	r3, [r3, #12]
    2470:	e15c0003 	cmp	r12, r3
    2474:	0a0000d6 	beq	27d4 <_malloc_r+0x544>
    2478:	e5931004 	ldr	r1, [r3, #4]
    247c:	e3c11003 	bic	r1, r1, #3
    2480:	e0652001 	rsb	r2, r5, r1
    2484:	e352000f 	cmp	r2, #15
    2488:	dafffff5 	ble	2464 <_malloc_r+0x1d4>
    248c:	e1a04003 	mov	r4, r3
    2490:	e593000c 	ldr	r0, [r3, #12]
    2494:	e5b4c008 	ldr	r12, [r4, #8]!
    2498:	e0831005 	add	r1, r3, r5
    249c:	e382e001 	orr	lr, r2, #1
    24a0:	e3855001 	orr	r5, r5, #1
    24a4:	e58c000c 	str	r0, [r12, #12]
    24a8:	e580c008 	str	r12, [r0, #8]
    24ac:	e5835004 	str	r5, [r3, #4]
    24b0:	e5871014 	str	r1, [r7, #20]
    24b4:	e5871010 	str	r1, [r7, #16]
    24b8:	e581800c 	str	r8, [r1, #12]
    24bc:	e5818008 	str	r8, [r1, #8]
    24c0:	e581e004 	str	lr, [r1, #4]
    24c4:	e7812002 	str	r2, [r1, r2]
    24c8:	e1a00006 	mov	r0, r6
    24cc:	eb000137 	bl	29b0 <__malloc_unlock>
    24d0:	eaffff95 	b	232c <_malloc_r+0x9c>
    24d4:	e35e0004 	cmp	lr, #4
    24d8:	8a000087 	bhi	26fc <_malloc_r+0x46c>
    24dc:	e1a0e325 	lsr	lr, r5, #6
    24e0:	e28ee038 	add	lr, lr, #56	; 0x38
    24e4:	e1a0108e 	lsl	r1, lr, #1
    24e8:	eaffff97 	b	234c <_malloc_r+0xbc>
    24ec:	e0842002 	add	r2, r4, r2
    24f0:	e5923004 	ldr	r3, [r2, #4]
    24f4:	e3833001 	orr	r3, r3, #1
    24f8:	e5823004 	str	r3, [r2, #4]
    24fc:	e1a00006 	mov	r0, r6
    2500:	eb00012a 	bl	29b0 <__malloc_unlock>
    2504:	e2844008 	add	r4, r4, #8
    2508:	eaffff87 	b	232c <_malloc_r+0x9c>
    250c:	e5974008 	ldr	r4, [r7, #8]
    2510:	e594a004 	ldr	r10, [r4, #4]
    2514:	e3caa003 	bic	r10, r10, #3
    2518:	e155000a 	cmp	r5, r10
    251c:	8a000002 	bhi	252c <_malloc_r+0x29c>
    2520:	e065300a 	rsb	r3, r5, r10
    2524:	e353000f 	cmp	r3, #15
    2528:	ca00005d 	bgt	26a4 <_malloc_r+0x414>
    252c:	e59f9470 	ldr	r9, [pc, #1136]	; 29a4 <_malloc_r+0x714>
    2530:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    2534:	e599b000 	ldr	r11, [r9]
    2538:	e3730001 	cmn	r3, #1
    253c:	e085b00b 	add	r11, r5, r11
    2540:	128bba01 	addne	r11, r11, #4096	; 0x1000
    2544:	128bb00f 	addne	r11, r11, #15
    2548:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    254c:	028bb010 	addeq	r11, r11, #16
    2550:	13cbb00f 	bicne	r11, r11, #15
    2554:	e084200a 	add	r2, r4, r10
    2558:	e1a00006 	mov	r0, r6
    255c:	e1a0100b 	mov	r1, r11
    2560:	e58d2004 	str	r2, [sp, #4]
    2564:	eb000112 	bl	29b4 <_sbrk_r>
    2568:	e3700001 	cmn	r0, #1
    256c:	e1a08000 	mov	r8, r0
    2570:	e59d2004 	ldr	r2, [sp, #4]
    2574:	0a0000e2 	beq	2904 <_malloc_r+0x674>
    2578:	e1520000 	cmp	r2, r0
    257c:	8a0000bf 	bhi	2880 <_malloc_r+0x5f0>
    2580:	e5993004 	ldr	r3, [r9, #4]
    2584:	e1520008 	cmp	r2, r8
    2588:	e08b3003 	add	r3, r11, r3
    258c:	e5893004 	str	r3, [r9, #4]
    2590:	0a0000df 	beq	2914 <_malloc_r+0x684>
    2594:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    2598:	e3710001 	cmn	r1, #1
    259c:	10622008 	rsbne	r2, r2, r8
    25a0:	059f33f8 	ldreq	r3, [pc, #1016]	; 29a0 <_malloc_r+0x710>
    25a4:	10833002 	addne	r3, r3, r2
    25a8:	05838408 	streq	r8, [r3, #1032]	; 0x408
    25ac:	15893004 	strne	r3, [r9, #4]
    25b0:	e2183007 	ands	r3, r8, #7
    25b4:	12632008 	rsbne	r2, r3, #8
    25b8:	10888002 	addne	r8, r8, r2
    25bc:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    25c0:	12832008 	addne	r2, r3, #8
    25c4:	e088300b 	add	r3, r8, r11
    25c8:	03a02a01 	moveq	r2, #4096	; 0x1000
    25cc:	e1a03a03 	lsl	r3, r3, #20
    25d0:	e042ba23 	sub	r11, r2, r3, lsr #20
    25d4:	e1a0100b 	mov	r1, r11
    25d8:	e1a00006 	mov	r0, r6
    25dc:	eb0000f4 	bl	29b4 <_sbrk_r>
    25e0:	e3700001 	cmn	r0, #1
    25e4:	10682000 	rsbne	r2, r8, r0
    25e8:	e5993004 	ldr	r3, [r9, #4]
    25ec:	108b2002 	addne	r2, r11, r2
    25f0:	03a0b000 	moveq	r11, #0
    25f4:	13822001 	orrne	r2, r2, #1
    25f8:	03a02001 	moveq	r2, #1
    25fc:	e08b3003 	add	r3, r11, r3
    2600:	e1540007 	cmp	r4, r7
    2604:	e5893004 	str	r3, [r9, #4]
    2608:	e5878008 	str	r8, [r7, #8]
    260c:	e5882004 	str	r2, [r8, #4]
    2610:	0a00000d 	beq	264c <_malloc_r+0x3bc>
    2614:	e35a000f 	cmp	r10, #15
    2618:	9a0000ac 	bls	28d0 <_malloc_r+0x640>
    261c:	e594c004 	ldr	r12, [r4, #4]
    2620:	e24a200c 	sub	r2, r10, #12
    2624:	e3c22007 	bic	r2, r2, #7
    2628:	e20cc001 	and	r12, r12, #1
    262c:	e0841002 	add	r1, r4, r2
    2630:	e3a00005 	mov	r0, #5
    2634:	e182c00c 	orr	r12, r2, r12
    2638:	e352000f 	cmp	r2, #15
    263c:	e584c004 	str	r12, [r4, #4]
    2640:	e5810004 	str	r0, [r1, #4]
    2644:	e5810008 	str	r0, [r1, #8]
    2648:	8a0000b8 	bhi	2930 <_malloc_r+0x6a0>
    264c:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    2650:	e1530002 	cmp	r3, r2
    2654:	859f2348 	ldrhi	r2, [pc, #840]	; 29a4 <_malloc_r+0x714>
    2658:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    265c:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    2660:	e5974008 	ldr	r4, [r7, #8]
    2664:	e1530002 	cmp	r3, r2
    2668:	95943004 	ldrls	r3, [r4, #4]
    266c:	85942004 	ldrhi	r2, [r4, #4]
    2670:	859f132c 	ldrhi	r1, [pc, #812]	; 29a4 <_malloc_r+0x714>
    2674:	93c33003 	bicls	r3, r3, #3
    2678:	85813030 	strhi	r3, [r1, #48]	; 0x30
    267c:	83c23003 	bichi	r3, r2, #3
    2680:	e1550003 	cmp	r5, r3
    2684:	e0653003 	rsb	r3, r5, r3
    2688:	8a000001 	bhi	2694 <_malloc_r+0x404>
    268c:	e353000f 	cmp	r3, #15
    2690:	ca000003 	bgt	26a4 <_malloc_r+0x414>
    2694:	e1a00006 	mov	r0, r6
    2698:	eb0000c4 	bl	29b0 <__malloc_unlock>
    269c:	e3a04000 	mov	r4, #0
    26a0:	eaffff21 	b	232c <_malloc_r+0x9c>
    26a4:	e0842005 	add	r2, r4, r5
    26a8:	e3833001 	orr	r3, r3, #1
    26ac:	e3855001 	orr	r5, r5, #1
    26b0:	e5845004 	str	r5, [r4, #4]
    26b4:	e1a00006 	mov	r0, r6
    26b8:	e5823004 	str	r3, [r2, #4]
    26bc:	e5872008 	str	r2, [r7, #8]
    26c0:	e2844008 	add	r4, r4, #8
    26c4:	eb0000b9 	bl	29b0 <__malloc_unlock>
    26c8:	eaffff17 	b	232c <_malloc_r+0x9c>
    26cc:	e0842002 	add	r2, r4, r2
    26d0:	e5920004 	ldr	r0, [r2, #4]
    26d4:	e2841008 	add	r1, r4, #8
    26d8:	e891000a 	ldm	r1, {r1, r3}
    26dc:	e3800001 	orr	r0, r0, #1
    26e0:	e5820004 	str	r0, [r2, #4]
    26e4:	e581300c 	str	r3, [r1, #12]
    26e8:	e5831008 	str	r1, [r3, #8]
    26ec:	e1a00006 	mov	r0, r6
    26f0:	eb0000ae 	bl	29b0 <__malloc_unlock>
    26f4:	e2844008 	add	r4, r4, #8
    26f8:	eaffff0b 	b	232c <_malloc_r+0x9c>
    26fc:	e35e0014 	cmp	lr, #20
    2700:	928ee05b 	addls	lr, lr, #91	; 0x5b
    2704:	91a0108e 	lslls	r1, lr, #1
    2708:	9affff0f 	bls	234c <_malloc_r+0xbc>
    270c:	e35e0054 	cmp	lr, #84	; 0x54
    2710:	8a000061 	bhi	289c <_malloc_r+0x60c>
    2714:	e1a0e625 	lsr	lr, r5, #12
    2718:	e28ee06e 	add	lr, lr, #110	; 0x6e
    271c:	e1a0108e 	lsl	r1, lr, #1
    2720:	eaffff09 	b	234c <_malloc_r+0xbc>
    2724:	e1a034a2 	lsr	r3, r2, #9
    2728:	e3530004 	cmp	r3, #4
    272c:	9a00004f 	bls	2870 <_malloc_r+0x5e0>
    2730:	e3530014 	cmp	r3, #20
    2734:	9283a05b 	addls	r10, r3, #91	; 0x5b
    2738:	91a0008a 	lslls	r0, r10, #1
    273c:	9a000004 	bls	2754 <_malloc_r+0x4c4>
    2740:	e3530054 	cmp	r3, #84	; 0x54
    2744:	8a00007f 	bhi	2948 <_malloc_r+0x6b8>
    2748:	e1a0a622 	lsr	r10, r2, #12
    274c:	e28aa06e 	add	r10, r10, #110	; 0x6e
    2750:	e1a0008a 	lsl	r0, r10, #1
    2754:	e0870100 	add	r0, r7, r0, lsl #2
    2758:	e5903008 	ldr	r3, [r0, #8]
    275c:	e1530000 	cmp	r3, r0
    2760:	e59fc238 	ldr	r12, [pc, #568]	; 29a0 <_malloc_r+0x710>
    2764:	0a000052 	beq	28b4 <_malloc_r+0x624>
    2768:	e5931004 	ldr	r1, [r3, #4]
    276c:	e3c11003 	bic	r1, r1, #3
    2770:	e1520001 	cmp	r2, r1
    2774:	2a000002 	bcs	2784 <_malloc_r+0x4f4>
    2778:	e5933008 	ldr	r3, [r3, #8]
    277c:	e1500003 	cmp	r0, r3
    2780:	1afffff8 	bne	2768 <_malloc_r+0x4d8>
    2784:	e593200c 	ldr	r2, [r3, #12]
    2788:	e5971004 	ldr	r1, [r7, #4]
    278c:	e584200c 	str	r2, [r4, #12]
    2790:	e5843008 	str	r3, [r4, #8]
    2794:	e583400c 	str	r4, [r3, #12]
    2798:	e5824008 	str	r4, [r2, #8]
    279c:	eaffff19 	b	2408 <_malloc_r+0x178>
    27a0:	e0842005 	add	r2, r4, r5
    27a4:	e3810001 	orr	r0, r1, #1
    27a8:	e3855001 	orr	r5, r5, #1
    27ac:	e5845004 	str	r5, [r4, #4]
    27b0:	e5832014 	str	r2, [r3, #20]
    27b4:	e5832010 	str	r2, [r3, #16]
    27b8:	e582800c 	str	r8, [r2, #12]
    27bc:	e9820101 	stmib	r2, {r0, r8}
    27c0:	e7821001 	str	r1, [r2, r1]
    27c4:	e1a00006 	mov	r0, r6
    27c8:	eb000078 	bl	29b0 <__malloc_unlock>
    27cc:	e2844008 	add	r4, r4, #8
    27d0:	eafffed5 	b	232c <_malloc_r+0x9c>
    27d4:	e2844001 	add	r4, r4, #1
    27d8:	e3140003 	tst	r4, #3
    27dc:	e28cc008 	add	r12, r12, #8
    27e0:	1affff1b 	bne	2454 <_malloc_r+0x1c4>
    27e4:	e31e0003 	tst	lr, #3
    27e8:	e24a3008 	sub	r3, r10, #8
    27ec:	0a000062 	beq	297c <_malloc_r+0x6ec>
    27f0:	e59aa000 	ldr	r10, [r10]
    27f4:	e15a0003 	cmp	r10, r3
    27f8:	e24ee001 	sub	lr, lr, #1
    27fc:	0afffff8 	beq	27e4 <_malloc_r+0x554>
    2800:	e5973004 	ldr	r3, [r7, #4]
    2804:	e1a00080 	lsl	r0, r0, #1
    2808:	e1500003 	cmp	r0, r3
    280c:	8affff3e 	bhi	250c <_malloc_r+0x27c>
    2810:	e3500000 	cmp	r0, #0
    2814:	0affff3c 	beq	250c <_malloc_r+0x27c>
    2818:	e1130000 	tst	r3, r0
    281c:	0a00005a 	beq	298c <_malloc_r+0x6fc>
    2820:	e1a0e004 	mov	lr, r4
    2824:	eaffff07 	b	2448 <_malloc_r+0x1b8>
    2828:	e2843008 	add	r3, r4, #8
    282c:	e5944014 	ldr	r4, [r4, #20]
    2830:	e1530004 	cmp	r3, r4
    2834:	028ee002 	addeq	lr, lr, #2
    2838:	0afffed5 	beq	2394 <_malloc_r+0x104>
    283c:	eafffead 	b	22f8 <_malloc_r+0x68>
    2840:	e0831001 	add	r1, r3, r1
    2844:	e5910004 	ldr	r0, [r1, #4]
    2848:	e1a04003 	mov	r4, r3
    284c:	e5b42008 	ldr	r2, [r4, #8]!
    2850:	e593300c 	ldr	r3, [r3, #12]
    2854:	e3800001 	orr	r0, r0, #1
    2858:	e5810004 	str	r0, [r1, #4]
    285c:	e582300c 	str	r3, [r2, #12]
    2860:	e5832008 	str	r2, [r3, #8]
    2864:	e1a00006 	mov	r0, r6
    2868:	eb000050 	bl	29b0 <__malloc_unlock>
    286c:	eafffeae 	b	232c <_malloc_r+0x9c>
    2870:	e1a0a322 	lsr	r10, r2, #6
    2874:	e28aa038 	add	r10, r10, #56	; 0x38
    2878:	e1a0008a 	lsl	r0, r10, #1
    287c:	eaffffb4 	b	2754 <_malloc_r+0x4c4>
    2880:	e1540007 	cmp	r4, r7
    2884:	0affff3d 	beq	2580 <_malloc_r+0x2f0>
    2888:	e59f3110 	ldr	r3, [pc, #272]	; 29a0 <_malloc_r+0x710>
    288c:	e5934008 	ldr	r4, [r3, #8]
    2890:	e5943004 	ldr	r3, [r4, #4]
    2894:	e3c33003 	bic	r3, r3, #3
    2898:	eaffff78 	b	2680 <_malloc_r+0x3f0>
    289c:	e35e0f55 	cmp	lr, #340	; 0x154
    28a0:	8a00000f 	bhi	28e4 <_malloc_r+0x654>
    28a4:	e1a0e7a5 	lsr	lr, r5, #15
    28a8:	e28ee077 	add	lr, lr, #119	; 0x77
    28ac:	e1a0108e 	lsl	r1, lr, #1
    28b0:	eafffea5 	b	234c <_malloc_r+0xbc>
    28b4:	e59c2004 	ldr	r2, [r12, #4]
    28b8:	e1a0a14a 	asr	r10, r10, #2
    28bc:	e3a01001 	mov	r1, #1
    28c0:	e1821a11 	orr	r1, r2, r1, lsl r10
    28c4:	e1a02003 	mov	r2, r3
    28c8:	e58c1004 	str	r1, [r12, #4]
    28cc:	eaffffae 	b	278c <_malloc_r+0x4fc>
    28d0:	e3a03001 	mov	r3, #1
    28d4:	e5883004 	str	r3, [r8, #4]
    28d8:	e1a04008 	mov	r4, r8
    28dc:	e3a03000 	mov	r3, #0
    28e0:	eaffff66 	b	2680 <_malloc_r+0x3f0>
    28e4:	e59f30bc 	ldr	r3, [pc, #188]	; 29a8 <_malloc_r+0x718>
    28e8:	e15e0003 	cmp	lr, r3
    28ec:	91a0e925 	lsrls	lr, r5, #18
    28f0:	928ee07c 	addls	lr, lr, #124	; 0x7c
    28f4:	91a0108e 	lslls	r1, lr, #1
    28f8:	83a010fc 	movhi	r1, #252	; 0xfc
    28fc:	83a0e07e 	movhi	lr, #126	; 0x7e
    2900:	eafffe91 	b	234c <_malloc_r+0xbc>
    2904:	e5974008 	ldr	r4, [r7, #8]
    2908:	e5943004 	ldr	r3, [r4, #4]
    290c:	e3c33003 	bic	r3, r3, #3
    2910:	eaffff5a 	b	2680 <_malloc_r+0x3f0>
    2914:	e1b01a02 	lsls	r1, r2, #20
    2918:	1affff1d 	bne	2594 <_malloc_r+0x304>
    291c:	e5972008 	ldr	r2, [r7, #8]
    2920:	e08b100a 	add	r1, r11, r10
    2924:	e3811001 	orr	r1, r1, #1
    2928:	e5821004 	str	r1, [r2, #4]
    292c:	eaffff46 	b	264c <_malloc_r+0x3bc>
    2930:	e1a00006 	mov	r0, r6
    2934:	e2841008 	add	r1, r4, #8
    2938:	ebfffdb9 	bl	2024 <_free_r>
    293c:	e59f3060 	ldr	r3, [pc, #96]	; 29a4 <_malloc_r+0x714>
    2940:	e5933004 	ldr	r3, [r3, #4]
    2944:	eaffff40 	b	264c <_malloc_r+0x3bc>
    2948:	e3530f55 	cmp	r3, #340	; 0x154
    294c:	91a0a7a2 	lsrls	r10, r2, #15
    2950:	928aa077 	addls	r10, r10, #119	; 0x77
    2954:	91a0008a 	lslls	r0, r10, #1
    2958:	9affff7d 	bls	2754 <_malloc_r+0x4c4>
    295c:	e59f1044 	ldr	r1, [pc, #68]	; 29a8 <_malloc_r+0x718>
    2960:	e1530001 	cmp	r3, r1
    2964:	91a0a922 	lsrls	r10, r2, #18
    2968:	928aa07c 	addls	r10, r10, #124	; 0x7c
    296c:	91a0008a 	lslls	r0, r10, #1
    2970:	83a000fc 	movhi	r0, #252	; 0xfc
    2974:	83a0a07e 	movhi	r10, #126	; 0x7e
    2978:	eaffff75 	b	2754 <_malloc_r+0x4c4>
    297c:	e5973004 	ldr	r3, [r7, #4]
    2980:	e1c33000 	bic	r3, r3, r0
    2984:	e5873004 	str	r3, [r7, #4]
    2988:	eaffff9d 	b	2804 <_malloc_r+0x574>
    298c:	e1a00080 	lsl	r0, r0, #1
    2990:	e1130000 	tst	r3, r0
    2994:	e2844004 	add	r4, r4, #4
    2998:	1affffa0 	bne	2820 <_malloc_r+0x590>
    299c:	eafffffa 	b	298c <_malloc_r+0x6fc>
    29a0:	00006c98 	.word	0x00006c98
    29a4:	000071e0 	.word	0x000071e0
    29a8:	00000554 	.word	0x00000554

000029ac <__malloc_lock>:
    29ac:	e12fff1e 	bx	lr

000029b0 <__malloc_unlock>:
    29b0:	e12fff1e 	bx	lr

000029b4 <_sbrk_r>:
    29b4:	e92d4038 	push	{r3, r4, r5, lr}
    29b8:	e59f4030 	ldr	r4, [pc, #48]	; 29f0 <_sbrk_r+0x3c>
    29bc:	e3a03000 	mov	r3, #0
    29c0:	e1a05000 	mov	r5, r0
    29c4:	e1a00001 	mov	r0, r1
    29c8:	e5843000 	str	r3, [r4]
    29cc:	eb000034 	bl	2aa4 <_sbrk>
    29d0:	e3700001 	cmn	r0, #1
    29d4:	0a000001 	beq	29e0 <_sbrk_r+0x2c>
    29d8:	e8bd4038 	pop	{r3, r4, r5, lr}
    29dc:	e12fff1e 	bx	lr
    29e0:	e5943000 	ldr	r3, [r4]
    29e4:	e3530000 	cmp	r3, #0
    29e8:	15853000 	strne	r3, [r5]
    29ec:	eafffff9 	b	29d8 <_sbrk_r+0x24>
    29f0:	000071dc 	.word	0x000071dc

000029f4 <__cs3_premain>:
    29f4:	e92d4008 	push	{r3, lr}
    29f8:	eb00004a 	bl	2b28 <__libc_init_array>
    29fc:	e59f3030 	ldr	r3, [pc, #48]	; 2a34 <__cs3_premain+0x40>
    2a00:	e3530000 	cmp	r3, #0
    2a04:	15930000 	ldrne	r0, [r3]
    2a08:	01a00003 	moveq	r0, r3
    2a0c:	e59f3024 	ldr	r3, [pc, #36]	; 2a38 <__cs3_premain+0x44>
    2a10:	e3530000 	cmp	r3, #0
    2a14:	15931000 	ldrne	r1, [r3]
    2a18:	01a01003 	moveq	r1, r3
    2a1c:	e3a02000 	mov	r2, #0
    2a20:	ebfff636 	bl	300 <main>
    2a24:	e59f3010 	ldr	r3, [pc, #16]	; 2a3c <__cs3_premain+0x48>
    2a28:	e3530000 	cmp	r3, #0
    2a2c:	1bfffbd2 	blne	197c <exit>
    2a30:	eafffffe 	b	2a30 <__cs3_premain+0x3c>
	...
    2a3c:	0000197c 	.word	0x0000197c

00002a40 <_exit>:
    2a40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2a44:	e3a00018 	mov	r0, #24
    2a48:	e59f1004 	ldr	r1, [pc, #4]	; 2a54 <_exit+0x14>
    2a4c:	ef123456 	svc	0x00123456
    2a50:	eafffffe 	b	2a50 <_exit+0x10>
    2a54:	00020026 	.word	0x00020026

00002a58 <_gettimeofday>:
    2a58:	e92d4038 	push	{r3, r4, r5, lr}
    2a5c:	e2505000 	subs	r5, r0, #0
    2a60:	e1a04001 	mov	r4, r1
    2a64:	0a000007 	beq	2a88 <_gettimeofday+0x30>
    2a68:	e3510000 	cmp	r1, #0
    2a6c:	1a000007 	bne	2a90 <_gettimeofday+0x38>
    2a70:	e3a00011 	mov	r0, #17
    2a74:	ef123456 	svc	0x00123456
    2a78:	e8850011 	stm	r5, {r0, r4}
    2a7c:	e1a00004 	mov	r0, r4
    2a80:	e8bd4038 	pop	{r3, r4, r5, lr}
    2a84:	e12fff1e 	bx	lr
    2a88:	e1a00005 	mov	r0, r5
    2a8c:	eafffffb 	b	2a80 <_gettimeofday+0x28>
    2a90:	eb000020 	bl	2b18 <__errno>
    2a94:	e3a03016 	mov	r3, #22
    2a98:	e5803000 	str	r3, [r0]
    2a9c:	e3e00000 	mvn	r0, #0
    2aa0:	eafffff6 	b	2a80 <_gettimeofday+0x28>

00002aa4 <_sbrk>:
    2aa4:	e92d4008 	push	{r3, lr}
    2aa8:	e59f305c 	ldr	r3, [pc, #92]	; 2b0c <_sbrk+0x68>
    2aac:	e59f105c 	ldr	r1, [pc, #92]	; 2b10 <_sbrk+0x6c>
    2ab0:	e5932000 	ldr	r2, [r3]
    2ab4:	e5913000 	ldr	r3, [r1]
    2ab8:	e3520000 	cmp	r2, #0
    2abc:	e0830000 	add	r0, r3, r0
    2ac0:	0a000002 	beq	2ad0 <_sbrk+0x2c>
    2ac4:	e0602002 	rsb	r2, r0, r2
    2ac8:	e3520000 	cmp	r2, #0
    2acc:	ba000009 	blt	2af8 <_sbrk+0x54>
    2ad0:	e04d2003 	sub	r2, sp, r3
    2ad4:	e3520000 	cmp	r2, #0
    2ad8:	ba000002 	blt	2ae8 <_sbrk+0x44>
    2adc:	e04d2000 	sub	r2, sp, r0
    2ae0:	e35200ff 	cmp	r2, #255	; 0xff
    2ae4:	da000003 	ble	2af8 <_sbrk+0x54>
    2ae8:	e5810000 	str	r0, [r1]
    2aec:	e1a00003 	mov	r0, r3
    2af0:	e8bd4008 	pop	{r3, lr}
    2af4:	e12fff1e 	bx	lr
    2af8:	eb000006 	bl	2b18 <__errno>
    2afc:	e3a0300c 	mov	r3, #12
    2b00:	e5803000 	str	r3, [r0]
    2b04:	e3e03000 	mvn	r3, #0
    2b08:	eafffff7 	b	2aec <_sbrk+0x48>
    2b0c:	000070a8 	.word	0x000070a8
    2b10:	000070ac 	.word	0x000070ac

00002b14 <__cs3_isr_interrupt>:
    2b14:	eafffffe 	b	2b14 <__cs3_isr_interrupt>

00002b18 <__errno>:
    2b18:	e59f3004 	ldr	r3, [pc, #4]	; 2b24 <__errno+0xc>
    2b1c:	e5930000 	ldr	r0, [r3]
    2b20:	e12fff1e 	bx	lr
    2b24:	00006868 	.word	0x00006868

00002b28 <__libc_init_array>:
    2b28:	e92d4070 	push	{r4, r5, r6, lr}
    2b2c:	e59f506c 	ldr	r5, [pc, #108]	; 2ba0 <__libc_init_array+0x78>
    2b30:	e59f606c 	ldr	r6, [pc, #108]	; 2ba4 <__libc_init_array+0x7c>
    2b34:	e0656006 	rsb	r6, r5, r6
    2b38:	e1b06146 	asrs	r6, r6, #2
    2b3c:	12455004 	subne	r5, r5, #4
    2b40:	13a04000 	movne	r4, #0
    2b44:	0a000005 	beq	2b60 <__libc_init_array+0x38>
    2b48:	e5b53004 	ldr	r3, [r5, #4]!
    2b4c:	e2844001 	add	r4, r4, #1
    2b50:	e1a0e00f 	mov	lr, pc
    2b54:	e12fff13 	bx	r3
    2b58:	e1560004 	cmp	r6, r4
    2b5c:	1afffff9 	bne	2b48 <__libc_init_array+0x20>
    2b60:	e59f5040 	ldr	r5, [pc, #64]	; 2ba8 <__libc_init_array+0x80>
    2b64:	e59f6040 	ldr	r6, [pc, #64]	; 2bac <__libc_init_array+0x84>
    2b68:	e0656006 	rsb	r6, r5, r6
    2b6c:	eb000f21 	bl	67f8 <_init>
    2b70:	e1b06146 	asrs	r6, r6, #2
    2b74:	12455004 	subne	r5, r5, #4
    2b78:	13a04000 	movne	r4, #0
    2b7c:	0a000005 	beq	2b98 <__libc_init_array+0x70>
    2b80:	e5b53004 	ldr	r3, [r5, #4]!
    2b84:	e2844001 	add	r4, r4, #1
    2b88:	e1a0e00f 	mov	lr, pc
    2b8c:	e12fff13 	bx	r3
    2b90:	e1560004 	cmp	r6, r4
    2b94:	1afffff9 	bne	2b80 <__libc_init_array+0x58>
    2b98:	e8bd4070 	pop	{r4, r5, r6, lr}
    2b9c:	e12fff1e 	bx	lr
    2ba0:	00006810 	.word	0x00006810
    2ba4:	00006810 	.word	0x00006810
    2ba8:	00006810 	.word	0x00006810
    2bac:	00006818 	.word	0x00006818

Disassembly of section .rodata:

00002bb4 <number>:
    2bb4:	ffffffff 00000000 00000000 00000000     ................
    2bc4:	00000000 ffff0000 ffffffff 00000000     ................
	...
    2be4:	ffff0000 00000000 00000000 00000000     ................
	...
    2c08:	ffff0000 ffffffff ffffffff 00000000     ................
	...
    2c20:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2c3c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2c54:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2c70:	ffffffff ffffffff ffffffff 00000000     ................
	...
    2c88:	ffff0000 ffffffff ffffffff ffff0000     ................
	...
    2ca4:	ffffffff ffffffff ffff0000 0000ffff     ................
	...
    2cbc:	ffff0000 ffffffff ffff0000 ffffffff     ................
	...
    2cd8:	ffffffff ffff0000 ffffffff 0000ffff     ................
	...
    2cf0:	ffff0000 ffff0000 ffffffff ffffffff     ................
	...
    2d0c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    2d24:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2d40:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2d58:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2d74:	ffff0000 ffffffff ffffffff 00000000     ................
	...
    2da0:	ffff0000 00000000 00000000 00000000     ................
	...
    2db8:	ffff0000 ffffffff 00000000 00000000     ................
	...
    2dd0:	ffff0000 ffffffff ffffffff ffffffff     ................
    2de0:	00000000 ffff0000 ffffffff ffffffff     ................
    2df0:	ffffffff ffffffff 00000000 00000000     ................
    2e00:	ffffffff ffffffff ffffffff ffffffff     ................
	...
    2e18:	ffff0000 ffffffff ffffffff ffffffff     ................
    2e28:	0000ffff 00000000 00000000 ffffffff     ................
    2e38:	ffffffff ffffffff ffffffff 00000000     ................
    2e48:	00000000 ffff0000 ffffffff ffffffff     ................
    2e58:	ffffffff ffffffff 0000ffff 00000000     ................
    2e68:	ffffffff ffffffff ffffffff ffffffff     ................
    2e78:	ffffffff 00000000 ffff0000 ffffffff     ................
    2e88:	ffffffff ffffffff ffffffff 0000ffff     ................
    2e98:	00000000 ffffffff ffffffff ffffffff     ................
    2ea8:	ffffffff ffffffff 00000000 ffff0000     ................
    2eb8:	ffffffff ffffffff ffffffff ffffffff     ................
    2ec8:	0000ffff 00000000 ffffffff ffffffff     ................
    2ed8:	ffffffff ffffffff ffffffff 00000000     ................
    2ee8:	ffff0000 ffffffff ffffffff ffffffff     ................
    2ef8:	ffffffff 0000ffff 00000000 ffffffff     ................
    2f08:	ffffffff ffffffff ffffffff ffffffff     ................
    2f18:	00000000 ffff0000 ffffffff ffffffff     ................
    2f28:	ffffffff ffffffff 0000ffff 00000000     ................
    2f38:	ffffffff ffffffff ffffffff ffffffff     ................
    2f48:	ffffffff 00000000 ffff0000 ffffffff     ................
    2f58:	ffffffff ffffffff ffffffff 0000ffff     ................
    2f68:	00000000 ffffffff ffffffff ffffffff     ................
    2f78:	ffffffff ffffffff 00000000 ffff0000     ................
    2f88:	ffffffff ffffffff ffffffff ffffffff     ................
    2f98:	0000ffff 00000000 ffffffff ffffffff     ................
    2fa8:	ffffffff ffffffff 00000000 00000000     ................
    2fb8:	00000000 ffff0000 ffffffff ffffffff     ................
    2fc8:	0000ffff 00000000 00000000 00000000     ................
    2fd8:	ffffffff ffffffff ffffffff 00000000     ................
	...
    2ff0:	ffff0000 ffffffff 0000ffff 00000000     ................
	...
    3010:	0000ffff 00000000 00000000 00000000     ................
	...
    304c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3064:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3080:	ffffffff ffffffff ffffffff 0000ffff     ................
    3090:	00000000 ffffffff ffffffff ffffffff     ................
    30a0:	ffffffff ffffffff 00000000 ffff0000     ................
    30b0:	ffffffff ffffffff ffffffff ffffffff     ................
    30c0:	0000ffff 00000000 ffffffff ffffffff     ................
    30d0:	ffffffff ffffffff ffffffff 00000000     ................
    30e0:	ffff0000 00000000 00000000 00000000     ................
	...
    312c:	ffff0000 00000000 ffff0000 ffffffff     ................
    313c:	ffffffff ffffffff ffffffff 0000ffff     ................
    314c:	00000000 ffffffff ffffffff ffffffff     ................
    315c:	ffffffff ffffffff 00000000 ffff0000     ................
    316c:	ffffffff ffffffff ffffffff ffffffff     ................
    317c:	0000ffff 00000000 ffffffff ffffffff     ................
    318c:	ffffffff ffffffff ffffffff 00000000     ................
    319c:	ffff0000 ffffffff ffffffff ffffffff     ................
    31ac:	ffffffff 0000ffff 00000000 ffffffff     ................
    31bc:	ffffffff ffffffff ffffffff ffffffff     ................
	...
    3218:	ffff0000 00000000 00000000 00000000     ................
	...
    3230:	ffff0000 00000000 00000000 00000000     ................
	...
    326c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3288:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    32a0:	ffff0000 ffffffff ffffffff ffffffff     ................
    32b0:	00000000 ffff0000 ffffffff ffffffff     ................
    32c0:	ffffffff ffffffff 0000ffff 00000000     ................
    32d0:	ffffffff ffffffff ffffffff ffffffff     ................
    32e0:	ffffffff 00000000 ffff0000 ffffffff     ................
    32f0:	ffffffff ffffffff ffffffff 0000ffff     ................
    3300:	00000000 ffffffff 0000ffff 00000000     ................
	...
    331c:	ffff0000 ffffffff 00000000 00000000     ................
	...
    3334:	ffff0000 ffffffff 0000ffff 00000000     ................
	...
    3350:	ffff0000 ffffffff ffffffff ffffffff     ................
    3360:	ffffffff 0000ffff 00000000 ffffffff     ................
    3370:	ffffffff ffffffff ffffffff ffffffff     ................
    3380:	00000000 ffff0000 ffffffff ffffffff     ................
    3390:	ffffffff ffffffff 0000ffff 00000000     ................
    33a0:	00000000 ffff0000 ffffffff ffffffff     ................
    33b0:	ffffffff 00000000 00000000 00000000     ................
    33c0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    33d8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3420:	ffff0000 00000000 00000000 00000000     ................
	...
    3438:	ffff0000 00000000 ffff0000 ffffffff     ................
    3448:	ffffffff ffffffff 00000000 00000000     ................
    3458:	00000000 ffffffff ffffffff ffffffff     ................
    3468:	0000ffff 00000000 00000000 ffff0000     ................
    3478:	ffffffff ffffffff ffffffff 00000000     ................
	...
    3490:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    34a8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    34c4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    34dc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    34f8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3510:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3574:	ffffffff ffffffff ffffffff ffffffff     ................
    3584:	ffffffff 00000000 ffff0000 ffffffff     ................
    3594:	ffffffff ffffffff ffffffff 0000ffff     ................
    35a4:	00000000 ffffffff ffffffff ffffffff     ................
    35b4:	ffffffff ffffffff 00000000 ffff0000     ................
    35c4:	ffffffff ffffffff ffffffff ffffffff     ................
    35d4:	0000ffff 00000000 ffffffff ffffffff     ................
    35e4:	ffffffff ffffffff ffffffff 00000000     ................
    35f4:	ffff0000 ffffffff ffffffff ffffffff     ................
    3604:	ffffffff 0000ffff 00000000 ffffffff     ................
    3614:	ffffffff ffffffff ffffffff ffffffff     ................
    3624:	00000000 ffff0000 ffffffff ffffffff     ................
    3634:	ffffffff ffffffff 0000ffff 00000000     ................
    3644:	ffffffff ffffffff ffffffff ffffffff     ................
    3654:	ffffffff 00000000 00000000 00000000     ................
	...
    36b0:	ffff0000 ffffffff ffffffff ffffffff     ................
    36c0:	ffffffff 0000ffff 00000000 ffffffff     ................
    36d0:	ffffffff ffffffff ffffffff ffffffff     ................
    36e0:	00000000 ffff0000 ffffffff ffffffff     ................
    36f0:	ffffffff ffffffff 0000ffff 00000000     ................
    3700:	ffffffff ffffffff ffffffff ffffffff     ................
    3710:	ffffffff 00000000 ffff0000 ffffffff     ................
    3720:	ffffffff ffffffff ffffffff 0000ffff     ................
    3730:	00000000 ffffffff ffffffff ffffffff     ................
    3740:	ffffffff ffffffff 00000000 00000000     ................
	...
    3760:	0000ffff 00000000 00000000 00000000     ................
	...
    3794:	ffff0000 ffffffff ffffffff ffffffff     ................
    37a4:	ffffffff 0000ffff 00000000 ffffffff     ................
    37b4:	ffffffff ffffffff ffffffff ffffffff     ................
    37c4:	00000000 ffff0000 ffffffff ffffffff     ................
    37d4:	ffffffff ffffffff 0000ffff 00000000     ................
    37e4:	00000000 ffff0000 ffffffff ffffffff     ................
    37f4:	ffffffff 00000000 00000000 00000000     ................
    3804:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    381c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3864:	ffff0000 00000000 00000000 00000000     ................
	...
    387c:	ffff0000 0000ffff 00000000 00000000     ................
	...
    38d4:	ffffffff ffffffff ffffffff ffffffff     ................
    38e4:	ffffffff 00000000 ffff0000 ffffffff     ................
    38f4:	ffffffff ffffffff ffffffff 0000ffff     ................
    3904:	00000000 ffffffff ffffffff ffffffff     ................
    3914:	ffffffff ffffffff 00000000 ffff0000     ................
    3924:	ffffffff ffffffff ffffffff ffffffff     ................
    3934:	0000ffff 00000000 ffffffff ffffffff     ................
    3944:	ffffffff ffffffff ffffffff 00000000     ................
    3954:	ffff0000 ffffffff ffffffff ffffffff     ................
    3964:	ffffffff 0000ffff 00000000 00000000     ................
	...
    3980:	ffff0000 00000000 00000000 00000000     ................
	...
    39bc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    39d8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    39f0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3a0c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3a24:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3a40:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3a88:	0000ffff 00000000 00000000 00000000     ................
	...
    3aa0:	0000ffff 00000000 00000000 00000000     ................
	...
    3af0:	ffffffff ffffffff ffffffff ffffffff     ................
    3b00:	ffffffff 00000000 ffff0000 ffffffff     ................
    3b10:	ffffffff ffffffff ffffffff 0000ffff     ................
    3b20:	00000000 ffffffff ffffffff ffffffff     ................
    3b30:	ffffffff ffffffff 00000000 ffff0000     ................
    3b40:	ffffffff ffffffff ffffffff ffffffff     ................
    3b50:	0000ffff 00000000 ffffffff ffffffff     ................
    3b60:	ffffffff ffffffff ffffffff 00000000     ................
    3b70:	ffff0000 ffffffff ffffffff ffffffff     ................
    3b80:	ffffffff 0000ffff 00000000 ffffffff     ................
    3b90:	ffffffff ffffffff ffffffff ffffffff     ................
    3ba0:	00000000 ffff0000 ffffffff ffffffff     ................
    3bb0:	ffffffff ffffffff 0000ffff 00000000     ................
    3bc0:	ffffffff ffffffff ffffffff ffffffff     ................
    3bd0:	ffffffff 00000000 ffff0000 ffffffff     ................
    3be0:	ffffffff ffffffff ffffffff 0000ffff     ................
    3bf0:	00000000 ffffffff ffffffff ffffffff     ................
    3c00:	ffffffff ffffffff 00000000 ffff0000     ................
    3c10:	ffffffff ffffffff ffffffff ffffffff     ................
    3c20:	0000ffff 00000000 ffffffff ffffffff     ................
    3c30:	ffffffff ffffffff ffffffff 00000000     ................
    3c40:	ffff0000 ffffffff ffffffff ffffffff     ................
    3c50:	ffffffff 0000ffff 00000000 ffffffff     ................
    3c60:	ffffffff ffffffff ffffffff ffffffff     ................
    3c70:	00000000 ffff0000 ffffffff ffffffff     ................
    3c80:	ffffffff ffffffff 0000ffff 00000000     ................
    3c90:	ffffffff ffffffff ffffffff ffffffff     ................
    3ca0:	ffffffff 00000000 ffff0000 ffffffff     ................
    3cb0:	ffffffff ffffffff ffffffff 0000ffff     ................
    3cc0:	00000000 0000ffff 00000000 00000000     ................
	...
    3cdc:	0000ffff 00000000 00000000 00000000     ................
	...
    3d18:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3d30:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3d4c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3d64:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3d80:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3d98:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3dc8:	0000ffff 00000000 00000000 00000000     ................
	...
    3de0:	0000ffff 00000000 00000000 00000000     ................
	...
    3e00:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3e1c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3e34:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3e50:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3e68:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3e84:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3ecc:	0000ffff 00000000 00000000 00000000     ................
	...
    3ee4:	ffffffff 00000000 00000000 00000000     ................
	...
    3efc:	ffff0000 00000000 00000000 00000000     ................
	...
    3f38:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3f54:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3f6c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3f88:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3fa0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3fbc:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4004:	0000ffff 00000000 00000000 00000000     ................
	...
    401c:	ffff0000 ffffffff ffffffff ffffffff     ................
    402c:	ffffffff 0000ffff 00000000 ffffffff     ................
    403c:	ffffffff ffffffff ffffffff ffffffff     ................
    404c:	00000000 ffff0000 ffffffff ffffffff     ................
    405c:	ffffffff ffffffff 0000ffff 00000000     ................
    406c:	ffffffff ffffffff ffffffff ffffffff     ................
    407c:	ffffffff 00000000 ffff0000 ffffffff     ................
    408c:	ffffffff ffffffff ffffffff 0000ffff     ................
    409c:	00000000 ffffffff ffffffff ffffffff     ................
    40ac:	ffffffff ffffffff 00000000 00000000     ................
	...
    4104:	ffff0000                                ....

00004108 <start>:
    4108:	0000ffff 00000000 00000000 00000000     ................
	...
    4120:	0000ffff 00000000 00000000 00000000     ................
	...
    415c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4174:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4190:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    41a8:	ffff0000 ffffffff ffffffff ffffffff     ................
    41b8:	ffffffff 0000ffff 00000000 ffffffff     ................
    41c8:	ffffffff ffffffff ffffffff ffffffff     ................
    41d8:	00000000 ffff0000 ffffffff ffffffff     ................
    41e8:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    4208:	ffff0000 00000000 00000000 00000000     ................
	...
    4224:	ffff0000 00000000 00000000 00000000     ................
	...
    4240:	ffffffff ffffffff ffffffff ffffffff     ................
    4250:	ffffffff 00000000 ffff0000 ffffffff     ................
    4260:	ffffffff ffffffff ffffffff 0000ffff     ................
    4270:	00000000 ffffffff ffffffff ffffffff     ................
    4280:	ffffffff ffffffff 00000000 00000000     ................
    4290:	00000000 ffffffff ffffffff ffffffff     ................
    42a0:	0000ffff 00000000 00000000 ffff0000     ................
    42b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
    42c8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4310:	0000ffff 00000000 00000000 00000000     ................
	...
    4328:	0000ffff 00000000 00000000 00000000     ................
	...
    4378:	ffffffff ffffffff 0000ffff 00000000     ................
    4388:	ffffffff ffffffff ffffffff ffffffff     ................
    4398:	ffffffff 00000000 ffff0000 ffffffff     ................
    43a8:	ffffffff ffffffff ffffffff 0000ffff     ................
    43b8:	00000000 ffffffff ffffffff ffffffff     ................
    43c8:	ffffffff ffffffff 00000000 ffff0000     ................
    43d8:	ffffffff ffffffff ffffffff ffffffff     ................
    43e8:	0000ffff 00000000 ffffffff ffffffff     ................
    43f8:	ffffffff ffffffff ffffffff 00000000     ................
    4408:	ffff0000 ffffffff ffffffff ffffffff     ................
    4418:	ffffffff 0000ffff 00000000 ffffffff     ................
    4428:	ffffffff ffffffff ffffffff ffffffff     ................
    4438:	00000000 ffff0000 ffffffff ffffffff     ................
    4448:	ffffffff ffffffff 0000ffff 00000000     ................
    4458:	ffffffff ffffffff ffffffff ffffffff     ................
    4468:	ffffffff 00000000 ffff0000 ffffffff     ................
    4478:	ffffffff ffffffff ffffffff 0000ffff     ................
    4488:	00000000 ffffffff ffffffff ffffffff     ................
    4498:	ffffffff ffffffff 00000000 ffff0000     ................
    44a8:	ffffffff ffffffff ffffffff ffffffff     ................
    44b8:	0000ffff 00000000 ffffffff ffffffff     ................
    44c8:	ffffffff ffffffff ffffffff 00000000     ................
    44d8:	ffff0000 ffffffff ffffffff ffffffff     ................
    44e8:	ffffffff 0000ffff 00000000 ffffffff     ................
    44f8:	ffffffff ffffffff ffffffff ffffffff     ................
    4508:	00000000 ffff0000 ffffffff ffffffff     ................
    4518:	ffffffff ffffffff 0000ffff 00000000     ................
    4528:	ffffffff ffffffff ffffffff ffffffff     ................
    4538:	ffffffff 00000000 ffff0000 ffffffff     ................
    4548:	ffffffff 0000ffff 00000000 00000000     ................
	...
    4564:	0000ffff 00000000 00000000 00000000     ................
	...
    45a0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    45b8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    45d4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    45ec:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4608:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4620:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4688:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    46a4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    46bc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    46d8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    46f0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    470c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4724:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4740:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4758:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4784:	ffff0000 00000000 00000000 00000000     ................
	...
    47c0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    47dc:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    47f4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4810:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4828:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4844:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4888:	ffff0000 00000000 00000000 00000000     ................
	...
    48ac:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    48c4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    48e0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    48f8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4914:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    492c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4948:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4960:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    497c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    49dc:	ffff0000 ffffffff ffffffff 00000000     ................
    49ec:	ffff0000 ffffffff ffffffff ffffffff     ................
    49fc:	ffffffff 0000ffff 00000000 ffffffff     ................
    4a0c:	ffffffff ffffffff ffffffff ffffffff     ................
    4a1c:	00000000 ffff0000 ffffffff ffffffff     ................
    4a2c:	ffffffff ffffffff 0000ffff 00000000     ................
    4a3c:	ffffffff ffffffff ffffffff ffffffff     ................
    4a4c:	ffffffff 00000000 ffff0000 ffffffff     ................
    4a5c:	ffffffff ffffffff ffffffff 0000ffff     ................
    4a6c:	00000000 ffffffff ffffffff ffffffff     ................
    4a7c:	ffffffff ffffffff 00000000 ffff0000     ................
    4a8c:	ffffffff ffffffff ffffffff ffffffff     ................
    4a9c:	0000ffff 00000000 ffffffff ffffffff     ................
    4aac:	ffffffff ffffffff ffffffff 00000000     ................
    4abc:	ffff0000 ffffffff ffffffff ffffffff     ................
    4acc:	ffffffff 0000ffff 00000000 ffffffff     ................
    4adc:	ffffffff ffffffff ffffffff ffffffff     ................
    4aec:	00000000 ffff0000 ffffffff ffffffff     ................
    4afc:	ffffffff ffffffff 0000ffff 00000000     ................
    4b0c:	ffffffff ffffffff ffffffff ffffffff     ................
    4b1c:	ffffffff 00000000 ffff0000 ffffffff     ................
    4b2c:	ffffffff ffffffff ffffffff 0000ffff     ................
    4b3c:	00000000 ffffffff ffffffff ffffffff     ................
    4b4c:	ffffffff ffffffff 00000000 ffff0000     ................
    4b5c:	ffffffff ffffffff ffffffff ffffffff     ................
    4b6c:	0000ffff 00000000 ffffffff ffffffff     ................
    4b7c:	ffffffff ffffffff ffffffff 00000000     ................
    4b8c:	ffff0000 ffffffff ffffffff ffffffff     ................
    4b9c:	ffffffff 0000ffff 00000000 ffffffff     ................
    4bac:	ffffffff 0000ffff                       ........

00004bb4 <go>:
    4bb4:	0000ffff 00000000 00000000 00000000     ................
	...
    4bcc:	0000ffff 00000000 00000000 00000000     ................
	...
    4c08:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4c20:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4c3c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4c54:	ffff0000 ffffffff ffffffff ffffffff     ................
    4c64:	ffffffff 0000ffff 00000000 ffffffff     ................
    4c74:	ffffffff ffffffff ffffffff ffffffff     ................
    4c84:	00000000 ffff0000 ffffffff ffffffff     ................
    4c94:	ffffffff ffffffff 0000ffff 00000000     ................
    4ca4:	ffffffff ffffffff 00000000 00000000     ................
	...
    4cbc:	ffff0000 ffffffff 0000ffff 00000000     ................
	...
    4cd8:	ffffffff ffffffff 00000000 00000000     ................
	...
    4cf0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4d0c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4d24:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4d40:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4d58:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4d74:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4dbc:	0000ffff 00000000 00000000 00000000     ................
	...
    4dd4:	ffffffff 0000ffff 00000000 00000000     ................
	...
    4dec:	ffffffff 0000ffff 00000000 00000000     ................
	...
    4e08:	ffffffff 00000000 00000000 00000000     ................
	...
    4e20:	ffff0000 0000ffff 00000000 ffffffff     ................
    4e30:	ffffffff 0000ffff 00000000 0000ffff     ................
    4e40:	00000000 ffffffff ffffffff ffffffff     ................
    4e50:	0000ffff 00000000 00000000 ffff0000     ................
    4e60:	ffffffff ffffffff ffffffff 00000000     ................
	...
    4e78:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4e90:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4eac:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4ec4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4ee0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4ef8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4f14:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4f2c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4f48:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4f60:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4f7c:	ffffffff ffffffff ffffffff 0000ffff     ................
    4f8c:	00000000 0000ffff 00000000 ffffffff     ................
    4f9c:	ffffffff 0000ffff 00000000 ffffffff     ................
	...
    4fc0:	ffff0000 0000ffff 00000000 00000000     ................
	...
    4fdc:	ffffffff 0000ffff 00000000 00000000     ................
	...
    4ff4:	ffffffff                                ....

00004ff8 <win>:
    4ff8:	00000000 ffff0000 ffffffff ffffffff     ................
    5008:	ffffffff 00000000 00000000 00000000     ................
    5018:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5030:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    504c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5064:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    5080:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5098:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    50b4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    50cc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    50e8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5100:	ffff0000 0000ffff 00000000 ffffffff     ................
	...
    511c:	ffffffff 00000000 ffff0000 0000ffff     ................
	...
    5134:	ffff0000 0000ffff 00000000 ffffffff     ................
	...
    5150:	ffffffff 00000000 ffff0000 0000ffff     ................
	...
    5168:	ffff0000 0000ffff 00000000 ffffffff     ................
	...
    5184:	ffffffff 00000000 ffff0000 0000ffff     ................
	...
    519c:	ffff0000 0000ffff 00000000 ffffffff     ................
	...
    51b8:	0000ffff 00000000 00000000 0000ffff     ................
	...
    51e4:	ffff0000 00000000 00000000 ffff0000     ................
	...
    51fc:	ffff0000 ffffffff 00000000 ffff0000     ................
    520c:	ffffffff 00000000 ffff0000 ffffffff     ................
    521c:	ffffffff 00000000 00000000 00000000     ................
    522c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    5248:	ffffffff ffffffff ffffffff 00000000     ................
	...
    5260:	ffff0000 ffffffff ffffffff ffffffff     ................
    5270:	0000ffff 00000000 ffffffff ffffffff     ................
    5280:	ffffffff ffffffff ffffffff 00000000     ................
    5290:	ffff0000 ffffffff ffffffff ffffffff     ................
    52a0:	ffffffff 0000ffff 00000000 ffffffff     ................
    52b0:	ffffffff ffffffff ffffffff ffffffff     ................
    52c0:	00000000 ffff0000 ffffffff ffffffff     ................
    52d0:	ffffffff ffffffff 0000ffff 00000000     ................
    52e0:	ffffffff ffffffff ffffffff ffffffff     ................
    52f0:	ffffffff 00000000 ffff0000 ffffffff     ................
    5300:	ffffffff ffffffff ffffffff 0000ffff     ................
    5310:	00000000 ffffffff ffffffff ffffffff     ................
    5320:	ffffffff ffffffff 00000000 ffff0000     ................
    5330:	ffffffff ffffffff ffffffff ffffffff     ................
    5340:	0000ffff 00000000 ffffffff ffffffff     ................
    5350:	ffffffff ffffffff ffffffff 00000000     ................
    5360:	ffff0000 ffffffff ffffffff ffffffff     ................
    5370:	ffffffff 0000ffff 00000000 ffffffff     ................
    5380:	ffffffff ffffffff ffffffff ffffffff     ................
    5390:	00000000 ffff0000 ffffffff ffffffff     ................
    53a0:	ffffffff ffffffff 0000ffff 00000000     ................
    53b0:	ffffffff ffffffff ffffffff ffffffff     ................
    53c0:	ffffffff 00000000 ffff0000 ffffffff     ................
    53d0:	ffffffff ffffffff ffffffff 0000ffff     ................
    53e0:	00000000 ffffffff ffffffff ffffffff     ................
    53f0:	ffffffff 00000000 00000000 00000000     ................
    5400:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    541c:	ffffffff ffffffff ffffffff 00000000     ................
	...
    5434:	ffff0000 ffffffff 00000000 ffff0000     ................
    5444:	ffffffff ffffffff ffffffff 00000000     ................
	...
    545c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5478:	ffffffff ffffffff ffffffff 00000000     ................
	...
    5490:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    54ac:	ffff0000 ffffffff ffffffff 00000000     ................
	...
    54c8:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    54e4:	ffffffff ffffffff 00000000 00000000     ................
    54f4:	00000000 0000ffff ffff0000 ffffffff     ................
    5504:	0000ffff 00000000 00000000 ffff0000     ................
    5514:	00000000 ffff0000 ffffffff 00000000     ................
	...
    552c:	ffffffff 00000000 ffffffff 0000ffff     ................
	...
    5544:	ffff0000 0000ffff 00000000 ffffffff     ................
	...
    5560:	ffffffff 0000ffff ffff0000 0000ffff     ................
	...
    5578:	ffff0000 ffffffff 00000000 ffff0000     ................
	...
    5594:	ffffffff ffffffff 00000000 0000ffff     ................
	...
    55ac:	ffff0000 ffffffff 0000ffff 00000000     ................
	...
    55c8:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    55e0:	ffff0000 ffffffff ffffffff 00000000     ................
	...
    55fc:	ffffffff ffffffff ffffffff 00000000     ................
	...
    5614:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    5630:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5648:	ffff0000 ffffffff ffffffff ffffffff     ................
	...

00005660 <lose>:
    5660:	00000000 ffff0000 ffffffff ffffffff     ................
    5670:	ffffffff ffffffff 0000ffff 00000000     ................
    5680:	ffffffff ffffffff ffffffff ffffffff     ................
    5690:	ffffffff 00000000 ffff0000 ffffffff     ................
    56a0:	ffffffff ffffffff ffffffff 0000ffff     ................
    56b0:	00000000 ffffffff ffffffff ffffffff     ................
    56c0:	ffffffff ffffffff 00000000 ffff0000     ................
    56d0:	ffffffff ffffffff ffffffff ffffffff     ................
    56e0:	0000ffff 00000000 ffffffff ffffffff     ................
    56f0:	ffffffff ffffffff ffffffff 00000000     ................
    5700:	ffff0000 ffffffff ffffffff ffffffff     ................
    5710:	ffffffff 0000ffff 00000000 ffffffff     ................
    5720:	ffffffff ffffffff ffffffff ffffffff     ................
    5730:	00000000 ffff0000 ffffffff ffffffff     ................
    5740:	ffffffff ffffffff 0000ffff 00000000     ................
    5750:	ffffffff ffffffff ffffffff ffffffff     ................
    5760:	ffffffff 00000000 ffff0000 ffffffff     ................
    5770:	ffffffff ffffffff ffffffff 0000ffff     ................
    5780:	00000000 ffffffff ffffffff ffffffff     ................
    5790:	ffffffff ffffffff 00000000 ffff0000     ................
    57a0:	ffffffff ffffffff ffffffff ffffffff     ................
    57b0:	0000ffff 00000000 ffffffff ffffffff     ................
    57c0:	ffffffff ffffffff ffffffff 00000000     ................
    57d0:	ffff0000 ffffffff ffffffff ffffffff     ................
    57e0:	ffffffff 0000ffff 00000000 ffffffff     ................
    57f0:	ffffffff ffffffff ffffffff ffffffff     ................
    5800:	00000000 ffff0000 ffffffff ffffffff     ................
    5810:	ffffffff ffffffff 0000ffff 00000000     ................
    5820:	ffffffff ffffffff ffffffff ffffffff     ................
    5830:	ffffffff 00000000 00000000 00000000     ................
	...
    5880:	ffff0000 0000ffff 00000000 00000000     ................
	...
    5898:	ffffffff 0000ffff 00000000 00000000     ................
	...
    58b4:	ffffffff 00000000 00000000 00000000     ................
	...
    58cc:	ffff0000 0000ffff 00000000 ffffffff     ................
    58dc:	ffffffff 0000ffff 00000000 0000ffff     ................
    58ec:	00000000 ffffffff ffffffff ffffffff     ................
    58fc:	0000ffff 00000000 00000000 ffff0000     ................
    590c:	ffffffff ffffffff ffffffff 00000000     ................
	...
    5924:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    593c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    5958:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5970:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    598c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    59a4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    59c0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    59d8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    59f4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5a0c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    5a28:	ffffffff ffffffff ffffffff 0000ffff     ................
    5a38:	00000000 0000ffff 00000000 ffffffff     ................
    5a48:	ffffffff 0000ffff 00000000 ffffffff     ................
	...
    5a6c:	ffff0000 0000ffff 00000000 00000000     ................
	...
    5a88:	ffffffff 0000ffff 00000000 00000000     ................
	...
    5aa0:	ffffffff 0000ffff 00000000 00000000     ................
	...
    5abc:	0000ffff 00000000 00000000 00000000     ................
	...
    5af8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5b10:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    5b2c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5b44:	ffff0000 ffffffff ffffffff ffffffff     ................
    5b54:	ffffffff 0000ffff 00000000 ffffffff     ................
    5b64:	ffffffff ffffffff ffffffff ffffffff     ................
    5b74:	00000000 ffff0000 ffffffff ffffffff     ................
    5b84:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    5ba4:	ffff0000 00000000 00000000 00000000     ................
	...
    5bc0:	ffff0000 00000000 00000000 00000000     ................
	...
    5bdc:	ffffffff ffffffff ffffffff ffffffff     ................
    5bec:	ffffffff 00000000 ffff0000 ffffffff     ................
    5bfc:	ffffffff ffffffff ffffffff 0000ffff     ................
    5c0c:	00000000 ffffffff ffffffff ffffffff     ................
    5c1c:	ffffffff ffffffff 00000000 00000000     ................
    5c2c:	00000000 ffffffff ffffffff ffffffff     ................
    5c3c:	0000ffff 00000000 00000000 ffff0000     ................
    5c4c:	ffffffff ffffffff ffffffff 00000000     ................
	...
    5c64:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5cac:	0000ffff 00000000 00000000 00000000     ................
	...
    5cc4:	0000ffff 00000000 00000000 00000000     ................
	...
    5d18:	ffff0000 ffffffff ffffffff ffffffff     ................
    5d28:	ffffffff 0000ffff 00000000 ffffffff     ................
    5d38:	ffffffff ffffffff ffffffff ffffffff     ................
    5d48:	00000000 ffff0000 ffffffff ffffffff     ................
    5d58:	ffffffff ffffffff 0000ffff 00000000     ................
    5d68:	ffffffff ffffffff ffffffff ffffffff     ................
    5d78:	ffffffff 00000000 ffff0000 ffffffff     ................
    5d88:	ffffffff ffffffff ffffffff 0000ffff     ................
    5d98:	00000000 ffffffff ffffffff ffffffff     ................
    5da8:	ffffffff ffffffff 00000000 00000000     ................
    5db8:	00000000 ffff0000 ffffffff ffffffff     ................
    5dc8:	0000ffff 00000000 00000000 00000000     ................
    5dd8:	ffffffff ffffffff ffffffff 00000000     ................
	...
    5df0:	ffff0000 ffffffff ffffffff 0000ffff     ................
    5e00:	00000000 ffffffff ffffffff ffffffff     ................
    5e10:	ffffffff ffffffff 00000000 ffff0000     ................
    5e20:	ffffffff ffffffff ffffffff ffffffff     ................
    5e30:	0000ffff 00000000 ffffffff ffffffff     ................
    5e40:	ffffffff ffffffff ffffffff 00000000     ................
    5e50:	ffff0000 ffffffff ffffffff ffffffff     ................
    5e60:	ffffffff 0000ffff 00000000 ffffffff     ................
    5e70:	ffffffff ffffffff ffffffff ffffffff     ................
    5e80:	00000000 ffff0000 ffffffff ffffffff     ................
    5e90:	ffffffff ffffffff 0000ffff 00000000     ................
	...

00005ee8 <draw>:
	...
    5f00:	0000ffff 00000000 00000000 00000000     ................
	...
    5f3c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5f54:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    5f70:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5f88:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    5fa4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5fbc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    5fd8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    5ff0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    600c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6024:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6040:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6058:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6074:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    608c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    60a8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6108:	0000ffff 00000000 00000000 00000000     ................
	...
    6120:	ffff0000 00000000 00000000 00000000     ................
	...
    615c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6178:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6190:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    61ac:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    61c4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    61e0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6224:	ffff0000 00000000 00000000 00000000     ................
	...
    6248:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6260:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    627c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6294:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    62b0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    62c8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    62e4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    62fc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6318:	ffffffff ffffffff ffffffff 0000ffff     ................
    6328:	00000000 0000ffff 00000000 00000000     ................
	...
    6344:	0000ffff 00000000 00000000 00000000     ................
	...
    6380:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6398:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    63b4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    63cc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    63e8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6400:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6468:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6484:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    649c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    64b8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    64d0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    64ec:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6504:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6520:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6538:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6554:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    656c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6588:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    65a0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    65bc:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    65d4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    65f0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    6608:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6624:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    663c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    6658:	ffffffff 00000000 ffff0000 0000ffff     ................
	...
    6670:	ffff0000 0000ffff 00000000 ffffffff     ................
	...
    668c:	ffffffff 00000000 ffff0000 0000ffff     ................
	...
    66a4:	ffff0000 0000ffff 00000000 ffffffff     ................
	...
    66c0:	ffffffff 00000000 ffff0000 0000ffff     ................
	...
    66d8:	ffff0000 0000ffff 00000000 ffffffff     ................
	...
    66f4:	ffffffff 00000000 ffff0000 0000ffff     ................
	...
    670c:	ffff0000 00000000 00000000 ffff0000     ................
	...
    673c:	0000ffff 00000000 00000000 0000ffff     ................
	...
    6754:	ffffffff 0000ffff 00000000 ffffffff     ................
    6764:	0000ffff 00000000 ffffffff              ............

00006770 <spike>:
    6770:	ffffffff 0000ffff ffff0000 ffffffff     ................
    6780:	ffffffff 0000ffff ffff0000 ffffffff     ................
    6790:	ffffffff 00000000 00000000 ffffffff     ................
    67a0:	ffffffff 00000000 00000000 ffffffff     ................
    67b0:	0000ffff 00000000 00000000 ffff0000     ................
    67c0:	0000ffff 00000000 00000000 ffff0000     ................
	...

000067f0 <_global_impure_ptr>:
    67f0:	00006870 00000043                       ph..C...

000067f8 <_init>:
    67f8:	e1a0c00d 	mov	r12, sp
    67fc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    6800:	e24cb004 	sub	r11, r12, #4
    6804:	e24bd028 	sub	sp, r11, #40	; 0x28
    6808:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    680c:	e12fff1e 	bx	lr

00006810 <__init_array_start>:
    6810:	00001ce4 	.word	0x00001ce4

00006814 <__frame_dummy_init_array_entry>:
    6814:	00000208                                ....

00006818 <__libc_fini>:
    6818:	e1a0c00d 	mov	r12, sp
    681c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    6820:	e24cb004 	sub	r11, r12, #4
    6824:	e24bd028 	sub	sp, r11, #40	; 0x28
    6828:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    682c:	e12fff1e 	bx	lr

00006830 <__fini_array_start>:
    6830:	000001c4 	.word	0x000001c4

00006834 <__cs3_regions>:
    6834:	00000000 	.word	0x00000000
    6838:	00000040 	.word	0x00000040
    683c:	00000040 	.word	0x00000040
    6840:	00007070 	.word	0x00007070
    6844:	00000168 	.word	0x00000168
