
D:/Files/Workspace/FPGA/243/Project/ECE243-Project/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	d0 05 00 00 d4 05 00 00 d8 05 00 00 dc 05 00 00     ................
  30:	e0 05 00 00 d0 09 00 00 90 05 00 00 e4 05 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000224 	bl	96c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000ab8 	.word	0x00000ab8

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000ef8 	.word	0x00000ef8

00000124 <__cs3_heap_start_ptr>:
 124:	00000f28 	.word	0x00000f28

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000f00 	.word	0x00000f00
 170:	00000f03 	.word	0x00000f03
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000f00 	.word	0x00000f00
 1bc:	00000f00 	.word	0x00000f00
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000f00 	.word	0x00000f00
 200:	00000000 	.word	0x00000000
 204:	00000a5c 	.word	0x00000a5c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000a5c 	.word	0x00000a5c
 250:	00000f04 	.word	0x00000f04
 254:	00000ab8 	.word	0x00000ab8
 258:	00000000 	.word	0x00000000

0000025c <config_interval_timer>:
    volatile int * interval_timer_ptr =
        (int *)TIMER_BASE; // interal timer base address

    /* set the interval timer period for scrolling the HEX displays */
    int counter                 = 5000000; // 1/(100 MHz) x 5x10^6 = 50 msec
    *(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
 25c:	e3a03a02 	mov	r3, #8192	; 0x2000
 260:	e34f3f20 	movt	r3, #65312	; 0xff20
 264:	e3042b40 	movw	r2, #19264	; 0x4b40
 268:	e5832008 	str	r2, [r3, #8]
    *(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
 26c:	e3a0204c 	mov	r2, #76	; 0x4c
 270:	e583200c 	str	r2, [r3, #12]

    /* start interval timer, enable its interrupts */
    *(interval_timer_ptr + 1) = 0x7; // STOP = 0, START = 1, CONT = 1, ITO = 1
 274:	e3a02007 	mov	r2, #7
 278:	e5832004 	str	r2, [r3, #4]
 27c:	e12fff1e 	bx	lr

00000280 <config_KEYs>:
/* setup the KEY interrupts in the FPGA */
void config_KEYs()
{
    volatile int * KEY_ptr = (int *)KEY_BASE; // pushbutton KEY address

    *(KEY_ptr + 2) = 0xF; // enable interrupts for KEY[1]
 280:	e3a03000 	mov	r3, #0
 284:	e34f3f20 	movt	r3, #65312	; 0xff20
 288:	e3a0200f 	mov	r2, #15
 28c:	e5832058 	str	r2, [r3, #88]	; 0x58
 290:	e12fff1e 	bx	lr

00000294 <main>:
volatile int key_dir = 0;
volatile int pattern = 0x0F0F0F0F; // pattern for LED lights
volatile int pixel_buffer_start; // global variable

void draw();
int main(void){
 294:	e92d4008 	push	{r3, lr}
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    /* Read location of the pixel buffer from the pixel buffer controller */
    pixel_buffer_start = *pixel_ctrl_ptr;
 298:	e3033fff 	movw	r3, #16383	; 0x3fff
 29c:	e34f3f20 	movt	r3, #65312	; 0xff20
 2a0:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
 2a4:	e3003f1c 	movw	r3, #3868	; 0xf1c
 2a8:	e3403000 	movt	r3, #0
 2ac:	e5832000 	str	r2, [r3]
	
	set_A9_IRQ_stack();      // initialize the stack pointer for IRQ mode
 2b0:	eb0000cc 	bl	5e8 <set_A9_IRQ_stack>
    config_GIC();            // configure the general interrupt controller
 2b4:	eb0000d5 	bl	610 <config_GIC>
    config_interval_timer(); // configure Altera interval timer to generate
 2b8:	ebffffe7 	bl	25c <config_interval_timer>
                             // interrupts
    config_KEYs();           // configure pushbutton KEYs to generate interrupts
 2bc:	ebffffef 	bl	280 <config_KEYs>

    enable_A9_interrupts(); // enable interrupts
 2c0:	eb0000cf 	bl	604 <enable_A9_interrupts>
	while(1){
		draw();
 2c4:	eb000080 	bl	4cc <draw>
 2c8:	eafffffd 	b	2c4 <main+0x30>

000002cc <rgb24to16>:
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
	short int g5 = (short int) g8/4;
 2cc:	e2813003 	add	r3, r1, #3
 2d0:	e3510000 	cmp	r1, #0
 2d4:	b1a01003 	movlt	r1, r3
 2d8:	e1a01141 	asr	r1, r1, #2
	short int b5 = (short int) b8/8;
 2dc:	e2823007 	add	r3, r2, #7
 2e0:	e3520000 	cmp	r2, #0
 2e4:	b1a02003 	movlt	r2, r3
 2e8:	e1a021c2 	asr	r2, r2, #3
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
 2ec:	e0822281 	add	r2, r2, r1, lsl #5
			error = error - deltax;
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
 2f0:	e2803007 	add	r3, r0, #7
 2f4:	e3500000 	cmp	r0, #0
 2f8:	b1a00003 	movlt	r0, r3
 2fc:	e1a001c0 	asr	r0, r0, #3
	short int g5 = (short int) g8/4;
	short int b5 = (short int) b8/8;
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
 300:	e0820580 	add	r0, r2, r0, lsl #11
	return rgb565;
}
 304:	e6bf0070 	sxth	r0, r0
 308:	e12fff1e 	bx	lr

0000030c <plot_pixel>:
void plot_pixel(int x, int y, short int line_color){
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 30c:	e3003f1c 	movw	r3, #3868	; 0xf1c
 310:	e3403000 	movt	r3, #0
 314:	e5933000 	ldr	r3, [r3]
 318:	e1a00080 	lsl	r0, r0, #1
 31c:	e0831501 	add	r1, r3, r1, lsl #10
 320:	e18120b0 	strh	r2, [r1, r0]
 324:	e12fff1e 	bx	lr

00000328 <clear_screen>:
	if(y<=0||y>=239){
		key_dir=-key_dir;
	}
	draw_line(0, y, 319, y, 0x07E0); // this line is green
}
void clear_screen(){
 328:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int x=0;
	for(x;x<320;x++){
		int y=0;
		for(y;y<240;y++){
			plot_pixel(x, y, rgb24to16(255,255,255));
 32c:	e3a000ff 	mov	r0, #255	; 0xff
 330:	e1a01000 	mov	r1, r0
 334:	e1a02000 	mov	r2, r0
 338:	ebffffe3 	bl	2cc <rgb24to16>
 33c:	e1a06000 	mov	r6, r0
		key_dir=-key_dir;
	}
	draw_line(0, y, 319, y, 0x07E0); // this line is green
}
void clear_screen(){
	int x=0;
 340:	e3a05000 	mov	r5, #0
	if(y<=0||y>=239){
		key_dir=-key_dir;
	}
	draw_line(0, y, 319, y, 0x07E0); // this line is green
}
void clear_screen(){
 344:	e1a07005 	mov	r7, r5
 348:	ea000009 	b	374 <clear_screen+0x4c>
	int x=0;
	for(x;x<320;x++){
		int y=0;
		for(y;y<240;y++){
			plot_pixel(x, y, rgb24to16(255,255,255));
 34c:	e1a00005 	mov	r0, r5
 350:	e1a01004 	mov	r1, r4
 354:	e1a02006 	mov	r2, r6
 358:	ebffffeb 	bl	30c <plot_pixel>
}
void clear_screen(){
	int x=0;
	for(x;x<320;x++){
		int y=0;
		for(y;y<240;y++){
 35c:	e2844001 	add	r4, r4, #1
 360:	e35400f0 	cmp	r4, #240	; 0xf0
 364:	1afffff8 	bne	34c <clear_screen+0x24>
	}
	draw_line(0, y, 319, y, 0x07E0); // this line is green
}
void clear_screen(){
	int x=0;
	for(x;x<320;x++){
 368:	e2855001 	add	r5, r5, #1
 36c:	e3550d05 	cmp	r5, #320	; 0x140
 370:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
	if(y<=0||y>=239){
		key_dir=-key_dir;
	}
	draw_line(0, y, 319, y, 0x07E0); // this line is green
}
void clear_screen(){
 374:	e1a04007 	mov	r4, r7
 378:	eafffff3 	b	34c <clear_screen+0x24>

0000037c <swap>:
void plot_pixel(int x, int y, short int line_color){
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}
void swap(int*p1 ,int *p2){
	int temp;
	temp=*p1;
 37c:	e5903000 	ldr	r3, [r0]
	*p1=*p2 ;
 380:	e5912000 	ldr	r2, [r1]
 384:	e5802000 	str	r2, [r0]
	*p2=temp ;
 388:	e5813000 	str	r3, [r1]
 38c:	e12fff1e 	bx	lr

00000390 <draw_line>:
		for(y;y<240;y++){
			plot_pixel(x, y, rgb24to16(255,255,255));
		}
	}
}
void draw_line(int x0, int y0, int x1,int y1, short int color){
 390:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 394:	e24dd014 	sub	sp, sp, #20
 398:	e58d000c 	str	r0, [sp, #12]
 39c:	e58d1008 	str	r1, [sp, #8]
 3a0:	e58d2004 	str	r2, [sp, #4]
 3a4:	e58d3000 	str	r3, [sp]
 3a8:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	bool is_steep = abs(y1 - y0) > abs(x1 - x0);
 3ac:	e0613003 	rsb	r3, r1, r3
 3b0:	e3530000 	cmp	r3, #0
 3b4:	b2633000 	rsblt	r3, r3, #0
 3b8:	e0602002 	rsb	r2, r0, r2
 3bc:	e0228fc2 	eor	r8, r2, r2, asr #31
 3c0:	e0488fc2 	sub	r8, r8, r2, asr #31
 3c4:	e1530008 	cmp	r3, r8
 3c8:	d3a08000 	movle	r8, #0
 3cc:	c3a08001 	movgt	r8, #1
	if(is_steep){
 3d0:	e3580000 	cmp	r8, #0
 3d4:	0a000005 	beq	3f0 <draw_line+0x60>
		swap(&x0, &y0);
 3d8:	e28d000c 	add	r0, sp, #12
 3dc:	e28d1008 	add	r1, sp, #8
 3e0:	ebffffe5 	bl	37c <swap>
		swap(&x1, &y1);
 3e4:	e28d0004 	add	r0, sp, #4
 3e8:	e1a0100d 	mov	r1, sp
 3ec:	ebffffe2 	bl	37c <swap>
	}
	if (x0 > x1){
 3f0:	e59d3004 	ldr	r3, [sp, #4]
 3f4:	e59d200c 	ldr	r2, [sp, #12]
 3f8:	e1520003 	cmp	r2, r3
 3fc:	da000005 	ble	418 <draw_line+0x88>
		swap(&x0, &x1);
 400:	e28d000c 	add	r0, sp, #12
 404:	e28d1004 	add	r1, sp, #4
 408:	ebffffdb 	bl	37c <swap>
		swap(&y0, &y1);
 40c:	e28d0008 	add	r0, sp, #8
 410:	e1a0100d 	mov	r1, sp
 414:	ebffffd8 	bl	37c <swap>
	}
	int deltax = x1 - x0;
 418:	e59d3004 	ldr	r3, [sp, #4]
 41c:	e59d500c 	ldr	r5, [sp, #12]
 420:	e0659003 	rsb	r9, r5, r3
	int deltay = abs(y1 - y0);
 424:	e59d2000 	ldr	r2, [sp]
 428:	e59d6008 	ldr	r6, [sp, #8]
 42c:	e0667002 	rsb	r7, r6, r2
 430:	e3570000 	cmp	r7, #0
 434:	b2677000 	rsblt	r7, r7, #0
	int error = -(deltax / 2);
 438:	e0894fa9 	add	r4, r9, r9, lsr #31
 43c:	e1a040c4 	asr	r4, r4, #1
 440:	e2644000 	rsb	r4, r4, #0
	int y = y0;
	int y_step=0;
	if (y0 < y1){
		y_step = 1;
 444:	e1520006 	cmp	r2, r6
 448:	d3e0b000 	mvnle	r11, #0
 44c:	c3a0b001 	movgt	r11, #1
	} else{
		y_step = -1;
	}
	int x=x0;
	for(x;x<x1;x++){
 450:	e1530005 	cmp	r3, r5
 454:	da00000d 	ble	490 <draw_line+0x100>
		if (is_steep){
 458:	e3580000 	cmp	r8, #0
			plot_pixel(y, x, color);
 45c:	11a00006 	movne	r0, r6
 460:	11a01005 	movne	r1, r5
		}else{
			plot_pixel(x, y, color);
 464:	01a00005 	moveq	r0, r5
 468:	01a01006 	moveq	r1, r6
 46c:	e1a0200a 	mov	r2, r10
 470:	ebffffa5 	bl	30c <plot_pixel>
		}
		error = error + deltay;
		if (error >= 0){
 474:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
 478:	5086600b 	addpl	r6, r6, r11
			error = error - deltax;
 47c:	50694004 	rsbpl	r4, r9, r4
		y_step = 1;
	} else{
		y_step = -1;
	}
	int x=x0;
	for(x;x<x1;x++){
 480:	e2855001 	add	r5, r5, #1
 484:	e59d3004 	ldr	r3, [sp, #4]
 488:	e1530005 	cmp	r3, r5
 48c:	cafffff1 	bgt	458 <draw_line+0xc8>
		if (error >= 0){
			y = y + y_step;
			error = error - deltax;
		}
	}
}
 490:	e28dd014 	add	sp, sp, #20
 494:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000498 <wait_for_vsync>:
	*p2=temp ;
}
void wait_for_vsync(){
	volatile int *pixel_ctrl_PTR = 0xFF203020;
	register int status;
	*pixel_ctrl_PTR = 1;
 498:	e3033fff 	movw	r3, #16383	; 0x3fff
 49c:	e34f3f20 	movt	r3, #65312	; 0xff20
 4a0:	e3a02001 	mov	r2, #1
 4a4:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	status = *(pixel_ctrl_PTR +3);
 4a8:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01) != 0){
 4ac:	e3130001 	tst	r3, #1
 4b0:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_PTR+3);
 4b4:	e3032fff 	movw	r2, #16383	; 0x3fff
 4b8:	e34f2f20 	movt	r2, #65312	; 0xff20
 4bc:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
void wait_for_vsync(){
	volatile int *pixel_ctrl_PTR = 0xFF203020;
	register int status;
	*pixel_ctrl_PTR = 1;
	status = *(pixel_ctrl_PTR +3);
	while((status & 0x01) != 0){
 4c0:	e3130001 	tst	r3, #1
 4c4:	1afffffc 	bne	4bc <wait_for_vsync+0x24>
 4c8:	e12fff1e 	bx	lr

000004cc <draw>:
void draw_line(int x0, int y0, int x1,int y1, short int color);
void swap(int*p1 ,int *p2);
void wait_for_vsync();

int y=0;
void draw(){
 4cc:	e92d4010 	push	{r4, lr}
 4d0:	e24dd008 	sub	sp, sp, #8
	wait_for_vsync();
 4d4:	ebffffef 	bl	498 <wait_for_vsync>
	draw_line(0, y, 319, y, 0xFFFF); // this line is green
 4d8:	e3004f24 	movw	r4, #3876	; 0xf24
 4dc:	e3404000 	movt	r4, #0
 4e0:	e5943000 	ldr	r3, [r4]
 4e4:	e3e02000 	mvn	r2, #0
 4e8:	e58d2000 	str	r2, [sp]
 4ec:	e3a00000 	mov	r0, #0
 4f0:	e1a01003 	mov	r1, r3
 4f4:	e2822d05 	add	r2, r2, #320	; 0x140
 4f8:	ebffffa4 	bl	390 <draw_line>
	y=y+key_dir;
 4fc:	e3003f20 	movw	r3, #3872	; 0xf20
 500:	e3403000 	movt	r3, #0
 504:	e5932000 	ldr	r2, [r3]
 508:	e5943000 	ldr	r3, [r4]
 50c:	e0823003 	add	r3, r2, r3
 510:	e5843000 	str	r3, [r4]
	if(y<=0||y>=239){
 514:	e2432001 	sub	r2, r3, #1
 518:	e35200ed 	cmp	r2, #237	; 0xed
		key_dir=-key_dir;
 51c:	83002f20 	movwhi	r2, #3872	; 0xf20
 520:	83402000 	movthi	r2, #0
 524:	85921000 	ldrhi	r1, [r2]
 528:	82611000 	rsbhi	r1, r1, #0
 52c:	85821000 	strhi	r1, [r2]
	}
	draw_line(0, y, 319, y, 0x07E0); // this line is green
 530:	e3a02e7e 	mov	r2, #2016	; 0x7e0
 534:	e58d2000 	str	r2, [sp]
 538:	e3a00000 	mov	r0, #0
 53c:	e1a01003 	mov	r1, r3
 540:	e300213f 	movw	r2, #319	; 0x13f
 544:	ebffff91 	bl	390 <draw_line>
}
 548:	e28dd008 	add	sp, sp, #8
 54c:	e8bd8010 	pop	{r4, pc}

00000550 <interval_timer_ISR>:
 *
******************************************************************************/
void interval_timer_ISR()
{
    volatile int * interval_timer_ptr = (int *)TIMER_BASE;
    *(interval_timer_ptr) = 0; // Clear the interrupt
 550:	e3a03a02 	mov	r3, #8192	; 0x2000
 554:	e34f3f20 	movt	r3, #65312	; 0xff20
 558:	e3a02000 	mov	r2, #0
 55c:	e5832000 	str	r2, [r3]
 560:	e12fff1e 	bx	lr

00000564 <pushbutton_ISR>:
void pushbutton_ISR(void)
{
    volatile int * KEY_ptr = (int *)KEY_BASE;
    int            press;

    press          = *(KEY_ptr + 3); // read the pushbutton interrupt register
 564:	e3a03000 	mov	r3, #0
 568:	e34f3f20 	movt	r3, #65312	; 0xff20
 56c:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
    *(KEY_ptr + 3) = press;          // Clear the interrupt
 570:	e583105c 	str	r1, [r3, #92]	; 0x5c

    key_dir ^= 1; // Toggle key_dir value
 574:	e3002f20 	movw	r2, #3872	; 0xf20
 578:	e3402000 	movt	r2, #0
 57c:	e5920000 	ldr	r0, [r2]
 580:	e2200001 	eor	r0, r0, #1
 584:	e5820000 	str	r0, [r2]
	
    volatile int * LED_ptr = (int *)LED_BASE; // LED address
	 *(LED_ptr) = press;
 588:	e5831000 	str	r1, [r3]
 58c:	e12fff1e 	bx	lr

00000590 <__cs3_isr_irq>:
void interval_timer_ISR(void);
void pushbutton_ISR(void);

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(void)
{
 590:	e24ee004 	sub	lr, lr, #4
 594:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
    // Read the ICCIAR from the processor interface
    int address = MPCORE_GIC_CPUIF + ICCIAR;
    int int_ID  = *((int *)address);
 598:	e3e03a13 	mvn	r3, #77824	; 0x13000
 59c:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d

	if (int_ID == INTERVAL_TIMER_IRQ) // check if interrupt is from the Altera timer
 5a0:	e3540048 	cmp	r4, #72	; 0x48
 5a4:	1a000001 	bne	5b0 <__cs3_isr_irq+0x20>
        interval_timer_ISR();
 5a8:	ebffffe8 	bl	550 <interval_timer_ISR>
 5ac:	ea000004 	b	5c4 <__cs3_isr_irq+0x34>
    else if (int_ID == KEYS_IRQ) // check if interrupt is from the KEYs
 5b0:	e3540049 	cmp	r4, #73	; 0x49
 5b4:	1a000001 	bne	5c0 <__cs3_isr_irq+0x30>
        pushbutton_ISR();
 5b8:	ebffffe9 	bl	564 <pushbutton_ISR>
 5bc:	ea000000 	b	5c4 <__cs3_isr_irq+0x34>
 5c0:	eafffffe 	b	5c0 <__cs3_isr_irq+0x30>
        while (1)
            ; // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address           = MPCORE_GIC_CPUIF + ICCEOIR;
    *((int *)address) = int_ID;
 5c4:	e3e03a13 	mvn	r3, #77824	; 0x13000
 5c8:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
 5cc:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

000005d0 <__cs3_reset>:
    return;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void)
{
 5d0:	eafffffe 	b	5d0 <__cs3_reset>

000005d4 <__cs3_isr_undef>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_undef(void)
{
 5d4:	eafffffe 	b	5d4 <__cs3_isr_undef>

000005d8 <__cs3_isr_swi>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_swi(void)
{
 5d8:	eafffffe 	b	5d8 <__cs3_isr_swi>

000005dc <__cs3_isr_pabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_pabort(void)
{
 5dc:	eafffffe 	b	5dc <__cs3_isr_pabort>

000005e0 <__cs3_isr_dabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_dabort(void)
{
 5e0:	eafffffe 	b	5e0 <__cs3_isr_dabort>

000005e4 <__cs3_isr_fiq>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_fiq(void)
{
 5e4:	eafffffe 	b	5e4 <__cs3_isr_fiq>

000005e8 <set_A9_IRQ_stack>:
{
    int stack, mode;
    stack = A9_ONCHIP_END - 7; // top of A9 onchip memory, aligned to 8 bytes
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
 5e8:	e3a030d2 	mov	r3, #210	; 0xd2
 5ec:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r"(stack));
 5f0:	e3e03007 	mvn	r3, #7
 5f4:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
 5f8:	e3a030d3 	mov	r3, #211	; 0xd3
 5fc:	e129f003 	msr	CPSR_fc, r3
 600:	e12fff1e 	bx	lr

00000604 <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
    int status = SVC_MODE | INT_ENABLE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(status));
 604:	e3a03053 	mov	r3, #83	; 0x53
 608:	e129f003 	msr	CPSR_fc, r3
 60c:	e12fff1e 	bx	lr

00000610 <config_GIC>:
void config_GIC(void)
{
    int address; // used to calculate register addresses

    /* configure the FPGA interval timer and KEYs interrupts */
    *((int *)0xFFFED848) = 0x00000101;
 610:	e3e03a12 	mvn	r3, #73728	; 0x12000
 614:	e3002101 	movw	r2, #257	; 0x101
 618:	e50327b7 	str	r2, [r3, #-1975]	; 0xfffff849
    *((int *)0xFFFED108) = 0x00000300;
 61c:	e3a02c03 	mov	r2, #768	; 0x300
 620:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
    // priorities
    address           = MPCORE_GIC_CPUIF + ICCPMR;
    *((int *)address) = 0xFFFF;
 624:	e3e01a13 	mvn	r1, #77824	; 0x13000
 628:	e30f2fff 	movw	r2, #65535	; 0xffff
 62c:	e5012efb 	str	r2, [r1, #-3835]	; 0xfffff105

    // Set CPU Interface Control Register (ICCICR). Enable signaling of
    // interrupts
    address           = MPCORE_GIC_CPUIF + ICCICR;
    *((int *)address) = ENABLE;
 630:	e3a02001 	mov	r2, #1
 634:	e5012eff 	str	r2, [r1, #-3839]	; 0xfffff101

    // Configure the Distributor Control Register (ICDDCR) to send pending
    // interrupts to CPUs
    address           = MPCORE_GIC_DIST + ICDDCR;
    *((int *)address) = ENABLE;
 638:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
 63c:	e12fff1e 	bx	lr

00000640 <atexit>:
 640:	e1a01000 	mov	r1, r0
 644:	e3a00000 	mov	r0, #0
 648:	e92d4008 	push	{r3, lr}
 64c:	e1a02000 	mov	r2, r0
 650:	e1a03000 	mov	r3, r0
 654:	eb00000e 	bl	694 <__register_exitproc>
 658:	e8bd4008 	pop	{r3, lr}
 65c:	e12fff1e 	bx	lr

00000660 <exit>:
 660:	e92d4008 	push	{r3, lr}
 664:	e3a01000 	mov	r1, #0
 668:	e1a04000 	mov	r4, r0
 66c:	eb000045 	bl	788 <__call_exitprocs>
 670:	e59f3018 	ldr	r3, [pc, #24]	; 690 <exit+0x30>
 674:	e5930000 	ldr	r0, [r3]
 678:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 67c:	e3530000 	cmp	r3, #0
 680:	11a0e00f 	movne	lr, pc
 684:	112fff13 	bxne	r3
 688:	e1a00004 	mov	r0, r4
 68c:	eb0000c9 	bl	9b8 <_exit>
 690:	00000a60 	.word	0x00000a60

00000694 <__register_exitproc>:
 694:	e59fc0e4 	ldr	r12, [pc, #228]	; 780 <__register_exitproc+0xec>
 698:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 69c:	e59c4000 	ldr	r4, [r12]
 6a0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 6a4:	e35c0000 	cmp	r12, #0
 6a8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 6ac:	e59c5004 	ldr	r5, [r12, #4]
 6b0:	0584c148 	streq	r12, [r4, #328]	; 0x148
 6b4:	e355001f 	cmp	r5, #31
 6b8:	e24dd010 	sub	sp, sp, #16
 6bc:	e1a06000 	mov	r6, r0
 6c0:	da000015 	ble	71c <__register_exitproc+0x88>
 6c4:	e59f00b8 	ldr	r0, [pc, #184]	; 784 <__register_exitproc+0xf0>
 6c8:	e3500000 	cmp	r0, #0
 6cc:	1a000001 	bne	6d8 <__register_exitproc+0x44>
 6d0:	e3e00000 	mvn	r0, #0
 6d4:	ea000018 	b	73c <__register_exitproc+0xa8>
 6d8:	e3a00e19 	mov	r0, #400	; 0x190
 6dc:	e58d100c 	str	r1, [sp, #12]
 6e0:	e58d2008 	str	r2, [sp, #8]
 6e4:	e58d3004 	str	r3, [sp, #4]
 6e8:	e320f000 	nop	{0}
 6ec:	e250c000 	subs	r12, r0, #0
 6f0:	e59d100c 	ldr	r1, [sp, #12]
 6f4:	e59d2008 	ldr	r2, [sp, #8]
 6f8:	e59d3004 	ldr	r3, [sp, #4]
 6fc:	0afffff3 	beq	6d0 <__register_exitproc+0x3c>
 700:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 704:	e3a00000 	mov	r0, #0
 708:	e58c0004 	str	r0, [r12, #4]
 70c:	e58c5000 	str	r5, [r12]
 710:	e584c148 	str	r12, [r4, #328]	; 0x148
 714:	e58c0188 	str	r0, [r12, #392]	; 0x188
 718:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 71c:	e3560000 	cmp	r6, #0
 720:	e59c4004 	ldr	r4, [r12, #4]
 724:	1a000007 	bne	748 <__register_exitproc+0xb4>
 728:	e2843002 	add	r3, r4, #2
 72c:	e2844001 	add	r4, r4, #1
 730:	e78c1103 	str	r1, [r12, r3, lsl #2]
 734:	e58c4004 	str	r4, [r12, #4]
 738:	e3a00000 	mov	r0, #0
 73c:	e28dd010 	add	sp, sp, #16
 740:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 744:	e12fff1e 	bx	lr
 748:	e3a00001 	mov	r0, #1
 74c:	e1a00410 	lsl	r0, r0, r4
 750:	e08c8104 	add	r8, r12, r4, lsl #2
 754:	e3560002 	cmp	r6, #2
 758:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 75c:	e5883108 	str	r3, [r8, #264]	; 0x108
 760:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 764:	e1877000 	orr	r7, r7, r0
 768:	01830000 	orreq	r0, r3, r0
 76c:	e1a05008 	mov	r5, r8
 770:	e5882088 	str	r2, [r8, #136]	; 0x88
 774:	e58c7188 	str	r7, [r12, #392]	; 0x188
 778:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 77c:	eaffffe9 	b	728 <__register_exitproc+0x94>
 780:	00000a60 	.word	0x00000a60
 784:	00000000 	.word	0x00000000

00000788 <__call_exitprocs>:
 788:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 78c:	e59f3168 	ldr	r3, [pc, #360]	; 8fc <__call_exitprocs+0x174>
 790:	e5933000 	ldr	r3, [r3]
 794:	e24dd014 	sub	sp, sp, #20
 798:	e58d3004 	str	r3, [sp, #4]
 79c:	e2833f52 	add	r3, r3, #328	; 0x148
 7a0:	e58d0008 	str	r0, [sp, #8]
 7a4:	e58d300c 	str	r3, [sp, #12]
 7a8:	e1a07001 	mov	r7, r1
 7ac:	e3a08001 	mov	r8, #1
 7b0:	e59d3004 	ldr	r3, [sp, #4]
 7b4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 7b8:	e3560000 	cmp	r6, #0
 7bc:	e59db00c 	ldr	r11, [sp, #12]
 7c0:	0a000033 	beq	894 <__call_exitprocs+0x10c>
 7c4:	e5965004 	ldr	r5, [r6, #4]
 7c8:	e2554001 	subs	r4, r5, #1
 7cc:	5286a088 	addpl	r10, r6, #136	; 0x88
 7d0:	5285501f 	addpl	r5, r5, #31
 7d4:	508a5105 	addpl	r5, r10, r5, lsl #2
 7d8:	5a000007 	bpl	7fc <__call_exitprocs+0x74>
 7dc:	ea000029 	b	888 <__call_exitprocs+0x100>
 7e0:	e5953000 	ldr	r3, [r5]
 7e4:	e1530007 	cmp	r3, r7
 7e8:	0a000005 	beq	804 <__call_exitprocs+0x7c>
 7ec:	e2444001 	sub	r4, r4, #1
 7f0:	e3740001 	cmn	r4, #1
 7f4:	e2455004 	sub	r5, r5, #4
 7f8:	0a000022 	beq	888 <__call_exitprocs+0x100>
 7fc:	e3570000 	cmp	r7, #0
 800:	1afffff6 	bne	7e0 <__call_exitprocs+0x58>
 804:	e5963004 	ldr	r3, [r6, #4]
 808:	e06a2005 	rsb	r2, r10, r5
 80c:	e2433001 	sub	r3, r3, #1
 810:	e0862002 	add	r2, r6, r2
 814:	e1530004 	cmp	r3, r4
 818:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 81c:	13a01000 	movne	r1, #0
 820:	05864004 	streq	r4, [r6, #4]
 824:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 828:	e3530000 	cmp	r3, #0
 82c:	0affffee 	beq	7ec <__call_exitprocs+0x64>
 830:	e1a02418 	lsl	r2, r8, r4
 834:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 838:	e1120001 	tst	r2, r1
 83c:	e5969004 	ldr	r9, [r6, #4]
 840:	0a000016 	beq	8a0 <__call_exitprocs+0x118>
 844:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 848:	e1120001 	tst	r2, r1
 84c:	1a000016 	bne	8ac <__call_exitprocs+0x124>
 850:	e59d0008 	ldr	r0, [sp, #8]
 854:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 858:	e1a0e00f 	mov	lr, pc
 85c:	e12fff13 	bx	r3
 860:	e5963004 	ldr	r3, [r6, #4]
 864:	e1530009 	cmp	r3, r9
 868:	1affffd0 	bne	7b0 <__call_exitprocs+0x28>
 86c:	e59b3000 	ldr	r3, [r11]
 870:	e1530006 	cmp	r3, r6
 874:	1affffcd 	bne	7b0 <__call_exitprocs+0x28>
 878:	e2444001 	sub	r4, r4, #1
 87c:	e3740001 	cmn	r4, #1
 880:	e2455004 	sub	r5, r5, #4
 884:	1affffdc 	bne	7fc <__call_exitprocs+0x74>
 888:	e59f1070 	ldr	r1, [pc, #112]	; 900 <__call_exitprocs+0x178>
 88c:	e3510000 	cmp	r1, #0
 890:	1a000009 	bne	8bc <__call_exitprocs+0x134>
 894:	e28dd014 	add	sp, sp, #20
 898:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 89c:	e12fff1e 	bx	lr
 8a0:	e1a0e00f 	mov	lr, pc
 8a4:	e12fff13 	bx	r3
 8a8:	eaffffec 	b	860 <__call_exitprocs+0xd8>
 8ac:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 8b0:	e1a0e00f 	mov	lr, pc
 8b4:	e12fff13 	bx	r3
 8b8:	eaffffe8 	b	860 <__call_exitprocs+0xd8>
 8bc:	e5963004 	ldr	r3, [r6, #4]
 8c0:	e3530000 	cmp	r3, #0
 8c4:	e5963000 	ldr	r3, [r6]
 8c8:	1a000008 	bne	8f0 <__call_exitprocs+0x168>
 8cc:	e3530000 	cmp	r3, #0
 8d0:	0a000006 	beq	8f0 <__call_exitprocs+0x168>
 8d4:	e1a00006 	mov	r0, r6
 8d8:	e58b3000 	str	r3, [r11]
 8dc:	e320f000 	nop	{0}
 8e0:	e59b6000 	ldr	r6, [r11]
 8e4:	e3560000 	cmp	r6, #0
 8e8:	1affffb5 	bne	7c4 <__call_exitprocs+0x3c>
 8ec:	eaffffe8 	b	894 <__call_exitprocs+0x10c>
 8f0:	e1a0b006 	mov	r11, r6
 8f4:	e1a06003 	mov	r6, r3
 8f8:	eafffff9 	b	8e4 <__call_exitprocs+0x15c>
 8fc:	00000a60 	.word	0x00000a60
 900:	00000000 	.word	0x00000000

00000904 <register_fini>:
 904:	e92d4008 	push	{r3, lr}
 908:	e59f3010 	ldr	r3, [pc, #16]	; 920 <register_fini+0x1c>
 90c:	e3530000 	cmp	r3, #0
 910:	159f000c 	ldrne	r0, [pc, #12]	; 924 <register_fini+0x20>
 914:	1bffff49 	blne	640 <atexit>
 918:	e8bd4008 	pop	{r3, lr}
 91c:	e12fff1e 	bx	lr
 920:	00000a88 	.word	0x00000a88
 924:	00000928 	.word	0x00000928

00000928 <__libc_fini_array>:
 928:	e92d4038 	push	{r3, r4, r5, lr}
 92c:	e59f5030 	ldr	r5, [pc, #48]	; 964 <__libc_fini_array+0x3c>
 930:	e59f4030 	ldr	r4, [pc, #48]	; 968 <__libc_fini_array+0x40>
 934:	e0654004 	rsb	r4, r5, r4
 938:	e1b04144 	asrs	r4, r4, #2
 93c:	10855104 	addne	r5, r5, r4, lsl #2
 940:	0a000004 	beq	958 <__libc_fini_array+0x30>
 944:	e5353004 	ldr	r3, [r5, #-4]!
 948:	e1a0e00f 	mov	lr, pc
 94c:	e12fff13 	bx	r3
 950:	e2544001 	subs	r4, r4, #1
 954:	1afffffa 	bne	944 <__libc_fini_array+0x1c>
 958:	eb00004a 	bl	a88 <__libc_fini>
 95c:	e8bd4038 	pop	{r3, r4, r5, lr}
 960:	e12fff1e 	bx	lr
 964:	00000aa0 	.word	0x00000aa0
 968:	00000aa4 	.word	0x00000aa4

0000096c <__cs3_premain>:
 96c:	e92d4008 	push	{r3, lr}
 970:	eb000017 	bl	9d4 <__libc_init_array>
 974:	e59f3030 	ldr	r3, [pc, #48]	; 9ac <__cs3_premain+0x40>
 978:	e3530000 	cmp	r3, #0
 97c:	15930000 	ldrne	r0, [r3]
 980:	01a00003 	moveq	r0, r3
 984:	e59f3024 	ldr	r3, [pc, #36]	; 9b0 <__cs3_premain+0x44>
 988:	e3530000 	cmp	r3, #0
 98c:	15931000 	ldrne	r1, [r3]
 990:	01a01003 	moveq	r1, r3
 994:	e3a02000 	mov	r2, #0
 998:	ebfffe3d 	bl	294 <main>
 99c:	e59f3010 	ldr	r3, [pc, #16]	; 9b4 <__cs3_premain+0x48>
 9a0:	e3530000 	cmp	r3, #0
 9a4:	1bffff2d 	blne	660 <exit>
 9a8:	eafffffe 	b	9a8 <__cs3_premain+0x3c>
	...
 9b4:	00000660 	.word	0x00000660

000009b8 <_exit>:
 9b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 9bc:	e3a00018 	mov	r0, #24
 9c0:	e59f1004 	ldr	r1, [pc, #4]	; 9cc <_exit+0x14>
 9c4:	ef123456 	svc	0x00123456
 9c8:	eafffffe 	b	9c8 <_exit+0x10>
 9cc:	00020026 	.word	0x00020026

000009d0 <__cs3_isr_interrupt>:
 9d0:	eafffffe 	b	9d0 <__cs3_isr_interrupt>

000009d4 <__libc_init_array>:
 9d4:	e92d4070 	push	{r4, r5, r6, lr}
 9d8:	e59f506c 	ldr	r5, [pc, #108]	; a4c <__libc_init_array+0x78>
 9dc:	e59f606c 	ldr	r6, [pc, #108]	; a50 <__libc_init_array+0x7c>
 9e0:	e0656006 	rsb	r6, r5, r6
 9e4:	e1b06146 	asrs	r6, r6, #2
 9e8:	12455004 	subne	r5, r5, #4
 9ec:	13a04000 	movne	r4, #0
 9f0:	0a000005 	beq	a0c <__libc_init_array+0x38>
 9f4:	e5b53004 	ldr	r3, [r5, #4]!
 9f8:	e2844001 	add	r4, r4, #1
 9fc:	e1a0e00f 	mov	lr, pc
 a00:	e12fff13 	bx	r3
 a04:	e1560004 	cmp	r6, r4
 a08:	1afffff9 	bne	9f4 <__libc_init_array+0x20>
 a0c:	e59f5040 	ldr	r5, [pc, #64]	; a54 <__libc_init_array+0x80>
 a10:	e59f6040 	ldr	r6, [pc, #64]	; a58 <__libc_init_array+0x84>
 a14:	e0656006 	rsb	r6, r5, r6
 a18:	eb000012 	bl	a68 <_init>
 a1c:	e1b06146 	asrs	r6, r6, #2
 a20:	12455004 	subne	r5, r5, #4
 a24:	13a04000 	movne	r4, #0
 a28:	0a000005 	beq	a44 <__libc_init_array+0x70>
 a2c:	e5b53004 	ldr	r3, [r5, #4]!
 a30:	e2844001 	add	r4, r4, #1
 a34:	e1a0e00f 	mov	lr, pc
 a38:	e12fff13 	bx	r3
 a3c:	e1560004 	cmp	r6, r4
 a40:	1afffff9 	bne	a2c <__libc_init_array+0x58>
 a44:	e8bd4070 	pop	{r4, r5, r6, lr}
 a48:	e12fff1e 	bx	lr
 a4c:	00000a80 	.word	0x00000a80
 a50:	00000a80 	.word	0x00000a80
 a54:	00000a80 	.word	0x00000a80
 a58:	00000a88 	.word	0x00000a88

Disassembly of section .rodata:

00000a60 <_global_impure_ptr>:
 a60:	00000ad0 00000043                       ....C...

00000a68 <_init>:
 a68:	e1a0c00d 	mov	r12, sp
 a6c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a70:	e24cb004 	sub	r11, r12, #4
 a74:	e24bd028 	sub	sp, r11, #40	; 0x28
 a78:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a7c:	e12fff1e 	bx	lr

00000a80 <__init_array_start>:
 a80:	00000904 	.word	0x00000904

00000a84 <__frame_dummy_init_array_entry>:
 a84:	00000208                                ....

00000a88 <__libc_fini>:
 a88:	e1a0c00d 	mov	r12, sp
 a8c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 a90:	e24cb004 	sub	r11, r12, #4
 a94:	e24bd028 	sub	sp, r11, #40	; 0x28
 a98:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 a9c:	e12fff1e 	bx	lr

00000aa0 <__fini_array_start>:
 aa0:	000001c4 	.word	0x000001c4

00000aa4 <__cs3_regions>:
 aa4:	00000000 	.word	0x00000000
 aa8:	00000040 	.word	0x00000040
 aac:	00000040 	.word	0x00000040
 ab0:	00000ec0 	.word	0x00000ec0
 ab4:	00000028 	.word	0x00000028
