
D:/Files/Workspace/FPGA/243/Project/ECE243-Project/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	9c 06 00 00 a0 06 00 00 a4 06 00 00 a8 06 00 00     ................
  30:	ac 06 00 00 18 1d 00 00 5c 06 00 00 b0 06 00 00     ........\.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0006c7 	bl	1bf8 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001e10 	.word	0x00001e10

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00002668 	.word	0x00002668

00000124 <__cs3_heap_start_ptr>:
     124:	000027a8 	.word	0x000027a8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <__cs3_region_zero_size_ram+0x34>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <__cs3_region_zero_size_ram+0x38>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <__cs3_region_zero_size_ram+0x1c>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <__cs3_region_zero_size_ram+0x3c>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <__cs3_region_zero_size_ram+0x14>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <__cs3_region_zero_size_ram+0x14>
     16c:	00002670 	.word	0x00002670
     170:	00002673 	.word	0x00002673
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00002670 	.word	0x00002670
     1bc:	00002670 	.word	0x00002670
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00002670 	.word	0x00002670
     200:	00000000 	.word	0x00000000
     204:	00001db4 	.word	0x00001db4

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001db4 	.word	0x00001db4
     250:	00002674 	.word	0x00002674
     254:	00001e10 	.word	0x00001e10
     258:	00000000 	.word	0x00000000

0000025c <config_interval_timer>:
        (int *)TIMER_BASE; // interal timer base address

    /* set the interval timer period for scrolling the HEX displays */
	float interval = 1/60; //60 FPS
    int counter                 = interval * 100000000; // 1/(100 MHz) x 5x10^6 = 50 msec
    *(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     25c:	e3a03a02 	mov	r3, #8192	; 0x2000
     260:	e34f3f20 	movt	r3, #65312	; 0xff20
     264:	e3a02000 	mov	r2, #0
     268:	e5832008 	str	r2, [r3, #8]
    *(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     26c:	e583200c 	str	r2, [r3, #12]

    /* start interval timer, enable its interrupts */
    *(interval_timer_ptr + 1) = 0x7; // STOP = 0, START = 1, CONT = 1, ITO = 1
     270:	e3a02007 	mov	r2, #7
     274:	e5832004 	str	r2, [r3, #4]
     278:	e12fff1e 	bx	lr

0000027c <config_KEYs>:

/* setup the KEY interrupts in the FPGA */
void config_KEYs(){
    volatile int * KEY_ptr = (int *)KEY_BASE; // pushbutton KEY address

    *(KEY_ptr + 2) = 0xF; // enable interrupts for KEY[0-3]
     27c:	e3a03000 	mov	r3, #0
     280:	e34f3f20 	movt	r3, #65312	; 0xff20
     284:	e3a0200f 	mov	r2, #15
     288:	e5832058 	str	r2, [r3, #88]	; 0x58
     28c:	e12fff1e 	bx	lr

00000290 <main>:

void scene_draw();
void clear();
void logic();
void init_board();
int main(void){
     290:	e92d4010 	push	{r4, lr}
    /* Read location of the pixel buffer from the pixel buffer controller */
	
	set_A9_IRQ_stack();      // initialize the stack pointer for IRQ mode
     294:	eb000106 	bl	6b4 <set_A9_IRQ_stack>
    config_GIC();            // configure the general interrupt controller
     298:	eb00010f 	bl	6dc <config_GIC>
    config_interval_timer(); // configure Altera interval timer to generate
     29c:	ebffffee 	bl	25c <config_interval_timer>
                             // interrupts
    config_KEYs();           // configure pushbutton KEYs to generate interrupts
     2a0:	ebfffff5 	bl	27c <config_KEYs>

    enable_A9_interrupts(); // enable interrupts
     2a4:	eb000109 	bl	6d0 <enable_A9_interrupts>
	
	volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    *(pixel_ctrl_ptr + 1) = 0xC8000000;
     2a8:	e3034fff 	movw	r4, #16383	; 0x3fff
     2ac:	e34f4f20 	movt	r4, #65312	; 0xff20
     2b0:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     2b4:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    wait_for_vsync();
     2b8:	eb0000b8 	bl	5a0 <wait_for_vsync>
    pixel_buffer_start = *pixel_ctrl_ptr;
     2bc:	e5142fdf 	ldr	r2, [r4, #-4063]	; 0xfffff021
     2c0:	e302368c 	movw	r3, #9868	; 0x268c
     2c4:	e3403000 	movt	r3, #0
     2c8:	e5832000 	str	r2, [r3]
	clear_screen();
     2cc:	eb000023 	bl	360 <clear_screen>
	
	//*(pixel_ctrl_ptr + 1) = 0xC0000000;
    //pixel_buffer_start = *(pixel_ctrl_ptr + 1);
	//clear_screen();
	//wait_for_vsync();
	init_board();
     2d0:	eb000189 	bl	8fc <init_board>
	while(1){
		clear();
     2d4:	eb000218 	bl	b3c <clear>
		logic();
     2d8:	eb00013d 	bl	7d4 <logic>
		scene_draw();
     2dc:	eb0001ec 	bl	a94 <scene_draw>
		wait_for_vsync();
     2e0:	eb0000ae 	bl	5a0 <wait_for_vsync>
     2e4:	eafffffa 	b	2d4 <main+0x44>

000002e8 <rgb24to16>:
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
	short int g5 = (short int) g8/4;
     2e8:	e2813003 	add	r3, r1, #3
     2ec:	e3510000 	cmp	r1, #0
     2f0:	b1a01003 	movlt	r1, r3
     2f4:	e1a01141 	asr	r1, r1, #2
	short int b5 = (short int) b8/8;
     2f8:	e2823007 	add	r3, r2, #7
     2fc:	e3520000 	cmp	r2, #0
     300:	b1a02003 	movlt	r2, r3
     304:	e1a021c2 	asr	r2, r2, #3
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
     308:	e0822281 	add	r2, r2, r1, lsl #5
			error = error - deltax;
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
     30c:	e2803007 	add	r3, r0, #7
     310:	e3500000 	cmp	r0, #0
     314:	b1a00003 	movlt	r0, r3
     318:	e1a001c0 	asr	r0, r0, #3
	short int g5 = (short int) g8/4;
	short int b5 = (short int) b8/8;
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
     31c:	e0820580 	add	r0, r2, r0, lsl #11
	return rgb565;
}
     320:	e6bf0070 	sxth	r0, r0
     324:	e12fff1e 	bx	lr

00000328 <plot_pixel>:
void plot_pixel(int x, int y, short int color){
	if(erase_mode){
     328:	e3023690 	movw	r3, #9872	; 0x2690
     32c:	e3403000 	movt	r3, #0
     330:	e5d33000 	ldrb	r3, [r3]
     334:	e3530000 	cmp	r3, #0
		color = bg_color;
     338:	13013e18 	movwne	r3, #7704	; 0x1e18
     33c:	13403000 	movtne	r3, #0
     340:	11d320f0 	ldrshne	r2, [r3]
	}
	*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
     344:	e302368c 	movw	r3, #9868	; 0x268c
     348:	e3403000 	movt	r3, #0
     34c:	e5933000 	ldr	r3, [r3]
     350:	e1a00080 	lsl	r0, r0, #1
     354:	e0831501 	add	r1, r3, r1, lsl #10
     358:	e18120b0 	strh	r2, [r1, r0]
     35c:	e12fff1e 	bx	lr

00000360 <clear_screen>:
#include "data.h"

extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color
bool erase_mode = false;
void clear_screen(){
     360:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int x=0;
     364:	e3a05000 	mov	r5, #0
#include "data.h"

extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color
bool erase_mode = false;
void clear_screen(){
     368:	e1a07005 	mov	r7, r5
	int x=0;
	for(x;x<SCREEN_W;x++){
		int y=0;
		for(y;y<SCREEN_H;y++){
			plot_pixel(x, y, bg_color);
     36c:	e3016e18 	movw	r6, #7704	; 0x1e18
     370:	e3406000 	movt	r6, #0
     374:	ea000009 	b	3a0 <clear_screen+0x40>
     378:	e1a00005 	mov	r0, r5
     37c:	e1a01004 	mov	r1, r4
     380:	e1d620f0 	ldrsh	r2, [r6]
     384:	ebffffe7 	bl	328 <plot_pixel>
bool erase_mode = false;
void clear_screen(){
	int x=0;
	for(x;x<SCREEN_W;x++){
		int y=0;
		for(y;y<SCREEN_H;y++){
     388:	e2844001 	add	r4, r4, #1
     38c:	e35400e6 	cmp	r4, #230	; 0xe6
     390:	1afffff8 	bne	378 <clear_screen+0x18>
extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color
bool erase_mode = false;
void clear_screen(){
	int x=0;
	for(x;x<SCREEN_W;x++){
     394:	e2855001 	add	r5, r5, #1
     398:	e3550d05 	cmp	r5, #320	; 0x140
     39c:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
#include "data.h"

extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color
bool erase_mode = false;
void clear_screen(){
     3a0:	e1a04007 	mov	r4, r7
     3a4:	eafffff3 	b	378 <clear_screen+0x18>

000003a8 <swap>:
	}
	*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
}
void swap(int*p1 ,int *p2){
	int temp;
	temp=*p1;
     3a8:	e5903000 	ldr	r3, [r0]
	*p1=*p2 ;
     3ac:	e5912000 	ldr	r2, [r1]
     3b0:	e5802000 	str	r2, [r0]
	*p2=temp ;
     3b4:	e5813000 	str	r3, [r1]
     3b8:	e12fff1e 	bx	lr

000003bc <draw_line>:
	draw_line(x,y,x+w-1,y,color);
	draw_line(x,y,x,y+h-1,color);
	draw_line(x+w-1,y,x+w-1,y+h-1,color);
	draw_line(x,y+h-1,x+w-1,y+h-1,color);
}
void draw_line(int x0, int y0, int x1,int y1, short int color){
     3bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     3c0:	e24dd014 	sub	sp, sp, #20
     3c4:	e58d000c 	str	r0, [sp, #12]
     3c8:	e58d1008 	str	r1, [sp, #8]
     3cc:	e58d2004 	str	r2, [sp, #4]
     3d0:	e58d3000 	str	r3, [sp]
     3d4:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	bool is_steep = abs(y1 - y0) > abs(x1 - x0);
     3d8:	e0613003 	rsb	r3, r1, r3
     3dc:	e3530000 	cmp	r3, #0
     3e0:	b2633000 	rsblt	r3, r3, #0
     3e4:	e0602002 	rsb	r2, r0, r2
     3e8:	e0228fc2 	eor	r8, r2, r2, asr #31
     3ec:	e0488fc2 	sub	r8, r8, r2, asr #31
     3f0:	e1530008 	cmp	r3, r8
     3f4:	d3a08000 	movle	r8, #0
     3f8:	c3a08001 	movgt	r8, #1
	if(is_steep){
     3fc:	e3580000 	cmp	r8, #0
     400:	0a000005 	beq	41c <draw_line+0x60>
		swap(&x0, &y0);
     404:	e28d000c 	add	r0, sp, #12
     408:	e28d1008 	add	r1, sp, #8
     40c:	ebffffe5 	bl	3a8 <swap>
		swap(&x1, &y1);
     410:	e28d0004 	add	r0, sp, #4
     414:	e1a0100d 	mov	r1, sp
     418:	ebffffe2 	bl	3a8 <swap>
	}
	if (x0 > x1){
     41c:	e59d3004 	ldr	r3, [sp, #4]
     420:	e59d200c 	ldr	r2, [sp, #12]
     424:	e1520003 	cmp	r2, r3
     428:	da000005 	ble	444 <draw_line+0x88>
		swap(&x0, &x1);
     42c:	e28d000c 	add	r0, sp, #12
     430:	e28d1004 	add	r1, sp, #4
     434:	ebffffdb 	bl	3a8 <swap>
		swap(&y0, &y1);
     438:	e28d0008 	add	r0, sp, #8
     43c:	e1a0100d 	mov	r1, sp
     440:	ebffffd8 	bl	3a8 <swap>
	}
	int deltax = x1 - x0;
     444:	e59d3004 	ldr	r3, [sp, #4]
     448:	e59d500c 	ldr	r5, [sp, #12]
     44c:	e0659003 	rsb	r9, r5, r3
	int deltay = abs(y1 - y0);
     450:	e59d2000 	ldr	r2, [sp]
     454:	e59d6008 	ldr	r6, [sp, #8]
     458:	e0667002 	rsb	r7, r6, r2
     45c:	e3570000 	cmp	r7, #0
     460:	b2677000 	rsblt	r7, r7, #0
	int error = -(deltax / 2);
     464:	e0894fa9 	add	r4, r9, r9, lsr #31
     468:	e1a040c4 	asr	r4, r4, #1
     46c:	e2644000 	rsb	r4, r4, #0
	int y = y0;
	int y_step=0;
	if (y0 < y1){
		y_step = 1;
     470:	e1520006 	cmp	r2, r6
     474:	d3e0b000 	mvnle	r11, #0
     478:	c3a0b001 	movgt	r11, #1
	} else{
		y_step = -1;
	}
	int x=x0;
	for(x;x<x1;x++){
     47c:	e1530005 	cmp	r3, r5
     480:	da00000d 	ble	4bc <draw_line+0x100>
		if (is_steep){
     484:	e3580000 	cmp	r8, #0
			plot_pixel(y, x, color);
     488:	11a00006 	movne	r0, r6
     48c:	11a01005 	movne	r1, r5
		}else{
			plot_pixel(x, y, color);
     490:	01a00005 	moveq	r0, r5
     494:	01a01006 	moveq	r1, r6
     498:	e1a0200a 	mov	r2, r10
     49c:	ebffffa1 	bl	328 <plot_pixel>
		}
		error = error + deltay;
		if (error >= 0){
     4a0:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
     4a4:	5086600b 	addpl	r6, r6, r11
			error = error - deltax;
     4a8:	50694004 	rsbpl	r4, r9, r4
		y_step = 1;
	} else{
		y_step = -1;
	}
	int x=x0;
	for(x;x<x1;x++){
     4ac:	e2855001 	add	r5, r5, #1
     4b0:	e59d3004 	ldr	r3, [sp, #4]
     4b4:	e1530005 	cmp	r3, r5
     4b8:	cafffff1 	bgt	484 <draw_line+0xc8>
		if (error >= 0){
			y = y + y_step;
			error = error - deltax;
		}
	}
}
     4bc:	e28dd014 	add	sp, sp, #20
     4c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000004c4 <draw_rectangle>:
	int nx=x;
	for(nx;nx<(x+w);nx++){
		draw_line(nx,y,nx,y+h-1,color);
	}
}
void draw_rectangle(int x,int y,int w,int h, short int color){
     4c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     4c8:	e24dd008 	sub	sp, sp, #8
     4cc:	e1a06000 	mov	r6, r0
     4d0:	e1a08001 	mov	r8, r1
     4d4:	e1a04003 	mov	r4, r3
     4d8:	e1dd72f0 	ldrsh	r7, [sp, #32]
	draw_line(x,y,x+w-1,y,color);
     4dc:	e0802002 	add	r2, r0, r2
     4e0:	e2425001 	sub	r5, r2, #1
     4e4:	e58d7000 	str	r7, [sp]
     4e8:	e1a02005 	mov	r2, r5
     4ec:	e1a03001 	mov	r3, r1
     4f0:	ebffffb1 	bl	3bc <draw_line>
	draw_line(x,y,x,y+h-1,color);
     4f4:	e0884004 	add	r4, r8, r4
     4f8:	e2444001 	sub	r4, r4, #1
     4fc:	e58d7000 	str	r7, [sp]
     500:	e1a00006 	mov	r0, r6
     504:	e1a01008 	mov	r1, r8
     508:	e1a02006 	mov	r2, r6
     50c:	e1a03004 	mov	r3, r4
     510:	ebffffa9 	bl	3bc <draw_line>
	draw_line(x+w-1,y,x+w-1,y+h-1,color);
     514:	e58d7000 	str	r7, [sp]
     518:	e1a00005 	mov	r0, r5
     51c:	e1a01008 	mov	r1, r8
     520:	e1a02005 	mov	r2, r5
     524:	e1a03004 	mov	r3, r4
     528:	ebffffa3 	bl	3bc <draw_line>
	draw_line(x,y+h-1,x+w-1,y+h-1,color);
     52c:	e58d7000 	str	r7, [sp]
     530:	e1a00006 	mov	r0, r6
     534:	e1a01004 	mov	r1, r4
     538:	e1a02005 	mov	r2, r5
     53c:	e1a03004 	mov	r3, r4
     540:	ebffff9d 	bl	3bc <draw_line>
}
     544:	e28dd008 	add	sp, sp, #8
     548:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000054c <fill_rectangle>:
		for(y;y<SCREEN_H;y++){
			plot_pixel(x, y, bg_color);
		}
	}
}
void fill_rectangle(int x,int y,int w,int h, short int color){
     54c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     550:	e24dd008 	sub	sp, sp, #8
     554:	e1a06001 	mov	r6, r1
     558:	e1dd72f0 	ldrsh	r7, [sp, #32]
	int nx=x;
	for(nx;nx<(x+w);nx++){
     55c:	e0805002 	add	r5, r0, r2
     560:	e1500005 	cmp	r0, r5
     564:	aa00000b 	bge	598 <fill_rectangle+0x4c>
			plot_pixel(x, y, bg_color);
		}
	}
}
void fill_rectangle(int x,int y,int w,int h, short int color){
	int nx=x;
     568:	e1a04000 	mov	r4, r0
	for(nx;nx<(x+w);nx++){
		draw_line(nx,y,nx,y+h-1,color);
     56c:	e0818003 	add	r8, r1, r3
     570:	e2488001 	sub	r8, r8, #1
     574:	e58d7000 	str	r7, [sp]
     578:	e1a00004 	mov	r0, r4
     57c:	e1a01006 	mov	r1, r6
     580:	e1a02004 	mov	r2, r4
     584:	e1a03008 	mov	r3, r8
     588:	ebffff8b 	bl	3bc <draw_line>
		}
	}
}
void fill_rectangle(int x,int y,int w,int h, short int color){
	int nx=x;
	for(nx;nx<(x+w);nx++){
     58c:	e2844001 	add	r4, r4, #1
     590:	e1540005 	cmp	r4, r5
     594:	bafffff6 	blt	574 <fill_rectangle+0x28>
		draw_line(nx,y,nx,y+h-1,color);
	}
}
     598:	e28dd008 	add	sp, sp, #8
     59c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000005a0 <wait_for_vsync>:
}

void wait_for_vsync(){
	volatile int *pixel_ctrl_PTR = (int *)0xFF203020;
	register int status;
	*pixel_ctrl_PTR = 1;
     5a0:	e3033fff 	movw	r3, #16383	; 0x3fff
     5a4:	e34f3f20 	movt	r3, #65312	; 0xff20
     5a8:	e3a02001 	mov	r2, #1
     5ac:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	status = *(pixel_ctrl_PTR +3);
     5b0:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01) != 0){
     5b4:	e3130001 	tst	r3, #1
     5b8:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_PTR+3);
     5bc:	e3032fff 	movw	r2, #16383	; 0x3fff
     5c0:	e34f2f20 	movt	r2, #65312	; 0xff20
     5c4:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
void wait_for_vsync(){
	volatile int *pixel_ctrl_PTR = (int *)0xFF203020;
	register int status;
	*pixel_ctrl_PTR = 1;
	status = *(pixel_ctrl_PTR +3);
	while((status & 0x01) != 0){
     5c8:	e3130001 	tst	r3, #1
     5cc:	1afffffc 	bne	5c4 <wait_for_vsync+0x24>
     5d0:	e12fff1e 	bx	lr

000005d4 <interval_timer_ISR>:
 *
******************************************************************************/
void interval_timer_ISR()
{
    volatile int * interval_timer_ptr = (int *)TIMER_BASE;
    *(interval_timer_ptr) = 0; // Clear the interrupt
     5d4:	e3a03a02 	mov	r3, #8192	; 0x2000
     5d8:	e34f3f20 	movt	r3, #65312	; 0xff20
     5dc:	e3a02000 	mov	r2, #0
     5e0:	e5832000 	str	r2, [r3]
     5e4:	e12fff1e 	bx	lr

000005e8 <pushbutton_ISR>:

void pushbutton_ISR(void){
    volatile int * KEY_ptr = (int *)KEY_BASE;
    int            press;

    press          = *(KEY_ptr + 3); // read the pushbutton interrupt register
     5e8:	e3a02000 	mov	r2, #0
     5ec:	e34f2f20 	movt	r2, #65312	; 0xff20
     5f0:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
    *(KEY_ptr + 3) = press;          // Clear the interrupt
     5f4:	e582305c 	str	r3, [r2, #92]	; 0x5c
	
	//In case of hyper-tapping
	if(press&1){
     5f8:	e3130001 	tst	r3, #1
		key[0]++;
     5fc:	13022694 	movwne	r2, #9876	; 0x2694
     600:	13402000 	movtne	r2, #0
     604:	15921000 	ldrne	r1, [r2]
     608:	12811001 	addne	r1, r1, #1
     60c:	15821000 	strne	r1, [r2]
	}
	if((press>>1)&1){
     610:	e3130002 	tst	r3, #2
		key[1]++;
     614:	13022694 	movwne	r2, #9876	; 0x2694
     618:	13402000 	movtne	r2, #0
     61c:	15921004 	ldrne	r1, [r2, #4]
     620:	12811001 	addne	r1, r1, #1
     624:	15821004 	strne	r1, [r2, #4]
	}
	if((press>>2)&1){
     628:	e3130004 	tst	r3, #4
		key[2]++;
     62c:	13022694 	movwne	r2, #9876	; 0x2694
     630:	13402000 	movtne	r2, #0
     634:	15921008 	ldrne	r1, [r2, #8]
     638:	12811001 	addne	r1, r1, #1
     63c:	15821008 	strne	r1, [r2, #8]
	}
	if((press>>3)&1){
     640:	e3130008 	tst	r3, #8
		key[3]++;
     644:	13023694 	movwne	r3, #9876	; 0x2694
     648:	13403000 	movtne	r3, #0
     64c:	1593200c 	ldrne	r2, [r3, #12]
     650:	12822001 	addne	r2, r2, #1
     654:	1583200c 	strne	r2, [r3, #12]
     658:	e12fff1e 	bx	lr

0000065c <__cs3_isr_irq>:
void interval_timer_ISR(void);
void pushbutton_ISR(void);

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(void)
{
     65c:	e24ee004 	sub	lr, lr, #4
     660:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
    // Read the ICCIAR from the processor interface
    int address = MPCORE_GIC_CPUIF + ICCIAR;
    int int_ID  = *((int *)address);
     664:	e3e03a13 	mvn	r3, #77824	; 0x13000
     668:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d

	if (int_ID == INTERVAL_TIMER_IRQ) // check if interrupt is from the Altera timer
     66c:	e3540048 	cmp	r4, #72	; 0x48
     670:	1a000001 	bne	67c <__cs3_isr_irq+0x20>
        interval_timer_ISR();
     674:	ebffffd6 	bl	5d4 <interval_timer_ISR>
     678:	ea000004 	b	690 <__cs3_isr_irq+0x34>
    else if (int_ID == KEYS_IRQ) // check if interrupt is from the KEYs
     67c:	e3540049 	cmp	r4, #73	; 0x49
     680:	1a000001 	bne	68c <__cs3_isr_irq+0x30>
        pushbutton_ISR();
     684:	ebffffd7 	bl	5e8 <pushbutton_ISR>
     688:	ea000000 	b	690 <__cs3_isr_irq+0x34>
     68c:	eafffffe 	b	68c <__cs3_isr_irq+0x30>
        while (1)
            ; // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address           = MPCORE_GIC_CPUIF + ICCEOIR;
    *((int *)address) = int_ID;
     690:	e3e03a13 	mvn	r3, #77824	; 0x13000
     694:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
     698:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

0000069c <__cs3_reset>:
    return;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void)
{
     69c:	eafffffe 	b	69c <__cs3_reset>

000006a0 <__cs3_isr_undef>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_undef(void)
{
     6a0:	eafffffe 	b	6a0 <__cs3_isr_undef>

000006a4 <__cs3_isr_swi>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_swi(void)
{
     6a4:	eafffffe 	b	6a4 <__cs3_isr_swi>

000006a8 <__cs3_isr_pabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_pabort(void)
{
     6a8:	eafffffe 	b	6a8 <__cs3_isr_pabort>

000006ac <__cs3_isr_dabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_dabort(void)
{
     6ac:	eafffffe 	b	6ac <__cs3_isr_dabort>

000006b0 <__cs3_isr_fiq>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_fiq(void)
{
     6b0:	eafffffe 	b	6b0 <__cs3_isr_fiq>

000006b4 <set_A9_IRQ_stack>:
{
    int stack, mode;
    stack = A9_ONCHIP_END - 7; // top of A9 onchip memory, aligned to 8 bytes
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     6b4:	e3a030d2 	mov	r3, #210	; 0xd2
     6b8:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r"(stack));
     6bc:	e3e03007 	mvn	r3, #7
     6c0:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     6c4:	e3a030d3 	mov	r3, #211	; 0xd3
     6c8:	e129f003 	msr	CPSR_fc, r3
     6cc:	e12fff1e 	bx	lr

000006d0 <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
    int status = SVC_MODE | INT_ENABLE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(status));
     6d0:	e3a03053 	mov	r3, #83	; 0x53
     6d4:	e129f003 	msr	CPSR_fc, r3
     6d8:	e12fff1e 	bx	lr

000006dc <config_GIC>:
void config_GIC(void)
{
    int address; // used to calculate register addresses

    /* configure the FPGA interval timer and KEYs interrupts */
    *((int *)0xFFFED848) = 0x00000101;
     6dc:	e3e03a12 	mvn	r3, #73728	; 0x12000
     6e0:	e3002101 	movw	r2, #257	; 0x101
     6e4:	e50327b7 	str	r2, [r3, #-1975]	; 0xfffff849
    *((int *)0xFFFED108) = 0x00000300;
     6e8:	e3a02c03 	mov	r2, #768	; 0x300
     6ec:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
    // priorities
    address           = MPCORE_GIC_CPUIF + ICCPMR;
    *((int *)address) = 0xFFFF;
     6f0:	e3e01a13 	mvn	r1, #77824	; 0x13000
     6f4:	e30f2fff 	movw	r2, #65535	; 0xffff
     6f8:	e5012efb 	str	r2, [r1, #-3835]	; 0xfffff105

    // Set CPU Interface Control Register (ICCICR). Enable signaling of
    // interrupts
    address           = MPCORE_GIC_CPUIF + ICCICR;
    *((int *)address) = ENABLE;
     6fc:	e3a02001 	mov	r2, #1
     700:	e5012eff 	str	r2, [r1, #-3839]	; 0xfffff101

    // Configure the Distributor Control Register (ICDDCR) to send pending
    // interrupts to CPUs
    address           = MPCORE_GIC_DIST + ICDDCR;
    *((int *)address) = ENABLE;
     704:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
     708:	e12fff1e 	bx	lr

0000070c <lift_board>:
		}
		lift_board(p1_board,&p1_odd_row);
		key[3]--;
	}
}
void lift_board(int board[][BOARD_ROWS], bool *odd){
     70c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     710:	e1a06001 	mov	r6, r1
     714:	e1a05000 	mov	r5, r0
     718:	e3a04001 	mov	r4, #1
     71c:	e302170c 	movw	r1, #9996	; 0x270c
     720:	e3401000 	movt	r1, #0
     724:	e3a07000 	mov	r7, #0
     728:	ea000008 	b	750 <lift_board+0x44>
	int row = 0;
	for(row;row<BOARD_ROWS-1;row++){
		int col = 0;
		for(col;col<BOARD_COLS;col++){
			board[row][col] = p1_board[row+1][col];
     72c:	e5b2c004 	ldr	r12, [r2, #4]!
     730:	e78ec003 	str	r12, [lr, r3]
     734:	e2833004 	add	r3, r3, #4
}
void lift_board(int board[][BOARD_ROWS], bool *odd){
	int row = 0;
	for(row;row<BOARD_ROWS-1;row++){
		int col = 0;
		for(col;col<BOARD_COLS;col++){
     738:	e3530014 	cmp	r3, #20
     73c:	1afffffa 	bne	72c <lift_board+0x20>
     740:	e2844001 	add	r4, r4, #1
     744:	e2855014 	add	r5, r5, #20
		key[3]--;
	}
}
void lift_board(int board[][BOARD_ROWS], bool *odd){
	int row = 0;
	for(row;row<BOARD_ROWS-1;row++){
     748:	e3540005 	cmp	r4, #5
     74c:	0a000005 	beq	768 <lift_board+0x5c>
		int col = 0;
		for(col;col<BOARD_COLS;col++){
			board[row][col] = p1_board[row+1][col];
     750:	e1a0e005 	mov	lr, r5
		}
		lift_board(p1_board,&p1_odd_row);
		key[3]--;
	}
}
void lift_board(int board[][BOARD_ROWS], bool *odd){
     754:	e0842104 	add	r2, r4, r4, lsl #2
     758:	e0812102 	add	r2, r1, r2, lsl #2
     75c:	e2422004 	sub	r2, r2, #4
     760:	e1a03007 	mov	r3, r7
     764:	eafffff0 	b	72c <lift_board+0x20>
     768:	e2805050 	add	r5, r0, #80	; 0x50
     76c:	e3a04000 	mov	r4, #0
		}	
	}
	row = BOARD_ROWS-1;
	int col=0;
	for(col;col<BOARD_COLS;col++){
		board[row][col] = NONE;
     770:	e1a07004 	mov	r7, r4
     774:	e4857004 	str	r7, [r5], #4
		int type = rand()%TOTAL_TYPES;
     778:	eb000114 	bl	bd0 <rand>
     77c:	e0803fa0 	add	r3, r0, r0, lsr #31
     780:	e2033001 	and	r3, r3, #1
     784:	e0430fa0 	sub	r0, r3, r0, lsr #31
		//type =1;
		if(*odd){
     788:	e5d62000 	ldrb	r2, [r6]
     78c:	e3520000 	cmp	r2, #0
     790:	0a000006 	beq	7b0 <lift_board+0xa4>
			if(col%2==1){
     794:	e1a02fa4 	lsr	r2, r4, #31
     798:	e0841002 	add	r1, r4, r2
     79c:	e2011001 	and	r1, r1, #1
     7a0:	e0622001 	rsb	r2, r2, r1
     7a4:	e3520001 	cmp	r2, #1
				board[row][col] = type;
     7a8:	05050004 	streq	r0, [r5, #-4]
     7ac:	ea000001 	b	7b8 <lift_board+0xac>
			}
		}else{
			if(col%2==0){
     7b0:	e3140001 	tst	r4, #1
				board[row][col] = type;
     7b4:	05050004 	streq	r0, [r5, #-4]
			board[row][col] = p1_board[row+1][col];
		}	
	}
	row = BOARD_ROWS-1;
	int col=0;
	for(col;col<BOARD_COLS;col++){
     7b8:	e2844001 	add	r4, r4, #1
     7bc:	e3540005 	cmp	r4, #5
     7c0:	1affffeb 	bne	774 <lift_board+0x68>
			if(col%2==0){
				board[row][col] = type;
			}
		}
	}
	*odd = !*odd;
     7c4:	e5d63000 	ldrb	r3, [r6]
     7c8:	e2233001 	eor	r3, r3, #1
     7cc:	e5c63000 	strb	r3, [r6]
     7d0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000007d4 <logic>:
extern int game_mode;

bool p1_odd_row = false;
bool p2_odd_row = false;
void lift_board(int board[][BOARD_ROWS], bool *odd);
void logic(){
     7d4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	
	//Handle key input
	//Used while loop to handle hyper-tapping between frames
	
	//Player 2. Key[0] = right, Key[1] = left
	while(key[0]!=0){
     7d8:	e3023694 	movw	r3, #9876	; 0x2694
     7dc:	e3403000 	movt	r3, #0
     7e0:	e5933000 	ldr	r3, [r3]
     7e4:	e3530000 	cmp	r3, #0
     7e8:	0a000005 	beq	804 <logic+0x30>
     7ec:	e2533001 	subs	r3, r3, #1
     7f0:	1afffffd 	bne	7ec <logic+0x18>
     7f4:	e3023694 	movw	r3, #9876	; 0x2694
     7f8:	e3403000 	movt	r3, #0
     7fc:	e3a02000 	mov	r2, #0
     800:	e5832000 	str	r2, [r3]
		key[0]--;
	}
	while(key[1]!=0){
     804:	e3023694 	movw	r3, #9876	; 0x2694
     808:	e3403000 	movt	r3, #0
     80c:	e5933004 	ldr	r3, [r3, #4]
     810:	e3530000 	cmp	r3, #0
     814:	0a000005 	beq	830 <logic+0x5c>
     818:	e2533001 	subs	r3, r3, #1
     81c:	1afffffd 	bne	818 <logic+0x44>
     820:	e3023694 	movw	r3, #9876	; 0x2694
     824:	e3403000 	movt	r3, #0
     828:	e3a02000 	mov	r2, #0
     82c:	e5832004 	str	r2, [r3, #4]
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
     830:	e3023694 	movw	r3, #9876	; 0x2694
     834:	e3403000 	movt	r3, #0
     838:	e5933008 	ldr	r3, [r3, #8]
     83c:	e3530000 	cmp	r3, #0
     840:	0a000013 	beq	894 <logic+0xc0>
		if(p1_x != (BOARD_ROWS-1)){
     844:	e3015e20 	movw	r5, #7712	; 0x1e20
     848:	e3405000 	movt	r5, #0
			p1_x+=1;
		}else{
		}
		lift_board(p1_board,&p1_odd_row);
     84c:	e302770c 	movw	r7, #9996	; 0x270c
     850:	e3407000 	movt	r7, #0
     854:	e30266a4 	movw	r6, #9892	; 0x26a4
     858:	e3406000 	movt	r6, #0
		key[2]--;
     85c:	e3024694 	movw	r4, #9876	; 0x2694
     860:	e3404000 	movt	r4, #0
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
		if(p1_x != (BOARD_ROWS-1)){
     864:	e5953000 	ldr	r3, [r5]
     868:	e3530004 	cmp	r3, #4
			p1_x+=1;
     86c:	12833001 	addne	r3, r3, #1
     870:	15853000 	strne	r3, [r5]
		}else{
		}
		lift_board(p1_board,&p1_odd_row);
     874:	e1a00007 	mov	r0, r7
     878:	e1a01006 	mov	r1, r6
     87c:	ebffffa2 	bl	70c <lift_board>
		key[2]--;
     880:	e5943008 	ldr	r3, [r4, #8]
     884:	e2433001 	sub	r3, r3, #1
     888:	e5843008 	str	r3, [r4, #8]
	while(key[1]!=0){
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
     88c:	e3530000 	cmp	r3, #0
     890:	1afffff3 	bne	864 <logic+0x90>
		}else{
		}
		lift_board(p1_board,&p1_odd_row);
		key[2]--;
	}
	while(key[3]!=0){
     894:	e3023694 	movw	r3, #9876	; 0x2694
     898:	e3403000 	movt	r3, #0
     89c:	e593300c 	ldr	r3, [r3, #12]
     8a0:	e3530000 	cmp	r3, #0
     8a4:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
		if(p1_x != 0){
     8a8:	e3015e20 	movw	r5, #7712	; 0x1e20
     8ac:	e3405000 	movt	r5, #0
			p1_x-=1;
		}else{
		}
		lift_board(p1_board,&p1_odd_row);
     8b0:	e302770c 	movw	r7, #9996	; 0x270c
     8b4:	e3407000 	movt	r7, #0
     8b8:	e30266a4 	movw	r6, #9892	; 0x26a4
     8bc:	e3406000 	movt	r6, #0
		key[3]--;
     8c0:	e3024694 	movw	r4, #9876	; 0x2694
     8c4:	e3404000 	movt	r4, #0
		}
		lift_board(p1_board,&p1_odd_row);
		key[2]--;
	}
	while(key[3]!=0){
		if(p1_x != 0){
     8c8:	e5953000 	ldr	r3, [r5]
     8cc:	e3530000 	cmp	r3, #0
			p1_x-=1;
     8d0:	12433001 	subne	r3, r3, #1
     8d4:	15853000 	strne	r3, [r5]
		}else{
		}
		lift_board(p1_board,&p1_odd_row);
     8d8:	e1a00007 	mov	r0, r7
     8dc:	e1a01006 	mov	r1, r6
     8e0:	ebffff89 	bl	70c <lift_board>
		key[3]--;
     8e4:	e594300c 	ldr	r3, [r4, #12]
     8e8:	e2433001 	sub	r3, r3, #1
     8ec:	e584300c 	str	r3, [r4, #12]
		}else{
		}
		lift_board(p1_board,&p1_odd_row);
		key[2]--;
	}
	while(key[3]!=0){
     8f0:	e3530000 	cmp	r3, #0
     8f4:	1afffff3 	bne	8c8 <logic+0xf4>
     8f8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000008fc <init_board>:
			}
		}
	}
	*odd = !*odd;
}
void init_board(){
     8fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	srand(time(NULL));
     900:	e3a00000 	mov	r0, #0
     904:	eb0000c8 	bl	c2c <time>
     908:	eb0000a9 	bl	bb4 <srand>
     90c:	e302870c 	movw	r8, #9996	; 0x270c
     910:	e3408000 	movt	r8, #0
     914:	e30276a8 	movw	r7, #9896	; 0x26a8
     918:	e3407000 	movt	r7, #0
	int row=0;
     91c:	e3a0a000 	mov	r10, #0
			}
		}
	}
	*odd = !*odd;
}
void init_board(){
     920:	e1a0900a 	mov	r9, r10
     924:	ea000019 	b	990 <init_board+0x94>
	srand(time(NULL));
	int row=0;
	for(row;row<BOARD_ROWS;row++){
		int col=0;
		for(col;col<BOARD_COLS;col++){
			int type = rand()%TOTAL_TYPES;
     928:	eb0000a8 	bl	bd0 <rand>
     92c:	e0803fa0 	add	r3, r0, r0, lsr #31
     930:	e2033001 	and	r3, r3, #1
     934:	e0430fa0 	sub	r0, r3, r0, lsr #31
			if(row%2==0){
     938:	e3560000 	cmp	r6, #0
     93c:	1a000007 	bne	960 <init_board+0x64>
				if(col%2==1){
     940:	e1a02fa4 	lsr	r2, r4, #31
     944:	e0841002 	add	r1, r4, r2
     948:	e2011001 	and	r1, r1, #1
     94c:	e0622001 	rsb	r2, r2, r1
     950:	e3520001 	cmp	r2, #1
					p1_board[row][col] = type;
     954:	07880005 	streq	r0, [r8, r5]
					p2_board[row][col] = type;
     958:	07870005 	streq	r0, [r7, r5]
     95c:	ea000002 	b	96c <init_board+0x70>
				}
			}
			else{
				if(col%2==0){
     960:	e3140001 	tst	r4, #1
					p1_board[row][col] = type;
     964:	07880005 	streq	r0, [r8, r5]
					p2_board[row][col] = type;
     968:	07870005 	streq	r0, [r7, r5]
void init_board(){
	srand(time(NULL));
	int row=0;
	for(row;row<BOARD_ROWS;row++){
		int col=0;
		for(col;col<BOARD_COLS;col++){
     96c:	e2844001 	add	r4, r4, #1
     970:	e2855004 	add	r5, r5, #4
     974:	e3540005 	cmp	r4, #5
     978:	1affffea 	bne	928 <init_board+0x2c>
	*odd = !*odd;
}
void init_board(){
	srand(time(NULL));
	int row=0;
	for(row;row<BOARD_ROWS;row++){
     97c:	e28aa001 	add	r10, r10, #1
     980:	e2888014 	add	r8, r8, #20
     984:	e2877014 	add	r7, r7, #20
     988:	e35a0005 	cmp	r10, #5
     98c:	0a000003 	beq	9a0 <init_board+0xa4>
			}
		}
	}
	*odd = !*odd;
}
void init_board(){
     990:	e1a05009 	mov	r5, r9
     994:	e1a04009 	mov	r4, r9
	int row=0;
	for(row;row<BOARD_ROWS;row++){
		int col=0;
		for(col;col<BOARD_COLS;col++){
			int type = rand()%TOTAL_TYPES;
			if(row%2==0){
     998:	e20a6001 	and	r6, r10, #1
     99c:	eaffffe1 	b	928 <init_board+0x2c>
					p2_board[row][col] = type;
				}
			}
		}
	}
	p1_board[1][p1_x] = PLATFORM;
     9a0:	e3013e20 	movw	r3, #7712	; 0x1e20
     9a4:	e3403000 	movt	r3, #0
     9a8:	e5932000 	ldr	r2, [r3]
     9ac:	e302370c 	movw	r3, #9996	; 0x270c
     9b0:	e3403000 	movt	r3, #0
     9b4:	e2822005 	add	r2, r2, #5
     9b8:	e3a01001 	mov	r1, #1
     9bc:	e7831102 	str	r1, [r3, r2, lsl #2]
	p2_board[1][p1_x] = PLATFORM;
     9c0:	e30236a8 	movw	r3, #9896	; 0x26a8
     9c4:	e3403000 	movt	r3, #0
     9c8:	e7831102 	str	r1, [r3, r2, lsl #2]
     9cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

000009d0 <draw_role>:
		draw_board(p2_center,p2_board);
		draw_role(p1_center,p1_x);
		draw_role(p2_center,p2_x);
	}
}
void draw_role(int center, int x){
     9d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     9d4:	e24dd00c 	sub	sp, sp, #12
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	fill_rectangle((x-col_center)*PLATFORM_W + center - ROLE_W/2,
     9d8:	e2411002 	sub	r1, r1, #2
     9dc:	e0811081 	add	r1, r1, r1, lsl #1
     9e0:	e0800181 	add	r0, r0, r1, lsl #3
     9e4:	e3a03000 	mov	r3, #0
     9e8:	e58d3000 	str	r3, [sp]
     9ec:	e2400005 	sub	r0, r0, #5
     9f0:	e3a0104a 	mov	r1, #74	; 0x4a
     9f4:	e3a0200a 	mov	r2, #10
     9f8:	e1a03002 	mov	r3, r2
     9fc:	ebfffed2 	bl	54c <fill_rectangle>
					(PLATFORM_H+P_V_INTERVAL)+board_y-ROLE_H,
					ROLE_W,ROLE_H,0);
}
     a00:	e28dd00c 	add	sp, sp, #12
     a04:	e8bd8000 	ldmfd	sp!, {pc}

00000a08 <draw_board>:
void draw_board(int center, int board[][BOARD_ROWS]){
     a08:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a0c:	e24dd00c 	sub	sp, sp, #12
     a10:	e1a0b000 	mov	r11, r0
     a14:	e1a08001 	mov	r8, r1
     a18:	e3a07030 	mov	r7, #48	; 0x30
     a1c:	e3a0a000 	mov	r10, #0
     a20:	ea000014 	b	a78 <draw_board+0x70>
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
	for(row;row<BOARD_ROWS;row++){
		int col=0;
		for(col;col<BOARD_COLS;col++){
			if(board[row][col]==PLATFORM){
     a24:	e7963004 	ldr	r3, [r6, r4]
     a28:	e3530001 	cmp	r3, #1
     a2c:	1a000009 	bne	a58 <draw_board+0x50>
				fill_rectangle((col-col_center)*PLATFORM_W + center - PLATFORM_W/2,
     a30:	e1a0000a 	mov	r0, r10
     a34:	e3a010ff 	mov	r1, #255	; 0xff
     a38:	e1a0200a 	mov	r2, r10
     a3c:	ebfffe29 	bl	2e8 <rgb24to16>
     a40:	e58d0000 	str	r0, [sp]
     a44:	e1a00005 	mov	r0, r5
     a48:	e1a01009 	mov	r1, r9
     a4c:	e3a02018 	mov	r2, #24
     a50:	e3a03006 	mov	r3, #6
     a54:	ebfffebc 	bl	54c <fill_rectangle>
     a58:	e2844004 	add	r4, r4, #4
     a5c:	e2855018 	add	r5, r5, #24
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
	for(row;row<BOARD_ROWS;row++){
		int col=0;
		for(col;col<BOARD_COLS;col++){
     a60:	e3540014 	cmp	r4, #20
     a64:	1affffee 	bne	a24 <draw_board+0x1c>
     a68:	e2888014 	add	r8, r8, #20
     a6c:	e2877024 	add	r7, r7, #36	; 0x24
}
void draw_board(int center, int board[][BOARD_ROWS]){
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
	for(row;row<BOARD_ROWS;row++){
     a70:	e35700e4 	cmp	r7, #228	; 0xe4
     a74:	0a000004 	beq	a8c <draw_board+0x84>
		int col=0;
		for(col;col<BOARD_COLS;col++){
			if(board[row][col]==PLATFORM){
     a78:	e1a06008 	mov	r6, r8
				fill_rectangle((col-col_center)*PLATFORM_W + center - PLATFORM_W/2,
     a7c:	e1a09007 	mov	r9, r7
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	fill_rectangle((x-col_center)*PLATFORM_W + center - ROLE_W/2,
					(PLATFORM_H+P_V_INTERVAL)+board_y-ROLE_H,
					ROLE_W,ROLE_H,0);
}
void draw_board(int center, int board[][BOARD_ROWS]){
     a80:	e24b503c 	sub	r5, r11, #60	; 0x3c
     a84:	e1a0400a 	mov	r4, r10
     a88:	eaffffe5 	b	a24 <draw_board+0x1c>
								PLATFORM_W,PLATFORM_H,
								rgb24to16(0,255,0));
			}
		}
	}
}
     a8c:	e28dd00c 	add	sp, sp, #12
     a90:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000a94 <scene_draw>:
extern int p2_board[BOARD_ROWS][BOARD_COLS];

extern int game_mode;
void draw_board(int center, int board[][BOARD_ROWS]);
void draw_role(int center, int x);
void scene_draw(){
     a94:	e92d4010 	push	{r4, lr}
     a98:	e24dd008 	sub	sp, sp, #8
	if(game_mode == SINGLE){
     a9c:	e3013e24 	movw	r3, #7716	; 0x1e24
     aa0:	e3403000 	movt	r3, #0
     aa4:	e5933000 	ldr	r3, [r3]
     aa8:	e3530001 	cmp	r3, #1
     aac:	0a000020 	beq	b34 <scene_draw+0xa0>
	}
	else if(game_mode == DUEL){
     ab0:	e3530002 	cmp	r3, #2
     ab4:	1a00001e 	bne	b34 <scene_draw+0xa0>
		draw_line(SCREEN_W/2,0,SCREEN_W/2,SCREEN_H,0);
     ab8:	e3a04000 	mov	r4, #0
     abc:	e58d4000 	str	r4, [sp]
     ac0:	e3a000a0 	mov	r0, #160	; 0xa0
     ac4:	e1a01004 	mov	r1, r4
     ac8:	e1a02000 	mov	r2, r0
     acc:	e3a030f0 	mov	r3, #240	; 0xf0
     ad0:	ebfffe39 	bl	3bc <draw_line>
		draw_line(SCREEN_W/2,0,SCREEN_W/2,SCREEN_H,0);
     ad4:	e58d4000 	str	r4, [sp]
     ad8:	e3a000a0 	mov	r0, #160	; 0xa0
     adc:	e1a01004 	mov	r1, r4
     ae0:	e1a02000 	mov	r2, r0
     ae4:	e3a030f0 	mov	r3, #240	; 0xf0
     ae8:	ebfffe33 	bl	3bc <draw_line>
		int p1_center = SCREEN_W/4;
		int p2_center = SCREEN_W*3/4;
		draw_board(p1_center,p1_board);
     aec:	e3a00050 	mov	r0, #80	; 0x50
     af0:	e302170c 	movw	r1, #9996	; 0x270c
     af4:	e3401000 	movt	r1, #0
     af8:	ebffffc2 	bl	a08 <draw_board>
		draw_board(p2_center,p2_board);
     afc:	e3a000f0 	mov	r0, #240	; 0xf0
     b00:	e30216a8 	movw	r1, #9896	; 0x26a8
     b04:	e3401000 	movt	r1, #0
     b08:	ebffffbe 	bl	a08 <draw_board>
		draw_role(p1_center,p1_x);
     b0c:	e3013e20 	movw	r3, #7712	; 0x1e20
     b10:	e3403000 	movt	r3, #0
     b14:	e3a00050 	mov	r0, #80	; 0x50
     b18:	e5931000 	ldr	r1, [r3]
     b1c:	ebffffab 	bl	9d0 <draw_role>
		draw_role(p2_center,p2_x);
     b20:	e3013e1c 	movw	r3, #7708	; 0x1e1c
     b24:	e3403000 	movt	r3, #0
     b28:	e3a000f0 	mov	r0, #240	; 0xf0
     b2c:	e5931000 	ldr	r1, [r3]
     b30:	ebffffa6 	bl	9d0 <draw_role>
	}
}
     b34:	e28dd008 	add	sp, sp, #8
     b38:	e8bd8010 	pop	{r4, pc}

00000b3c <clear>:
								rgb24to16(0,255,0));
			}
		}
	}
}
void clear(){
     b3c:	e92d4010 	push	{r4, lr}
	erase_mode = true;
     b40:	e3024690 	movw	r4, #9872	; 0x2690
     b44:	e3404000 	movt	r4, #0
     b48:	e3a03001 	mov	r3, #1
     b4c:	e5c43000 	strb	r3, [r4]
	scene_draw();
     b50:	ebffffcf 	bl	a94 <scene_draw>
	erase_mode = false;
     b54:	e3a03000 	mov	r3, #0
     b58:	e5c43000 	strb	r3, [r4]
     b5c:	e8bd8010 	pop	{r4, pc}

00000b60 <atexit>:
     b60:	e1a01000 	mov	r1, r0
     b64:	e3a00000 	mov	r0, #0
     b68:	e92d4008 	push	{r3, lr}
     b6c:	e1a02000 	mov	r2, r0
     b70:	e1a03000 	mov	r3, r0
     b74:	eb00003f 	bl	c78 <__register_exitproc>
     b78:	e8bd4008 	pop	{r3, lr}
     b7c:	e12fff1e 	bx	lr

00000b80 <exit>:
     b80:	e92d4008 	push	{r3, lr}
     b84:	e3a01000 	mov	r1, #0
     b88:	e1a04000 	mov	r4, r0
     b8c:	eb000076 	bl	d6c <__call_exitprocs>
     b90:	e59f3018 	ldr	r3, [pc, #24]	; bb0 <exit+0x30>
     b94:	e5930000 	ldr	r0, [r3]
     b98:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     b9c:	e3530000 	cmp	r3, #0
     ba0:	11a0e00f 	movne	lr, pc
     ba4:	112fff13 	bxne	r3
     ba8:	e1a00004 	mov	r0, r4
     bac:	eb000424 	bl	1c44 <_exit>
     bb0:	00001db8 	.word	0x00001db8

00000bb4 <srand>:
     bb4:	e59f3010 	ldr	r3, [pc, #16]	; bcc <srand+0x18>
     bb8:	e5933000 	ldr	r3, [r3]
     bbc:	e3a02000 	mov	r2, #0
     bc0:	e58300a8 	str	r0, [r3, #168]	; 0xa8
     bc4:	e58320ac 	str	r2, [r3, #172]	; 0xac
     bc8:	e12fff1e 	bx	lr
     bcc:	00001e28 	.word	0x00001e28

00000bd0 <rand>:
     bd0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
     bd4:	e59f3044 	ldr	r3, [pc, #68]	; c20 <rand+0x50>
     bd8:	e593c000 	ldr	r12, [r3]
     bdc:	e59f4040 	ldr	r4, [pc, #64]	; c24 <rand+0x54>
     be0:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
     be4:	e0040492 	mul	r4, r2, r4
     be8:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
     bec:	e59f3034 	ldr	r3, [pc, #52]	; c28 <rand+0x58>
     bf0:	e0244193 	mla	r4, r3, r1, r4
     bf4:	e0810392 	umull	r0, r1, r2, r3
     bf8:	e3a02001 	mov	r2, #1
     bfc:	e0922000 	adds	r2, r2, r0
     c00:	e0841001 	add	r1, r4, r1
     c04:	e3a03000 	mov	r3, #0
     c08:	e0a33001 	adc	r3, r3, r1
     c0c:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
     c10:	e58c30ac 	str	r3, [r12, #172]	; 0xac
     c14:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
     c18:	e8bd0010 	ldmfd	sp!, {r4}
     c1c:	e12fff1e 	bx	lr
     c20:	00001e28 	.word	0x00001e28
     c24:	5851f42d 	.word	0x5851f42d
     c28:	4c957f2d 	.word	0x4c957f2d

00000c2c <time>:
     c2c:	e92d4010 	push	{r4, lr}
     c30:	e59f303c 	ldr	r3, [pc, #60]	; c74 <time+0x48>
     c34:	e24dd008 	sub	sp, sp, #8
     c38:	e1a04000 	mov	r4, r0
     c3c:	e1a0100d 	mov	r1, sp
     c40:	e5930000 	ldr	r0, [r3]
     c44:	e3a02000 	mov	r2, #0
     c48:	eb0000c0 	bl	f50 <_gettimeofday_r>
     c4c:	e3500000 	cmp	r0, #0
     c50:	ba000005 	blt	c6c <time+0x40>
     c54:	e59d0000 	ldr	r0, [sp]
     c58:	e3540000 	cmp	r4, #0
     c5c:	15840000 	strne	r0, [r4]
     c60:	e28dd008 	add	sp, sp, #8
     c64:	e8bd4010 	pop	{r4, lr}
     c68:	e12fff1e 	bx	lr
     c6c:	e3e00000 	mvn	r0, #0
     c70:	eafffffa 	b	c60 <time+0x34>
     c74:	00001e28 	.word	0x00001e28

00000c78 <__register_exitproc>:
     c78:	e59fc0e4 	ldr	r12, [pc, #228]	; d64 <__register_exitproc+0xec>
     c7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     c80:	e59c4000 	ldr	r4, [r12]
     c84:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     c88:	e35c0000 	cmp	r12, #0
     c8c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     c90:	e59c5004 	ldr	r5, [r12, #4]
     c94:	0584c148 	streq	r12, [r4, #328]	; 0x148
     c98:	e355001f 	cmp	r5, #31
     c9c:	e24dd010 	sub	sp, sp, #16
     ca0:	e1a06000 	mov	r6, r0
     ca4:	da000015 	ble	d00 <__register_exitproc+0x88>
     ca8:	e59f00b8 	ldr	r0, [pc, #184]	; d68 <__register_exitproc+0xf0>
     cac:	e3500000 	cmp	r0, #0
     cb0:	1a000001 	bne	cbc <__register_exitproc+0x44>
     cb4:	e3e00000 	mvn	r0, #0
     cb8:	ea000018 	b	d20 <__register_exitproc+0xa8>
     cbc:	e3a00e19 	mov	r0, #400	; 0x190
     cc0:	e58d100c 	str	r1, [sp, #12]
     cc4:	e58d2008 	str	r2, [sp, #8]
     cc8:	e58d3004 	str	r3, [sp, #4]
     ccc:	e320f000 	nop	{0}
     cd0:	e250c000 	subs	r12, r0, #0
     cd4:	e59d100c 	ldr	r1, [sp, #12]
     cd8:	e59d2008 	ldr	r2, [sp, #8]
     cdc:	e59d3004 	ldr	r3, [sp, #4]
     ce0:	0afffff3 	beq	cb4 <__register_exitproc+0x3c>
     ce4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     ce8:	e3a00000 	mov	r0, #0
     cec:	e58c0004 	str	r0, [r12, #4]
     cf0:	e58c5000 	str	r5, [r12]
     cf4:	e584c148 	str	r12, [r4, #328]	; 0x148
     cf8:	e58c0188 	str	r0, [r12, #392]	; 0x188
     cfc:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     d00:	e3560000 	cmp	r6, #0
     d04:	e59c4004 	ldr	r4, [r12, #4]
     d08:	1a000007 	bne	d2c <__register_exitproc+0xb4>
     d0c:	e2843002 	add	r3, r4, #2
     d10:	e2844001 	add	r4, r4, #1
     d14:	e78c1103 	str	r1, [r12, r3, lsl #2]
     d18:	e58c4004 	str	r4, [r12, #4]
     d1c:	e3a00000 	mov	r0, #0
     d20:	e28dd010 	add	sp, sp, #16
     d24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     d28:	e12fff1e 	bx	lr
     d2c:	e3a00001 	mov	r0, #1
     d30:	e1a00410 	lsl	r0, r0, r4
     d34:	e08c8104 	add	r8, r12, r4, lsl #2
     d38:	e3560002 	cmp	r6, #2
     d3c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     d40:	e5883108 	str	r3, [r8, #264]	; 0x108
     d44:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     d48:	e1877000 	orr	r7, r7, r0
     d4c:	01830000 	orreq	r0, r3, r0
     d50:	e1a05008 	mov	r5, r8
     d54:	e5882088 	str	r2, [r8, #136]	; 0x88
     d58:	e58c7188 	str	r7, [r12, #392]	; 0x188
     d5c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     d60:	eaffffe9 	b	d0c <__register_exitproc+0x94>
     d64:	00001db8 	.word	0x00001db8
     d68:	00000000 	.word	0x00000000

00000d6c <__call_exitprocs>:
     d6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     d70:	e59f3168 	ldr	r3, [pc, #360]	; ee0 <__call_exitprocs+0x174>
     d74:	e5933000 	ldr	r3, [r3]
     d78:	e24dd014 	sub	sp, sp, #20
     d7c:	e58d3004 	str	r3, [sp, #4]
     d80:	e2833f52 	add	r3, r3, #328	; 0x148
     d84:	e58d0008 	str	r0, [sp, #8]
     d88:	e58d300c 	str	r3, [sp, #12]
     d8c:	e1a07001 	mov	r7, r1
     d90:	e3a08001 	mov	r8, #1
     d94:	e59d3004 	ldr	r3, [sp, #4]
     d98:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     d9c:	e3560000 	cmp	r6, #0
     da0:	e59db00c 	ldr	r11, [sp, #12]
     da4:	0a000033 	beq	e78 <__call_exitprocs+0x10c>
     da8:	e5965004 	ldr	r5, [r6, #4]
     dac:	e2554001 	subs	r4, r5, #1
     db0:	5286a088 	addpl	r10, r6, #136	; 0x88
     db4:	5285501f 	addpl	r5, r5, #31
     db8:	508a5105 	addpl	r5, r10, r5, lsl #2
     dbc:	5a000007 	bpl	de0 <__call_exitprocs+0x74>
     dc0:	ea000029 	b	e6c <__call_exitprocs+0x100>
     dc4:	e5953000 	ldr	r3, [r5]
     dc8:	e1530007 	cmp	r3, r7
     dcc:	0a000005 	beq	de8 <__call_exitprocs+0x7c>
     dd0:	e2444001 	sub	r4, r4, #1
     dd4:	e3740001 	cmn	r4, #1
     dd8:	e2455004 	sub	r5, r5, #4
     ddc:	0a000022 	beq	e6c <__call_exitprocs+0x100>
     de0:	e3570000 	cmp	r7, #0
     de4:	1afffff6 	bne	dc4 <__call_exitprocs+0x58>
     de8:	e5963004 	ldr	r3, [r6, #4]
     dec:	e06a2005 	rsb	r2, r10, r5
     df0:	e2433001 	sub	r3, r3, #1
     df4:	e0862002 	add	r2, r6, r2
     df8:	e1530004 	cmp	r3, r4
     dfc:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     e00:	13a01000 	movne	r1, #0
     e04:	05864004 	streq	r4, [r6, #4]
     e08:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     e0c:	e3530000 	cmp	r3, #0
     e10:	0affffee 	beq	dd0 <__call_exitprocs+0x64>
     e14:	e1a02418 	lsl	r2, r8, r4
     e18:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     e1c:	e1120001 	tst	r2, r1
     e20:	e5969004 	ldr	r9, [r6, #4]
     e24:	0a000016 	beq	e84 <__call_exitprocs+0x118>
     e28:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     e2c:	e1120001 	tst	r2, r1
     e30:	1a000016 	bne	e90 <__call_exitprocs+0x124>
     e34:	e59d0008 	ldr	r0, [sp, #8]
     e38:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     e3c:	e1a0e00f 	mov	lr, pc
     e40:	e12fff13 	bx	r3
     e44:	e5963004 	ldr	r3, [r6, #4]
     e48:	e1530009 	cmp	r3, r9
     e4c:	1affffd0 	bne	d94 <__call_exitprocs+0x28>
     e50:	e59b3000 	ldr	r3, [r11]
     e54:	e1530006 	cmp	r3, r6
     e58:	1affffcd 	bne	d94 <__call_exitprocs+0x28>
     e5c:	e2444001 	sub	r4, r4, #1
     e60:	e3740001 	cmn	r4, #1
     e64:	e2455004 	sub	r5, r5, #4
     e68:	1affffdc 	bne	de0 <__call_exitprocs+0x74>
     e6c:	e59f1070 	ldr	r1, [pc, #112]	; ee4 <__call_exitprocs+0x178>
     e70:	e3510000 	cmp	r1, #0
     e74:	1a000009 	bne	ea0 <__call_exitprocs+0x134>
     e78:	e28dd014 	add	sp, sp, #20
     e7c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     e80:	e12fff1e 	bx	lr
     e84:	e1a0e00f 	mov	lr, pc
     e88:	e12fff13 	bx	r3
     e8c:	eaffffec 	b	e44 <__call_exitprocs+0xd8>
     e90:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
     e94:	e1a0e00f 	mov	lr, pc
     e98:	e12fff13 	bx	r3
     e9c:	eaffffe8 	b	e44 <__call_exitprocs+0xd8>
     ea0:	e5963004 	ldr	r3, [r6, #4]
     ea4:	e3530000 	cmp	r3, #0
     ea8:	e5963000 	ldr	r3, [r6]
     eac:	1a000008 	bne	ed4 <__call_exitprocs+0x168>
     eb0:	e3530000 	cmp	r3, #0
     eb4:	0a000006 	beq	ed4 <__call_exitprocs+0x168>
     eb8:	e1a00006 	mov	r0, r6
     ebc:	e58b3000 	str	r3, [r11]
     ec0:	e320f000 	nop	{0}
     ec4:	e59b6000 	ldr	r6, [r11]
     ec8:	e3560000 	cmp	r6, #0
     ecc:	1affffb5 	bne	da8 <__call_exitprocs+0x3c>
     ed0:	eaffffe8 	b	e78 <__call_exitprocs+0x10c>
     ed4:	e1a0b006 	mov	r11, r6
     ed8:	e1a06003 	mov	r6, r3
     edc:	eafffff9 	b	ec8 <__call_exitprocs+0x15c>
     ee0:	00001db8 	.word	0x00001db8
     ee4:	00000000 	.word	0x00000000

00000ee8 <register_fini>:
     ee8:	e92d4008 	push	{r3, lr}
     eec:	e59f3010 	ldr	r3, [pc, #16]	; f04 <register_fini+0x1c>
     ef0:	e3530000 	cmp	r3, #0
     ef4:	159f000c 	ldrne	r0, [pc, #12]	; f08 <register_fini+0x20>
     ef8:	1bffff18 	blne	b60 <atexit>
     efc:	e8bd4008 	pop	{r3, lr}
     f00:	e12fff1e 	bx	lr
     f04:	00001de0 	.word	0x00001de0
     f08:	00000f0c 	.word	0x00000f0c

00000f0c <__libc_fini_array>:
     f0c:	e92d4038 	push	{r3, r4, r5, lr}
     f10:	e59f5030 	ldr	r5, [pc, #48]	; f48 <__libc_fini_array+0x3c>
     f14:	e59f4030 	ldr	r4, [pc, #48]	; f4c <__libc_fini_array+0x40>
     f18:	e0654004 	rsb	r4, r5, r4
     f1c:	e1b04144 	asrs	r4, r4, #2
     f20:	10855104 	addne	r5, r5, r4, lsl #2
     f24:	0a000004 	beq	f3c <__libc_fini_array+0x30>
     f28:	e5353004 	ldr	r3, [r5, #-4]!
     f2c:	e1a0e00f 	mov	lr, pc
     f30:	e12fff13 	bx	r3
     f34:	e2544001 	subs	r4, r4, #1
     f38:	1afffffa 	bne	f28 <__libc_fini_array+0x1c>
     f3c:	eb0003a7 	bl	1de0 <__libc_fini>
     f40:	e8bd4038 	pop	{r3, r4, r5, lr}
     f44:	e12fff1e 	bx	lr
     f48:	00001df8 	.word	0x00001df8
     f4c:	00001dfc 	.word	0x00001dfc

00000f50 <_gettimeofday_r>:
     f50:	e92d4038 	push	{r3, r4, r5, lr}
     f54:	e59f4030 	ldr	r4, [pc, #48]	; f8c <_gettimeofday_r+0x3c>
     f58:	e3a03000 	mov	r3, #0
     f5c:	e1a05000 	mov	r5, r0
     f60:	e1a00001 	mov	r0, r1
     f64:	e1a01002 	mov	r1, r2
     f68:	e5843000 	str	r3, [r4]
     f6c:	eb00033a 	bl	1c5c <_gettimeofday>
     f70:	e3700001 	cmn	r0, #1
     f74:	1a000002 	bne	f84 <_gettimeofday_r+0x34>
     f78:	e5943000 	ldr	r3, [r4]
     f7c:	e3530000 	cmp	r3, #0
     f80:	15853000 	strne	r3, [r5]
     f84:	e8bd4038 	pop	{r3, r4, r5, lr}
     f88:	e12fff1e 	bx	lr
     f8c:	00002770 	.word	0x00002770

00000f90 <cleanup_glue>:
     f90:	e92d4038 	push	{r3, r4, r5, lr}
     f94:	e1a04001 	mov	r4, r1
     f98:	e5911000 	ldr	r1, [r1]
     f9c:	e3510000 	cmp	r1, #0
     fa0:	e1a05000 	mov	r5, r0
     fa4:	1bfffff9 	blne	f90 <cleanup_glue>
     fa8:	e1a00005 	mov	r0, r5
     fac:	e1a01004 	mov	r1, r4
     fb0:	eb00009c 	bl	1228 <_free_r>
     fb4:	e8bd4038 	pop	{r3, r4, r5, lr}
     fb8:	e12fff1e 	bx	lr

00000fbc <_reclaim_reent>:
     fbc:	e59f30f0 	ldr	r3, [pc, #240]	; 10b4 <_reclaim_reent+0xf8>
     fc0:	e5933000 	ldr	r3, [r3]
     fc4:	e1500003 	cmp	r0, r3
     fc8:	e92d4070 	push	{r4, r5, r6, lr}
     fcc:	e1a05000 	mov	r5, r0
     fd0:	0a00002b 	beq	1084 <_reclaim_reent+0xc8>
     fd4:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
     fd8:	e3520000 	cmp	r2, #0
     fdc:	0a000011 	beq	1028 <_reclaim_reent+0x6c>
     fe0:	e3a03000 	mov	r3, #0
     fe4:	e1a06003 	mov	r6, r3
     fe8:	e7921103 	ldr	r1, [r2, r3, lsl #2]
     fec:	e3510000 	cmp	r1, #0
     ff0:	0a000005 	beq	100c <_reclaim_reent+0x50>
     ff4:	e5914000 	ldr	r4, [r1]
     ff8:	e1a00005 	mov	r0, r5
     ffc:	eb000089 	bl	1228 <_free_r>
    1000:	e2541000 	subs	r1, r4, #0
    1004:	1afffffa 	bne	ff4 <_reclaim_reent+0x38>
    1008:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    100c:	e2866001 	add	r6, r6, #1
    1010:	e3560020 	cmp	r6, #32
    1014:	e1a03006 	mov	r3, r6
    1018:	1afffff2 	bne	fe8 <_reclaim_reent+0x2c>
    101c:	e1a00005 	mov	r0, r5
    1020:	e1a01002 	mov	r1, r2
    1024:	eb00007f 	bl	1228 <_free_r>
    1028:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    102c:	e3510000 	cmp	r1, #0
    1030:	11a00005 	movne	r0, r5
    1034:	1b00007b 	blne	1228 <_free_r>
    1038:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    103c:	e3510000 	cmp	r1, #0
    1040:	0a000008 	beq	1068 <_reclaim_reent+0xac>
    1044:	e2856f53 	add	r6, r5, #332	; 0x14c
    1048:	e1510006 	cmp	r1, r6
    104c:	0a000005 	beq	1068 <_reclaim_reent+0xac>
    1050:	e5914000 	ldr	r4, [r1]
    1054:	e1a00005 	mov	r0, r5
    1058:	eb000072 	bl	1228 <_free_r>
    105c:	e1560004 	cmp	r6, r4
    1060:	e1a01004 	mov	r1, r4
    1064:	1afffff9 	bne	1050 <_reclaim_reent+0x94>
    1068:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    106c:	e3510000 	cmp	r1, #0
    1070:	11a00005 	movne	r0, r5
    1074:	1b00006b 	blne	1228 <_free_r>
    1078:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    107c:	e3530000 	cmp	r3, #0
    1080:	1a000001 	bne	108c <_reclaim_reent+0xd0>
    1084:	e8bd4070 	pop	{r4, r5, r6, lr}
    1088:	e12fff1e 	bx	lr
    108c:	e1a00005 	mov	r0, r5
    1090:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    1094:	e1a0e00f 	mov	lr, pc
    1098:	e12fff1c 	bx	r12
    109c:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    10a0:	e3510000 	cmp	r1, #0
    10a4:	0afffff6 	beq	1084 <_reclaim_reent+0xc8>
    10a8:	e1a00005 	mov	r0, r5
    10ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    10b0:	eaffffb6 	b	f90 <cleanup_glue>
    10b4:	00001e28 	.word	0x00001e28

000010b8 <_wrapup_reent>:
    10b8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    10bc:	e2507000 	subs	r7, r0, #0
    10c0:	059f3060 	ldreq	r3, [pc, #96]	; 1128 <_wrapup_reent+0x70>
    10c4:	05937000 	ldreq	r7, [r3]
    10c8:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    10cc:	e3560000 	cmp	r6, #0
    10d0:	0a00000d 	beq	110c <_wrapup_reent+0x54>
    10d4:	e5965004 	ldr	r5, [r6, #4]
    10d8:	e2554001 	subs	r4, r5, #1
    10dc:	52855002 	addpl	r5, r5, #2
    10e0:	50865105 	addpl	r5, r6, r5, lsl #2
    10e4:	4a000005 	bmi	1100 <_wrapup_reent+0x48>
    10e8:	e5353004 	ldr	r3, [r5, #-4]!
    10ec:	e2444001 	sub	r4, r4, #1
    10f0:	e1a0e00f 	mov	lr, pc
    10f4:	e12fff13 	bx	r3
    10f8:	e3740001 	cmn	r4, #1
    10fc:	1afffff9 	bne	10e8 <_wrapup_reent+0x30>
    1100:	e5966000 	ldr	r6, [r6]
    1104:	e3560000 	cmp	r6, #0
    1108:	1afffff1 	bne	10d4 <_wrapup_reent+0x1c>
    110c:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    1110:	e3530000 	cmp	r3, #0
    1114:	11a00007 	movne	r0, r7
    1118:	11a0e00f 	movne	lr, pc
    111c:	112fff13 	bxne	r3
    1120:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    1124:	e12fff1e 	bx	lr
    1128:	00001e28 	.word	0x00001e28

0000112c <_malloc_trim_r>:
    112c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    1130:	e59f50e4 	ldr	r5, [pc, #228]	; 121c <_malloc_trim_r+0xf0>
    1134:	e1a07001 	mov	r7, r1
    1138:	e1a04000 	mov	r4, r0
    113c:	eb00029b 	bl	1bb0 <__malloc_lock>
    1140:	e5953008 	ldr	r3, [r5, #8]
    1144:	e5936004 	ldr	r6, [r3, #4]
    1148:	e3c66003 	bic	r6, r6, #3
    114c:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    1150:	e283300f 	add	r3, r3, #15
    1154:	e0677003 	rsb	r7, r7, r3
    1158:	e1a07627 	lsr	r7, r7, #12
    115c:	e2477001 	sub	r7, r7, #1
    1160:	e1a07607 	lsl	r7, r7, #12
    1164:	e3570a01 	cmp	r7, #4096	; 0x1000
    1168:	ba000006 	blt	1188 <_malloc_trim_r+0x5c>
    116c:	e1a00004 	mov	r0, r4
    1170:	e3a01000 	mov	r1, #0
    1174:	eb00028f 	bl	1bb8 <_sbrk_r>
    1178:	e5953008 	ldr	r3, [r5, #8]
    117c:	e0833006 	add	r3, r3, r6
    1180:	e1500003 	cmp	r0, r3
    1184:	0a000004 	beq	119c <_malloc_trim_r+0x70>
    1188:	e1a00004 	mov	r0, r4
    118c:	eb000288 	bl	1bb4 <__malloc_unlock>
    1190:	e3a00000 	mov	r0, #0
    1194:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    1198:	e12fff1e 	bx	lr
    119c:	e1a00004 	mov	r0, r4
    11a0:	e2671000 	rsb	r1, r7, #0
    11a4:	eb000283 	bl	1bb8 <_sbrk_r>
    11a8:	e3700001 	cmn	r0, #1
    11ac:	0a00000b 	beq	11e0 <_malloc_trim_r+0xb4>
    11b0:	e59f3068 	ldr	r3, [pc, #104]	; 1220 <_malloc_trim_r+0xf4>
    11b4:	e5952008 	ldr	r2, [r5, #8]
    11b8:	e5931000 	ldr	r1, [r3]
    11bc:	e0676006 	rsb	r6, r7, r6
    11c0:	e3866001 	orr	r6, r6, #1
    11c4:	e0677001 	rsb	r7, r7, r1
    11c8:	e1a00004 	mov	r0, r4
    11cc:	e5826004 	str	r6, [r2, #4]
    11d0:	e5837000 	str	r7, [r3]
    11d4:	eb000276 	bl	1bb4 <__malloc_unlock>
    11d8:	e3a00001 	mov	r0, #1
    11dc:	eaffffec 	b	1194 <_malloc_trim_r+0x68>
    11e0:	e1a00004 	mov	r0, r4
    11e4:	e3a01000 	mov	r1, #0
    11e8:	eb000272 	bl	1bb8 <_sbrk_r>
    11ec:	e5953008 	ldr	r3, [r5, #8]
    11f0:	e0632000 	rsb	r2, r3, r0
    11f4:	e352000f 	cmp	r2, #15
    11f8:	daffffe2 	ble	1188 <_malloc_trim_r+0x5c>
    11fc:	e59f1020 	ldr	r1, [pc, #32]	; 1224 <_malloc_trim_r+0xf8>
    1200:	e5911000 	ldr	r1, [r1]
    1204:	e0610000 	rsb	r0, r1, r0
    1208:	e59f1010 	ldr	r1, [pc, #16]	; 1220 <_malloc_trim_r+0xf4>
    120c:	e3822001 	orr	r2, r2, #1
    1210:	e5810000 	str	r0, [r1]
    1214:	e5832004 	str	r2, [r3, #4]
    1218:	eaffffda 	b	1188 <_malloc_trim_r+0x5c>
    121c:	00002258 	.word	0x00002258
    1220:	00002778 	.word	0x00002778
    1224:	00002660 	.word	0x00002660

00001228 <_free_r>:
    1228:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    122c:	e2514000 	subs	r4, r1, #0
    1230:	e1a06000 	mov	r6, r0
    1234:	0a000046 	beq	1354 <_free_r+0x12c>
    1238:	eb00025c 	bl	1bb0 <__malloc_lock>
    123c:	e514e004 	ldr	lr, [r4, #-4]
    1240:	e59f1238 	ldr	r1, [pc, #568]	; 1480 <_free_r+0x258>
    1244:	e244c008 	sub	r12, r4, #8
    1248:	e3ce3001 	bic	r3, lr, #1
    124c:	e08c2003 	add	r2, r12, r3
    1250:	e5910008 	ldr	r0, [r1, #8]
    1254:	e5925004 	ldr	r5, [r2, #4]
    1258:	e1500002 	cmp	r0, r2
    125c:	e3c55003 	bic	r5, r5, #3
    1260:	0a00004a 	beq	1390 <_free_r+0x168>
    1264:	e21ee001 	ands	lr, lr, #1
    1268:	e5825004 	str	r5, [r2, #4]
    126c:	13a0e000 	movne	lr, #0
    1270:	1a000009 	bne	129c <_free_r+0x74>
    1274:	e5144008 	ldr	r4, [r4, #-8]
    1278:	e064c00c 	rsb	r12, r4, r12
    127c:	e59c0008 	ldr	r0, [r12, #8]
    1280:	e2817008 	add	r7, r1, #8
    1284:	e1500007 	cmp	r0, r7
    1288:	e0833004 	add	r3, r3, r4
    128c:	159c400c 	ldrne	r4, [r12, #12]
    1290:	1580400c 	strne	r4, [r0, #12]
    1294:	15840008 	strne	r0, [r4, #8]
    1298:	03a0e001 	moveq	lr, #1
    129c:	e0820005 	add	r0, r2, r5
    12a0:	e5900004 	ldr	r0, [r0, #4]
    12a4:	e3100001 	tst	r0, #1
    12a8:	1a000009 	bne	12d4 <_free_r+0xac>
    12ac:	e35e0000 	cmp	lr, #0
    12b0:	e5920008 	ldr	r0, [r2, #8]
    12b4:	e0833005 	add	r3, r3, r5
    12b8:	1a000002 	bne	12c8 <_free_r+0xa0>
    12bc:	e59f41c0 	ldr	r4, [pc, #448]	; 1484 <_free_r+0x25c>
    12c0:	e1500004 	cmp	r0, r4
    12c4:	0a000047 	beq	13e8 <_free_r+0x1c0>
    12c8:	e592200c 	ldr	r2, [r2, #12]
    12cc:	e580200c 	str	r2, [r0, #12]
    12d0:	e5820008 	str	r0, [r2, #8]
    12d4:	e3832001 	orr	r2, r3, #1
    12d8:	e35e0000 	cmp	lr, #0
    12dc:	e58c2004 	str	r2, [r12, #4]
    12e0:	e78c3003 	str	r3, [r12, r3]
    12e4:	1a000018 	bne	134c <_free_r+0x124>
    12e8:	e3530c02 	cmp	r3, #512	; 0x200
    12ec:	3a00001a 	bcc	135c <_free_r+0x134>
    12f0:	e1a024a3 	lsr	r2, r3, #9
    12f4:	e3520004 	cmp	r2, #4
    12f8:	8a000042 	bhi	1408 <_free_r+0x1e0>
    12fc:	e1a0e323 	lsr	lr, r3, #6
    1300:	e28ee038 	add	lr, lr, #56	; 0x38
    1304:	e1a0008e 	lsl	r0, lr, #1
    1308:	e0810100 	add	r0, r1, r0, lsl #2
    130c:	e5902008 	ldr	r2, [r0, #8]
    1310:	e1520000 	cmp	r2, r0
    1314:	e59f1164 	ldr	r1, [pc, #356]	; 1480 <_free_r+0x258>
    1318:	0a000044 	beq	1430 <_free_r+0x208>
    131c:	e5921004 	ldr	r1, [r2, #4]
    1320:	e3c11003 	bic	r1, r1, #3
    1324:	e1530001 	cmp	r3, r1
    1328:	2a000002 	bcs	1338 <_free_r+0x110>
    132c:	e5922008 	ldr	r2, [r2, #8]
    1330:	e1500002 	cmp	r0, r2
    1334:	1afffff8 	bne	131c <_free_r+0xf4>
    1338:	e592300c 	ldr	r3, [r2, #12]
    133c:	e58c300c 	str	r3, [r12, #12]
    1340:	e58c2008 	str	r2, [r12, #8]
    1344:	e582c00c 	str	r12, [r2, #12]
    1348:	e583c008 	str	r12, [r3, #8]
    134c:	e1a00006 	mov	r0, r6
    1350:	eb000217 	bl	1bb4 <__malloc_unlock>
    1354:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    1358:	e12fff1e 	bx	lr
    135c:	e5912004 	ldr	r2, [r1, #4]
    1360:	e1a031a3 	lsr	r3, r3, #3
    1364:	e1a00143 	asr	r0, r3, #2
    1368:	e3a0e001 	mov	lr, #1
    136c:	e182001e 	orr	r0, r2, lr, lsl r0
    1370:	e0813183 	add	r3, r1, r3, lsl #3
    1374:	e5932008 	ldr	r2, [r3, #8]
    1378:	e58c300c 	str	r3, [r12, #12]
    137c:	e58c2008 	str	r2, [r12, #8]
    1380:	e5810004 	str	r0, [r1, #4]
    1384:	e583c008 	str	r12, [r3, #8]
    1388:	e582c00c 	str	r12, [r2, #12]
    138c:	eaffffee 	b	134c <_free_r+0x124>
    1390:	e31e0001 	tst	lr, #1
    1394:	e0853003 	add	r3, r5, r3
    1398:	1a000006 	bne	13b8 <_free_r+0x190>
    139c:	e5142008 	ldr	r2, [r4, #-8]
    13a0:	e062c00c 	rsb	r12, r2, r12
    13a4:	e59c000c 	ldr	r0, [r12, #12]
    13a8:	e59ce008 	ldr	lr, [r12, #8]
    13ac:	e58e000c 	str	r0, [lr, #12]
    13b0:	e580e008 	str	lr, [r0, #8]
    13b4:	e0833002 	add	r3, r3, r2
    13b8:	e59f20c8 	ldr	r2, [pc, #200]	; 1488 <_free_r+0x260>
    13bc:	e5920000 	ldr	r0, [r2]
    13c0:	e3832001 	orr	r2, r3, #1
    13c4:	e1530000 	cmp	r3, r0
    13c8:	e58c2004 	str	r2, [r12, #4]
    13cc:	e581c008 	str	r12, [r1, #8]
    13d0:	3affffdd 	bcc	134c <_free_r+0x124>
    13d4:	e59f30b0 	ldr	r3, [pc, #176]	; 148c <_free_r+0x264>
    13d8:	e1a00006 	mov	r0, r6
    13dc:	e5931000 	ldr	r1, [r3]
    13e0:	ebffff51 	bl	112c <_malloc_trim_r>
    13e4:	eaffffd8 	b	134c <_free_r+0x124>
    13e8:	e3832001 	orr	r2, r3, #1
    13ec:	e581c014 	str	r12, [r1, #20]
    13f0:	e581c010 	str	r12, [r1, #16]
    13f4:	e58c000c 	str	r0, [r12, #12]
    13f8:	e58c0008 	str	r0, [r12, #8]
    13fc:	e58c2004 	str	r2, [r12, #4]
    1400:	e78c3003 	str	r3, [r12, r3]
    1404:	eaffffd0 	b	134c <_free_r+0x124>
    1408:	e3520014 	cmp	r2, #20
    140c:	9282e05b 	addls	lr, r2, #91	; 0x5b
    1410:	91a0008e 	lslls	r0, lr, #1
    1414:	9affffbb 	bls	1308 <_free_r+0xe0>
    1418:	e3520054 	cmp	r2, #84	; 0x54
    141c:	8a00000a 	bhi	144c <_free_r+0x224>
    1420:	e1a0e623 	lsr	lr, r3, #12
    1424:	e28ee06e 	add	lr, lr, #110	; 0x6e
    1428:	e1a0008e 	lsl	r0, lr, #1
    142c:	eaffffb5 	b	1308 <_free_r+0xe0>
    1430:	e5913004 	ldr	r3, [r1, #4]
    1434:	e1a0e14e 	asr	lr, lr, #2
    1438:	e3a00001 	mov	r0, #1
    143c:	e1830e10 	orr	r0, r3, r0, lsl lr
    1440:	e1a03002 	mov	r3, r2
    1444:	e5810004 	str	r0, [r1, #4]
    1448:	eaffffbb 	b	133c <_free_r+0x114>
    144c:	e3520f55 	cmp	r2, #340	; 0x154
    1450:	91a0e7a3 	lsrls	lr, r3, #15
    1454:	928ee077 	addls	lr, lr, #119	; 0x77
    1458:	91a0008e 	lslls	r0, lr, #1
    145c:	9affffa9 	bls	1308 <_free_r+0xe0>
    1460:	e59f0028 	ldr	r0, [pc, #40]	; 1490 <_free_r+0x268>
    1464:	e1520000 	cmp	r2, r0
    1468:	91a0e923 	lsrls	lr, r3, #18
    146c:	928ee07c 	addls	lr, lr, #124	; 0x7c
    1470:	91a0008e 	lslls	r0, lr, #1
    1474:	83a000fc 	movhi	r0, #252	; 0xfc
    1478:	83a0e07e 	movhi	lr, #126	; 0x7e
    147c:	eaffffa1 	b	1308 <_free_r+0xe0>
    1480:	00002258 	.word	0x00002258
    1484:	00002260 	.word	0x00002260
    1488:	00002664 	.word	0x00002664
    148c:	00002774 	.word	0x00002774
    1490:	00000554 	.word	0x00000554

00001494 <_malloc_r>:
    1494:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1498:	e281500b 	add	r5, r1, #11
    149c:	e3550016 	cmp	r5, #22
    14a0:	83c55007 	bichi	r5, r5, #7
    14a4:	81a03fa5 	lsrhi	r3, r5, #31
    14a8:	93a03000 	movls	r3, #0
    14ac:	93a05010 	movls	r5, #16
    14b0:	e1550001 	cmp	r5, r1
    14b4:	21a01003 	movcs	r1, r3
    14b8:	33831001 	orrcc	r1, r3, #1
    14bc:	e3510000 	cmp	r1, #0
    14c0:	13a0300c 	movne	r3, #12
    14c4:	e24dd00c 	sub	sp, sp, #12
    14c8:	e1a06000 	mov	r6, r0
    14cc:	15803000 	strne	r3, [r0]
    14d0:	13a04000 	movne	r4, #0
    14d4:	1a000015 	bne	1530 <_malloc_r+0x9c>
    14d8:	eb0001b4 	bl	1bb0 <__malloc_lock>
    14dc:	e3550f7e 	cmp	r5, #504	; 0x1f8
    14e0:	2a000016 	bcs	1540 <_malloc_r+0xac>
    14e4:	e59f76b8 	ldr	r7, [pc, #1720]	; 1ba4 <_malloc_r+0x710>
    14e8:	e1a0e1a5 	lsr	lr, r5, #3
    14ec:	e087318e 	add	r3, r7, lr, lsl #3
    14f0:	e593400c 	ldr	r4, [r3, #12]
    14f4:	e1540003 	cmp	r4, r3
    14f8:	0a00014b 	beq	1a2c <_malloc_r+0x598>
    14fc:	e5943004 	ldr	r3, [r4, #4]
    1500:	e3c33003 	bic	r3, r3, #3
    1504:	e0843003 	add	r3, r4, r3
    1508:	e5930004 	ldr	r0, [r3, #4]
    150c:	e2841008 	add	r1, r4, #8
    1510:	e8910006 	ldm	r1, {r1, r2}
    1514:	e3800001 	orr	r0, r0, #1
    1518:	e5830004 	str	r0, [r3, #4]
    151c:	e581200c 	str	r2, [r1, #12]
    1520:	e5821008 	str	r1, [r2, #8]
    1524:	e1a00006 	mov	r0, r6
    1528:	eb0001a1 	bl	1bb4 <__malloc_unlock>
    152c:	e2844008 	add	r4, r4, #8
    1530:	e1a00004 	mov	r0, r4
    1534:	e28dd00c 	add	sp, sp, #12
    1538:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    153c:	e12fff1e 	bx	lr
    1540:	e1b0e4a5 	lsrs	lr, r5, #9
    1544:	01a0e1a5 	lsreq	lr, r5, #3
    1548:	01a0108e 	lsleq	r1, lr, #1
    154c:	1a000061 	bne	16d8 <_malloc_r+0x244>
    1550:	e59f764c 	ldr	r7, [pc, #1612]	; 1ba4 <_malloc_r+0x710>
    1554:	e0871101 	add	r1, r7, r1, lsl #2
    1558:	e591400c 	ldr	r4, [r1, #12]
    155c:	e1510004 	cmp	r1, r4
    1560:	1a000005 	bne	157c <_malloc_r+0xe8>
    1564:	ea00000a 	b	1594 <_malloc_r+0x100>
    1568:	e3530000 	cmp	r3, #0
    156c:	aa0000d7 	bge	18d0 <_malloc_r+0x43c>
    1570:	e594400c 	ldr	r4, [r4, #12]
    1574:	e1510004 	cmp	r1, r4
    1578:	0a000005 	beq	1594 <_malloc_r+0x100>
    157c:	e5942004 	ldr	r2, [r4, #4]
    1580:	e3c22003 	bic	r2, r2, #3
    1584:	e0653002 	rsb	r3, r5, r2
    1588:	e353000f 	cmp	r3, #15
    158c:	dafffff5 	ble	1568 <_malloc_r+0xd4>
    1590:	e24ee001 	sub	lr, lr, #1
    1594:	e28ee001 	add	lr, lr, #1
    1598:	e59f3604 	ldr	r3, [pc, #1540]	; 1ba4 <_malloc_r+0x710>
    159c:	e5974010 	ldr	r4, [r7, #16]
    15a0:	e2838008 	add	r8, r3, #8
    15a4:	e1540008 	cmp	r4, r8
    15a8:	05931004 	ldreq	r1, [r3, #4]
    15ac:	0a000016 	beq	160c <_malloc_r+0x178>
    15b0:	e5942004 	ldr	r2, [r4, #4]
    15b4:	e3c22003 	bic	r2, r2, #3
    15b8:	e0651002 	rsb	r1, r5, r2
    15bc:	e351000f 	cmp	r1, #15
    15c0:	ca0000f7 	bgt	19a4 <_malloc_r+0x510>
    15c4:	e3510000 	cmp	r1, #0
    15c8:	e5838014 	str	r8, [r3, #20]
    15cc:	e5838010 	str	r8, [r3, #16]
    15d0:	aa000046 	bge	16f0 <_malloc_r+0x25c>
    15d4:	e3520c02 	cmp	r2, #512	; 0x200
    15d8:	2a0000d2 	bcs	1928 <_malloc_r+0x494>
    15dc:	e5930004 	ldr	r0, [r3, #4]
    15e0:	e1a021a2 	lsr	r2, r2, #3
    15e4:	e1a01142 	asr	r1, r2, #2
    15e8:	e3a0c001 	mov	r12, #1
    15ec:	e180111c 	orr	r1, r0, r12, lsl r1
    15f0:	e0832182 	add	r2, r3, r2, lsl #3
    15f4:	e5920008 	ldr	r0, [r2, #8]
    15f8:	e584200c 	str	r2, [r4, #12]
    15fc:	e5840008 	str	r0, [r4, #8]
    1600:	e5831004 	str	r1, [r3, #4]
    1604:	e5824008 	str	r4, [r2, #8]
    1608:	e580400c 	str	r4, [r0, #12]
    160c:	e1a0014e 	asr	r0, lr, #2
    1610:	e3a03001 	mov	r3, #1
    1614:	e1a00013 	lsl	r0, r3, r0
    1618:	e1500001 	cmp	r0, r1
    161c:	8a00003b 	bhi	1710 <_malloc_r+0x27c>
    1620:	e1110000 	tst	r1, r0
    1624:	1a000008 	bne	164c <_malloc_r+0x1b8>
    1628:	e1a00310 	lsl	r0, r0, r3
    162c:	e3cee003 	bic	lr, lr, #3
    1630:	e1110000 	tst	r1, r0
    1634:	e28ee004 	add	lr, lr, #4
    1638:	1a000003 	bne	164c <_malloc_r+0x1b8>
    163c:	e1a00080 	lsl	r0, r0, #1
    1640:	e1110000 	tst	r1, r0
    1644:	e28ee004 	add	lr, lr, #4
    1648:	0afffffb 	beq	163c <_malloc_r+0x1a8>
    164c:	e087a18e 	add	r10, r7, lr, lsl #3
    1650:	e1a0c00a 	mov	r12, r10
    1654:	e1a0400e 	mov	r4, lr
    1658:	e59c300c 	ldr	r3, [r12, #12]
    165c:	e15c0003 	cmp	r12, r3
    1660:	1a000005 	bne	167c <_malloc_r+0x1e8>
    1664:	ea0000db 	b	19d8 <_malloc_r+0x544>
    1668:	e3520000 	cmp	r2, #0
    166c:	aa0000f4 	bge	1a44 <_malloc_r+0x5b0>
    1670:	e593300c 	ldr	r3, [r3, #12]
    1674:	e15c0003 	cmp	r12, r3
    1678:	0a0000d6 	beq	19d8 <_malloc_r+0x544>
    167c:	e5931004 	ldr	r1, [r3, #4]
    1680:	e3c11003 	bic	r1, r1, #3
    1684:	e0652001 	rsb	r2, r5, r1
    1688:	e352000f 	cmp	r2, #15
    168c:	dafffff5 	ble	1668 <_malloc_r+0x1d4>
    1690:	e1a04003 	mov	r4, r3
    1694:	e593000c 	ldr	r0, [r3, #12]
    1698:	e5b4c008 	ldr	r12, [r4, #8]!
    169c:	e0831005 	add	r1, r3, r5
    16a0:	e382e001 	orr	lr, r2, #1
    16a4:	e3855001 	orr	r5, r5, #1
    16a8:	e58c000c 	str	r0, [r12, #12]
    16ac:	e580c008 	str	r12, [r0, #8]
    16b0:	e5835004 	str	r5, [r3, #4]
    16b4:	e5871014 	str	r1, [r7, #20]
    16b8:	e5871010 	str	r1, [r7, #16]
    16bc:	e581800c 	str	r8, [r1, #12]
    16c0:	e5818008 	str	r8, [r1, #8]
    16c4:	e581e004 	str	lr, [r1, #4]
    16c8:	e7812002 	str	r2, [r1, r2]
    16cc:	e1a00006 	mov	r0, r6
    16d0:	eb000137 	bl	1bb4 <__malloc_unlock>
    16d4:	eaffff95 	b	1530 <_malloc_r+0x9c>
    16d8:	e35e0004 	cmp	lr, #4
    16dc:	8a000087 	bhi	1900 <_malloc_r+0x46c>
    16e0:	e1a0e325 	lsr	lr, r5, #6
    16e4:	e28ee038 	add	lr, lr, #56	; 0x38
    16e8:	e1a0108e 	lsl	r1, lr, #1
    16ec:	eaffff97 	b	1550 <_malloc_r+0xbc>
    16f0:	e0842002 	add	r2, r4, r2
    16f4:	e5923004 	ldr	r3, [r2, #4]
    16f8:	e3833001 	orr	r3, r3, #1
    16fc:	e5823004 	str	r3, [r2, #4]
    1700:	e1a00006 	mov	r0, r6
    1704:	eb00012a 	bl	1bb4 <__malloc_unlock>
    1708:	e2844008 	add	r4, r4, #8
    170c:	eaffff87 	b	1530 <_malloc_r+0x9c>
    1710:	e5974008 	ldr	r4, [r7, #8]
    1714:	e594a004 	ldr	r10, [r4, #4]
    1718:	e3caa003 	bic	r10, r10, #3
    171c:	e155000a 	cmp	r5, r10
    1720:	8a000002 	bhi	1730 <_malloc_r+0x29c>
    1724:	e065300a 	rsb	r3, r5, r10
    1728:	e353000f 	cmp	r3, #15
    172c:	ca00005d 	bgt	18a8 <_malloc_r+0x414>
    1730:	e59f9470 	ldr	r9, [pc, #1136]	; 1ba8 <_malloc_r+0x714>
    1734:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    1738:	e599b000 	ldr	r11, [r9]
    173c:	e3730001 	cmn	r3, #1
    1740:	e085b00b 	add	r11, r5, r11
    1744:	128bba01 	addne	r11, r11, #4096	; 0x1000
    1748:	128bb00f 	addne	r11, r11, #15
    174c:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    1750:	028bb010 	addeq	r11, r11, #16
    1754:	13cbb00f 	bicne	r11, r11, #15
    1758:	e084200a 	add	r2, r4, r10
    175c:	e1a00006 	mov	r0, r6
    1760:	e1a0100b 	mov	r1, r11
    1764:	e58d2004 	str	r2, [sp, #4]
    1768:	eb000112 	bl	1bb8 <_sbrk_r>
    176c:	e3700001 	cmn	r0, #1
    1770:	e1a08000 	mov	r8, r0
    1774:	e59d2004 	ldr	r2, [sp, #4]
    1778:	0a0000e2 	beq	1b08 <_malloc_r+0x674>
    177c:	e1520000 	cmp	r2, r0
    1780:	8a0000bf 	bhi	1a84 <_malloc_r+0x5f0>
    1784:	e5993004 	ldr	r3, [r9, #4]
    1788:	e1520008 	cmp	r2, r8
    178c:	e08b3003 	add	r3, r11, r3
    1790:	e5893004 	str	r3, [r9, #4]
    1794:	0a0000df 	beq	1b18 <_malloc_r+0x684>
    1798:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    179c:	e3710001 	cmn	r1, #1
    17a0:	10622008 	rsbne	r2, r2, r8
    17a4:	059f33f8 	ldreq	r3, [pc, #1016]	; 1ba4 <_malloc_r+0x710>
    17a8:	10833002 	addne	r3, r3, r2
    17ac:	05838408 	streq	r8, [r3, #1032]	; 0x408
    17b0:	15893004 	strne	r3, [r9, #4]
    17b4:	e2183007 	ands	r3, r8, #7
    17b8:	12632008 	rsbne	r2, r3, #8
    17bc:	10888002 	addne	r8, r8, r2
    17c0:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    17c4:	12832008 	addne	r2, r3, #8
    17c8:	e088300b 	add	r3, r8, r11
    17cc:	03a02a01 	moveq	r2, #4096	; 0x1000
    17d0:	e1a03a03 	lsl	r3, r3, #20
    17d4:	e042ba23 	sub	r11, r2, r3, lsr #20
    17d8:	e1a0100b 	mov	r1, r11
    17dc:	e1a00006 	mov	r0, r6
    17e0:	eb0000f4 	bl	1bb8 <_sbrk_r>
    17e4:	e3700001 	cmn	r0, #1
    17e8:	10682000 	rsbne	r2, r8, r0
    17ec:	e5993004 	ldr	r3, [r9, #4]
    17f0:	108b2002 	addne	r2, r11, r2
    17f4:	03a0b000 	moveq	r11, #0
    17f8:	13822001 	orrne	r2, r2, #1
    17fc:	03a02001 	moveq	r2, #1
    1800:	e08b3003 	add	r3, r11, r3
    1804:	e1540007 	cmp	r4, r7
    1808:	e5893004 	str	r3, [r9, #4]
    180c:	e5878008 	str	r8, [r7, #8]
    1810:	e5882004 	str	r2, [r8, #4]
    1814:	0a00000d 	beq	1850 <_malloc_r+0x3bc>
    1818:	e35a000f 	cmp	r10, #15
    181c:	9a0000ac 	bls	1ad4 <_malloc_r+0x640>
    1820:	e594c004 	ldr	r12, [r4, #4]
    1824:	e24a200c 	sub	r2, r10, #12
    1828:	e3c22007 	bic	r2, r2, #7
    182c:	e20cc001 	and	r12, r12, #1
    1830:	e0841002 	add	r1, r4, r2
    1834:	e3a00005 	mov	r0, #5
    1838:	e182c00c 	orr	r12, r2, r12
    183c:	e352000f 	cmp	r2, #15
    1840:	e584c004 	str	r12, [r4, #4]
    1844:	e5810004 	str	r0, [r1, #4]
    1848:	e5810008 	str	r0, [r1, #8]
    184c:	8a0000b8 	bhi	1b34 <_malloc_r+0x6a0>
    1850:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    1854:	e1530002 	cmp	r3, r2
    1858:	859f2348 	ldrhi	r2, [pc, #840]	; 1ba8 <_malloc_r+0x714>
    185c:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    1860:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    1864:	e5974008 	ldr	r4, [r7, #8]
    1868:	e1530002 	cmp	r3, r2
    186c:	95943004 	ldrls	r3, [r4, #4]
    1870:	85942004 	ldrhi	r2, [r4, #4]
    1874:	859f132c 	ldrhi	r1, [pc, #812]	; 1ba8 <_malloc_r+0x714>
    1878:	93c33003 	bicls	r3, r3, #3
    187c:	85813030 	strhi	r3, [r1, #48]	; 0x30
    1880:	83c23003 	bichi	r3, r2, #3
    1884:	e1550003 	cmp	r5, r3
    1888:	e0653003 	rsb	r3, r5, r3
    188c:	8a000001 	bhi	1898 <_malloc_r+0x404>
    1890:	e353000f 	cmp	r3, #15
    1894:	ca000003 	bgt	18a8 <_malloc_r+0x414>
    1898:	e1a00006 	mov	r0, r6
    189c:	eb0000c4 	bl	1bb4 <__malloc_unlock>
    18a0:	e3a04000 	mov	r4, #0
    18a4:	eaffff21 	b	1530 <_malloc_r+0x9c>
    18a8:	e0842005 	add	r2, r4, r5
    18ac:	e3833001 	orr	r3, r3, #1
    18b0:	e3855001 	orr	r5, r5, #1
    18b4:	e5845004 	str	r5, [r4, #4]
    18b8:	e1a00006 	mov	r0, r6
    18bc:	e5823004 	str	r3, [r2, #4]
    18c0:	e5872008 	str	r2, [r7, #8]
    18c4:	e2844008 	add	r4, r4, #8
    18c8:	eb0000b9 	bl	1bb4 <__malloc_unlock>
    18cc:	eaffff17 	b	1530 <_malloc_r+0x9c>
    18d0:	e0842002 	add	r2, r4, r2
    18d4:	e5920004 	ldr	r0, [r2, #4]
    18d8:	e2841008 	add	r1, r4, #8
    18dc:	e891000a 	ldm	r1, {r1, r3}
    18e0:	e3800001 	orr	r0, r0, #1
    18e4:	e5820004 	str	r0, [r2, #4]
    18e8:	e581300c 	str	r3, [r1, #12]
    18ec:	e5831008 	str	r1, [r3, #8]
    18f0:	e1a00006 	mov	r0, r6
    18f4:	eb0000ae 	bl	1bb4 <__malloc_unlock>
    18f8:	e2844008 	add	r4, r4, #8
    18fc:	eaffff0b 	b	1530 <_malloc_r+0x9c>
    1900:	e35e0014 	cmp	lr, #20
    1904:	928ee05b 	addls	lr, lr, #91	; 0x5b
    1908:	91a0108e 	lslls	r1, lr, #1
    190c:	9affff0f 	bls	1550 <_malloc_r+0xbc>
    1910:	e35e0054 	cmp	lr, #84	; 0x54
    1914:	8a000061 	bhi	1aa0 <_malloc_r+0x60c>
    1918:	e1a0e625 	lsr	lr, r5, #12
    191c:	e28ee06e 	add	lr, lr, #110	; 0x6e
    1920:	e1a0108e 	lsl	r1, lr, #1
    1924:	eaffff09 	b	1550 <_malloc_r+0xbc>
    1928:	e1a034a2 	lsr	r3, r2, #9
    192c:	e3530004 	cmp	r3, #4
    1930:	9a00004f 	bls	1a74 <_malloc_r+0x5e0>
    1934:	e3530014 	cmp	r3, #20
    1938:	9283a05b 	addls	r10, r3, #91	; 0x5b
    193c:	91a0008a 	lslls	r0, r10, #1
    1940:	9a000004 	bls	1958 <_malloc_r+0x4c4>
    1944:	e3530054 	cmp	r3, #84	; 0x54
    1948:	8a00007f 	bhi	1b4c <_malloc_r+0x6b8>
    194c:	e1a0a622 	lsr	r10, r2, #12
    1950:	e28aa06e 	add	r10, r10, #110	; 0x6e
    1954:	e1a0008a 	lsl	r0, r10, #1
    1958:	e0870100 	add	r0, r7, r0, lsl #2
    195c:	e5903008 	ldr	r3, [r0, #8]
    1960:	e1530000 	cmp	r3, r0
    1964:	e59fc238 	ldr	r12, [pc, #568]	; 1ba4 <_malloc_r+0x710>
    1968:	0a000052 	beq	1ab8 <_malloc_r+0x624>
    196c:	e5931004 	ldr	r1, [r3, #4]
    1970:	e3c11003 	bic	r1, r1, #3
    1974:	e1520001 	cmp	r2, r1
    1978:	2a000002 	bcs	1988 <_malloc_r+0x4f4>
    197c:	e5933008 	ldr	r3, [r3, #8]
    1980:	e1500003 	cmp	r0, r3
    1984:	1afffff8 	bne	196c <_malloc_r+0x4d8>
    1988:	e593200c 	ldr	r2, [r3, #12]
    198c:	e5971004 	ldr	r1, [r7, #4]
    1990:	e584200c 	str	r2, [r4, #12]
    1994:	e5843008 	str	r3, [r4, #8]
    1998:	e583400c 	str	r4, [r3, #12]
    199c:	e5824008 	str	r4, [r2, #8]
    19a0:	eaffff19 	b	160c <_malloc_r+0x178>
    19a4:	e0842005 	add	r2, r4, r5
    19a8:	e3810001 	orr	r0, r1, #1
    19ac:	e3855001 	orr	r5, r5, #1
    19b0:	e5845004 	str	r5, [r4, #4]
    19b4:	e5832014 	str	r2, [r3, #20]
    19b8:	e5832010 	str	r2, [r3, #16]
    19bc:	e582800c 	str	r8, [r2, #12]
    19c0:	e9820101 	stmib	r2, {r0, r8}
    19c4:	e7821001 	str	r1, [r2, r1]
    19c8:	e1a00006 	mov	r0, r6
    19cc:	eb000078 	bl	1bb4 <__malloc_unlock>
    19d0:	e2844008 	add	r4, r4, #8
    19d4:	eafffed5 	b	1530 <_malloc_r+0x9c>
    19d8:	e2844001 	add	r4, r4, #1
    19dc:	e3140003 	tst	r4, #3
    19e0:	e28cc008 	add	r12, r12, #8
    19e4:	1affff1b 	bne	1658 <_malloc_r+0x1c4>
    19e8:	e31e0003 	tst	lr, #3
    19ec:	e24a3008 	sub	r3, r10, #8
    19f0:	0a000062 	beq	1b80 <_malloc_r+0x6ec>
    19f4:	e59aa000 	ldr	r10, [r10]
    19f8:	e15a0003 	cmp	r10, r3
    19fc:	e24ee001 	sub	lr, lr, #1
    1a00:	0afffff8 	beq	19e8 <_malloc_r+0x554>
    1a04:	e5973004 	ldr	r3, [r7, #4]
    1a08:	e1a00080 	lsl	r0, r0, #1
    1a0c:	e1500003 	cmp	r0, r3
    1a10:	8affff3e 	bhi	1710 <_malloc_r+0x27c>
    1a14:	e3500000 	cmp	r0, #0
    1a18:	0affff3c 	beq	1710 <_malloc_r+0x27c>
    1a1c:	e1130000 	tst	r3, r0
    1a20:	0a00005a 	beq	1b90 <_malloc_r+0x6fc>
    1a24:	e1a0e004 	mov	lr, r4
    1a28:	eaffff07 	b	164c <_malloc_r+0x1b8>
    1a2c:	e2843008 	add	r3, r4, #8
    1a30:	e5944014 	ldr	r4, [r4, #20]
    1a34:	e1530004 	cmp	r3, r4
    1a38:	028ee002 	addeq	lr, lr, #2
    1a3c:	0afffed5 	beq	1598 <_malloc_r+0x104>
    1a40:	eafffead 	b	14fc <_malloc_r+0x68>
    1a44:	e0831001 	add	r1, r3, r1
    1a48:	e5910004 	ldr	r0, [r1, #4]
    1a4c:	e1a04003 	mov	r4, r3
    1a50:	e5b42008 	ldr	r2, [r4, #8]!
    1a54:	e593300c 	ldr	r3, [r3, #12]
    1a58:	e3800001 	orr	r0, r0, #1
    1a5c:	e5810004 	str	r0, [r1, #4]
    1a60:	e582300c 	str	r3, [r2, #12]
    1a64:	e5832008 	str	r2, [r3, #8]
    1a68:	e1a00006 	mov	r0, r6
    1a6c:	eb000050 	bl	1bb4 <__malloc_unlock>
    1a70:	eafffeae 	b	1530 <_malloc_r+0x9c>
    1a74:	e1a0a322 	lsr	r10, r2, #6
    1a78:	e28aa038 	add	r10, r10, #56	; 0x38
    1a7c:	e1a0008a 	lsl	r0, r10, #1
    1a80:	eaffffb4 	b	1958 <_malloc_r+0x4c4>
    1a84:	e1540007 	cmp	r4, r7
    1a88:	0affff3d 	beq	1784 <_malloc_r+0x2f0>
    1a8c:	e59f3110 	ldr	r3, [pc, #272]	; 1ba4 <_malloc_r+0x710>
    1a90:	e5934008 	ldr	r4, [r3, #8]
    1a94:	e5943004 	ldr	r3, [r4, #4]
    1a98:	e3c33003 	bic	r3, r3, #3
    1a9c:	eaffff78 	b	1884 <_malloc_r+0x3f0>
    1aa0:	e35e0f55 	cmp	lr, #340	; 0x154
    1aa4:	8a00000f 	bhi	1ae8 <_malloc_r+0x654>
    1aa8:	e1a0e7a5 	lsr	lr, r5, #15
    1aac:	e28ee077 	add	lr, lr, #119	; 0x77
    1ab0:	e1a0108e 	lsl	r1, lr, #1
    1ab4:	eafffea5 	b	1550 <_malloc_r+0xbc>
    1ab8:	e59c2004 	ldr	r2, [r12, #4]
    1abc:	e1a0a14a 	asr	r10, r10, #2
    1ac0:	e3a01001 	mov	r1, #1
    1ac4:	e1821a11 	orr	r1, r2, r1, lsl r10
    1ac8:	e1a02003 	mov	r2, r3
    1acc:	e58c1004 	str	r1, [r12, #4]
    1ad0:	eaffffae 	b	1990 <_malloc_r+0x4fc>
    1ad4:	e3a03001 	mov	r3, #1
    1ad8:	e5883004 	str	r3, [r8, #4]
    1adc:	e1a04008 	mov	r4, r8
    1ae0:	e3a03000 	mov	r3, #0
    1ae4:	eaffff66 	b	1884 <_malloc_r+0x3f0>
    1ae8:	e59f30bc 	ldr	r3, [pc, #188]	; 1bac <_malloc_r+0x718>
    1aec:	e15e0003 	cmp	lr, r3
    1af0:	91a0e925 	lsrls	lr, r5, #18
    1af4:	928ee07c 	addls	lr, lr, #124	; 0x7c
    1af8:	91a0108e 	lslls	r1, lr, #1
    1afc:	83a010fc 	movhi	r1, #252	; 0xfc
    1b00:	83a0e07e 	movhi	lr, #126	; 0x7e
    1b04:	eafffe91 	b	1550 <_malloc_r+0xbc>
    1b08:	e5974008 	ldr	r4, [r7, #8]
    1b0c:	e5943004 	ldr	r3, [r4, #4]
    1b10:	e3c33003 	bic	r3, r3, #3
    1b14:	eaffff5a 	b	1884 <_malloc_r+0x3f0>
    1b18:	e1b01a02 	lsls	r1, r2, #20
    1b1c:	1affff1d 	bne	1798 <_malloc_r+0x304>
    1b20:	e5972008 	ldr	r2, [r7, #8]
    1b24:	e08b100a 	add	r1, r11, r10
    1b28:	e3811001 	orr	r1, r1, #1
    1b2c:	e5821004 	str	r1, [r2, #4]
    1b30:	eaffff46 	b	1850 <_malloc_r+0x3bc>
    1b34:	e1a00006 	mov	r0, r6
    1b38:	e2841008 	add	r1, r4, #8
    1b3c:	ebfffdb9 	bl	1228 <_free_r>
    1b40:	e59f3060 	ldr	r3, [pc, #96]	; 1ba8 <_malloc_r+0x714>
    1b44:	e5933004 	ldr	r3, [r3, #4]
    1b48:	eaffff40 	b	1850 <_malloc_r+0x3bc>
    1b4c:	e3530f55 	cmp	r3, #340	; 0x154
    1b50:	91a0a7a2 	lsrls	r10, r2, #15
    1b54:	928aa077 	addls	r10, r10, #119	; 0x77
    1b58:	91a0008a 	lslls	r0, r10, #1
    1b5c:	9affff7d 	bls	1958 <_malloc_r+0x4c4>
    1b60:	e59f1044 	ldr	r1, [pc, #68]	; 1bac <_malloc_r+0x718>
    1b64:	e1530001 	cmp	r3, r1
    1b68:	91a0a922 	lsrls	r10, r2, #18
    1b6c:	928aa07c 	addls	r10, r10, #124	; 0x7c
    1b70:	91a0008a 	lslls	r0, r10, #1
    1b74:	83a000fc 	movhi	r0, #252	; 0xfc
    1b78:	83a0a07e 	movhi	r10, #126	; 0x7e
    1b7c:	eaffff75 	b	1958 <_malloc_r+0x4c4>
    1b80:	e5973004 	ldr	r3, [r7, #4]
    1b84:	e1c33000 	bic	r3, r3, r0
    1b88:	e5873004 	str	r3, [r7, #4]
    1b8c:	eaffff9d 	b	1a08 <_malloc_r+0x574>
    1b90:	e1a00080 	lsl	r0, r0, #1
    1b94:	e1130000 	tst	r3, r0
    1b98:	e2844004 	add	r4, r4, #4
    1b9c:	1affffa0 	bne	1a24 <_malloc_r+0x590>
    1ba0:	eafffffa 	b	1b90 <_malloc_r+0x6fc>
    1ba4:	00002258 	.word	0x00002258
    1ba8:	00002774 	.word	0x00002774
    1bac:	00000554 	.word	0x00000554

00001bb0 <__malloc_lock>:
    1bb0:	e12fff1e 	bx	lr

00001bb4 <__malloc_unlock>:
    1bb4:	e12fff1e 	bx	lr

00001bb8 <_sbrk_r>:
    1bb8:	e92d4038 	push	{r3, r4, r5, lr}
    1bbc:	e59f4030 	ldr	r4, [pc, #48]	; 1bf4 <_sbrk_r+0x3c>
    1bc0:	e3a03000 	mov	r3, #0
    1bc4:	e1a05000 	mov	r5, r0
    1bc8:	e1a00001 	mov	r0, r1
    1bcc:	e5843000 	str	r3, [r4]
    1bd0:	eb000034 	bl	1ca8 <_sbrk>
    1bd4:	e3700001 	cmn	r0, #1
    1bd8:	0a000001 	beq	1be4 <_sbrk_r+0x2c>
    1bdc:	e8bd4038 	pop	{r3, r4, r5, lr}
    1be0:	e12fff1e 	bx	lr
    1be4:	e5943000 	ldr	r3, [r4]
    1be8:	e3530000 	cmp	r3, #0
    1bec:	15853000 	strne	r3, [r5]
    1bf0:	eafffff9 	b	1bdc <_sbrk_r+0x24>
    1bf4:	00002770 	.word	0x00002770

00001bf8 <__cs3_premain>:
    1bf8:	e92d4008 	push	{r3, lr}
    1bfc:	eb00004a 	bl	1d2c <__libc_init_array>
    1c00:	e59f3030 	ldr	r3, [pc, #48]	; 1c38 <__cs3_premain+0x40>
    1c04:	e3530000 	cmp	r3, #0
    1c08:	15930000 	ldrne	r0, [r3]
    1c0c:	01a00003 	moveq	r0, r3
    1c10:	e59f3024 	ldr	r3, [pc, #36]	; 1c3c <__cs3_premain+0x44>
    1c14:	e3530000 	cmp	r3, #0
    1c18:	15931000 	ldrne	r1, [r3]
    1c1c:	01a01003 	moveq	r1, r3
    1c20:	e3a02000 	mov	r2, #0
    1c24:	ebfff999 	bl	290 <main>
    1c28:	e59f3010 	ldr	r3, [pc, #16]	; 1c40 <__cs3_premain+0x48>
    1c2c:	e3530000 	cmp	r3, #0
    1c30:	1bfffbd2 	blne	b80 <exit>
    1c34:	eafffffe 	b	1c34 <__cs3_premain+0x3c>
	...
    1c40:	00000b80 	.word	0x00000b80

00001c44 <_exit>:
    1c44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1c48:	e3a00018 	mov	r0, #24
    1c4c:	e59f1004 	ldr	r1, [pc, #4]	; 1c58 <_exit+0x14>
    1c50:	ef123456 	svc	0x00123456
    1c54:	eafffffe 	b	1c54 <_exit+0x10>
    1c58:	00020026 	.word	0x00020026

00001c5c <_gettimeofday>:
    1c5c:	e92d4038 	push	{r3, r4, r5, lr}
    1c60:	e2505000 	subs	r5, r0, #0
    1c64:	e1a04001 	mov	r4, r1
    1c68:	0a000007 	beq	1c8c <_gettimeofday+0x30>
    1c6c:	e3510000 	cmp	r1, #0
    1c70:	1a000007 	bne	1c94 <_gettimeofday+0x38>
    1c74:	e3a00011 	mov	r0, #17
    1c78:	ef123456 	svc	0x00123456
    1c7c:	e8850011 	stm	r5, {r0, r4}
    1c80:	e1a00004 	mov	r0, r4
    1c84:	e8bd4038 	pop	{r3, r4, r5, lr}
    1c88:	e12fff1e 	bx	lr
    1c8c:	e1a00005 	mov	r0, r5
    1c90:	eafffffb 	b	1c84 <_gettimeofday+0x28>
    1c94:	eb000020 	bl	1d1c <__errno>
    1c98:	e3a03016 	mov	r3, #22
    1c9c:	e5803000 	str	r3, [r0]
    1ca0:	e3e00000 	mvn	r0, #0
    1ca4:	eafffff6 	b	1c84 <_gettimeofday+0x28>

00001ca8 <_sbrk>:
    1ca8:	e92d4008 	push	{r3, lr}
    1cac:	e59f305c 	ldr	r3, [pc, #92]	; 1d10 <_sbrk+0x68>
    1cb0:	e59f105c 	ldr	r1, [pc, #92]	; 1d14 <_sbrk+0x6c>
    1cb4:	e5932000 	ldr	r2, [r3]
    1cb8:	e5913000 	ldr	r3, [r1]
    1cbc:	e3520000 	cmp	r2, #0
    1cc0:	e0830000 	add	r0, r3, r0
    1cc4:	0a000002 	beq	1cd4 <_sbrk+0x2c>
    1cc8:	e0602002 	rsb	r2, r0, r2
    1ccc:	e3520000 	cmp	r2, #0
    1cd0:	ba000009 	blt	1cfc <_sbrk+0x54>
    1cd4:	e04d2003 	sub	r2, sp, r3
    1cd8:	e3520000 	cmp	r2, #0
    1cdc:	ba000002 	blt	1cec <_sbrk+0x44>
    1ce0:	e04d2000 	sub	r2, sp, r0
    1ce4:	e35200ff 	cmp	r2, #255	; 0xff
    1ce8:	da000003 	ble	1cfc <_sbrk+0x54>
    1cec:	e5810000 	str	r0, [r1]
    1cf0:	e1a00003 	mov	r0, r3
    1cf4:	e8bd4008 	pop	{r3, lr}
    1cf8:	e12fff1e 	bx	lr
    1cfc:	eb000006 	bl	1d1c <__errno>
    1d00:	e3a0300c 	mov	r3, #12
    1d04:	e5803000 	str	r3, [r0]
    1d08:	e3e03000 	mvn	r3, #0
    1d0c:	eafffff7 	b	1cf0 <_sbrk+0x48>
    1d10:	00002668 	.word	0x00002668
    1d14:	0000266c 	.word	0x0000266c

00001d18 <__cs3_isr_interrupt>:
    1d18:	eafffffe 	b	1d18 <__cs3_isr_interrupt>

00001d1c <__errno>:
    1d1c:	e59f3004 	ldr	r3, [pc, #4]	; 1d28 <__errno+0xc>
    1d20:	e5930000 	ldr	r0, [r3]
    1d24:	e12fff1e 	bx	lr
    1d28:	00001e28 	.word	0x00001e28

00001d2c <__libc_init_array>:
    1d2c:	e92d4070 	push	{r4, r5, r6, lr}
    1d30:	e59f506c 	ldr	r5, [pc, #108]	; 1da4 <__libc_init_array+0x78>
    1d34:	e59f606c 	ldr	r6, [pc, #108]	; 1da8 <__libc_init_array+0x7c>
    1d38:	e0656006 	rsb	r6, r5, r6
    1d3c:	e1b06146 	asrs	r6, r6, #2
    1d40:	12455004 	subne	r5, r5, #4
    1d44:	13a04000 	movne	r4, #0
    1d48:	0a000005 	beq	1d64 <__libc_init_array+0x38>
    1d4c:	e5b53004 	ldr	r3, [r5, #4]!
    1d50:	e2844001 	add	r4, r4, #1
    1d54:	e1a0e00f 	mov	lr, pc
    1d58:	e12fff13 	bx	r3
    1d5c:	e1560004 	cmp	r6, r4
    1d60:	1afffff9 	bne	1d4c <__libc_init_array+0x20>
    1d64:	e59f5040 	ldr	r5, [pc, #64]	; 1dac <__libc_init_array+0x80>
    1d68:	e59f6040 	ldr	r6, [pc, #64]	; 1db0 <__libc_init_array+0x84>
    1d6c:	e0656006 	rsb	r6, r5, r6
    1d70:	eb000012 	bl	1dc0 <_init>
    1d74:	e1b06146 	asrs	r6, r6, #2
    1d78:	12455004 	subne	r5, r5, #4
    1d7c:	13a04000 	movne	r4, #0
    1d80:	0a000005 	beq	1d9c <__libc_init_array+0x70>
    1d84:	e5b53004 	ldr	r3, [r5, #4]!
    1d88:	e2844001 	add	r4, r4, #1
    1d8c:	e1a0e00f 	mov	lr, pc
    1d90:	e12fff13 	bx	r3
    1d94:	e1560004 	cmp	r6, r4
    1d98:	1afffff9 	bne	1d84 <__libc_init_array+0x58>
    1d9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1da0:	e12fff1e 	bx	lr
    1da4:	00001dd8 	.word	0x00001dd8
    1da8:	00001dd8 	.word	0x00001dd8
    1dac:	00001dd8 	.word	0x00001dd8
    1db0:	00001de0 	.word	0x00001de0

Disassembly of section .rodata:

00001db8 <_global_impure_ptr>:
    1db8:	00001e30 00000043                       0...C...

00001dc0 <_init>:
    1dc0:	e1a0c00d 	mov	r12, sp
    1dc4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1dc8:	e24cb004 	sub	r11, r12, #4
    1dcc:	e24bd028 	sub	sp, r11, #40	; 0x28
    1dd0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1dd4:	e12fff1e 	bx	lr

00001dd8 <__init_array_start>:
    1dd8:	00000ee8 	.word	0x00000ee8

00001ddc <__frame_dummy_init_array_entry>:
    1ddc:	00000208                                ....

00001de0 <__libc_fini>:
    1de0:	e1a0c00d 	mov	r12, sp
    1de4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1de8:	e24cb004 	sub	r11, r12, #4
    1dec:	e24bd028 	sub	sp, r11, #40	; 0x28
    1df0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1df4:	e12fff1e 	bx	lr

00001df8 <__fini_array_start>:
    1df8:	000001c4 	.word	0x000001c4

00001dfc <__cs3_regions>:
    1dfc:	00000000 	.word	0x00000000
    1e00:	00000040 	.word	0x00000040
    1e04:	00000040 	.word	0x00000040
    1e08:	00002630 	.word	0x00002630
    1e0c:	00000138 	.word	0x00000138
