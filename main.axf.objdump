
D:/Files/Workspace/FPGA/243/Project/ECE243-Project/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	ec 08 00 00 f0 08 00 00 f4 08 00 00 f8 08 00 00     ................
  30:	fc 08 00 00 84 22 00 00 ac 08 00 00 00 09 00 00     ....."..........

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000822 	bl	2164 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000437c 	.word	0x0000437c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00004be0 	.word	0x00004be0

00000124 <__cs3_heap_start_ptr>:
     124:	00004d40 	.word	0x00004d40

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <__cs3_region_zero_size_ram+0x14>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <__cs3_region_zero_size_ram+0x18>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <__cs3_region_zero_size_ram+0x1c>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00004be8 	.word	0x00004be8
     170:	00004beb 	.word	0x00004beb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00004be8 	.word	0x00004be8
     1bc:	00004be8 	.word	0x00004be8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00004be8 	.word	0x00004be8
     200:	00000000 	.word	0x00000000
     204:	00002320 	.word	0x00002320

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002320 	.word	0x00002320
     250:	00004bec 	.word	0x00004bec
     254:	00004380 	.word	0x00004380
     258:	00000000 	.word	0x00000000

0000025c <setup_buffer>:
                             // interrupts
    config_KEYs();           // configure pushbutton KEYs to generate interrupts

    enable_A9_interrupts(); // enable interrupts
}
void setup_buffer(){
     25c:	e92d4038 	push	{r3, r4, r5, lr}
    *(pixel_ctrl_ptr + 1) = FPGA_PIXEL_BUF_BASE;
     260:	e3044388 	movw	r4, #17288	; 0x4388
     264:	e3404000 	movt	r4, #0
     268:	e5943000 	ldr	r3, [r4]
     26c:	e3a02332 	mov	r2, #-939524096	; 0xc8000000
     270:	e5832004 	str	r2, [r3, #4]
	
    wait_for_vsync();
     274:	eb0000d8 	bl	5dc <wait_for_vsync>
    pixel_buffer_start = *pixel_ctrl_ptr;
     278:	e5943000 	ldr	r3, [r4]
     27c:	e5933000 	ldr	r3, [r3]
     280:	e3045c04 	movw	r5, #19460	; 0x4c04
     284:	e3405000 	movt	r5, #0
     288:	e5853000 	str	r3, [r5]
    clear_screen();
     28c:	eb000042 	bl	39c <clear_screen>
	
    *(pixel_ctrl_ptr + 1) = SDRAM_BASE;
     290:	e5943000 	ldr	r3, [r4]
     294:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
     298:	e5832004 	str	r2, [r3, #4]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
     29c:	e5933004 	ldr	r3, [r3, #4]
     2a0:	e5853000 	str	r3, [r5]

    clear_screen();
     2a4:	eb00003c 	bl	39c <clear_screen>
     2a8:	e8bd8038 	pop	{r3, r4, r5, pc}

000002ac <config_interval_timer>:
void config_interval_timer(){
    volatile int * interval_timer_ptr =(int *)TIMER_BASE; // interal timer base address

	float interval = 1/60; //60 FPS
    int counter                 = interval * 100000000; // 1/(100 MHz) x 5x10^6 = 50 msec
    *(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     2ac:	e3a03a02 	mov	r3, #8192	; 0x2000
     2b0:	e34f3f20 	movt	r3, #65312	; 0xff20
     2b4:	e3a02000 	mov	r2, #0
     2b8:	e5832008 	str	r2, [r3, #8]
    *(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     2bc:	e583200c 	str	r2, [r3, #12]

    /* start interval timer, enable its interrupts */
    *(interval_timer_ptr + 1) = 0x7; // STOP = 0, START = 1, CONT = 1, ITO = 1
     2c0:	e3a02007 	mov	r2, #7
     2c4:	e5832004 	str	r2, [r3, #4]
     2c8:	e12fff1e 	bx	lr

000002cc <config_KEYs>:

/* setup the KEY interrupts in the FPGA */
void config_KEYs(){
    volatile int * KEY_ptr = (int *)KEY_BASE; // pushbutton KEY address

    *(KEY_ptr + 2) = 0xF; // enable interrupts for KEY[0-3]
     2cc:	e3a03000 	mov	r3, #0
     2d0:	e34f3f20 	movt	r3, #65312	; 0xff20
     2d4:	e3a0200f 	mov	r2, #15
     2d8:	e5832058 	str	r2, [r3, #88]	; 0x58
     2dc:	e12fff1e 	bx	lr

000002e0 <setup_interupts>:
		scene_draw();
		wait_for_vsync();
		pixel_buffer_start = *(pixel_ctrl_ptr + 1);
	}
}
void setup_interupts(){
     2e0:	e92d4008 	push	{r3, lr}
	set_A9_IRQ_stack();      // initialize the stack pointer for IRQ mode
     2e4:	eb000186 	bl	904 <set_A9_IRQ_stack>
    config_GIC();            // configure the general interrupt controller
     2e8:	eb00018f 	bl	92c <config_GIC>
    config_interval_timer(); // configure Altera interval timer to generate
     2ec:	ebffffee 	bl	2ac <config_interval_timer>
                             // interrupts
    config_KEYs();           // configure pushbutton KEYs to generate interrupts
     2f0:	ebfffff5 	bl	2cc <config_KEYs>

    enable_A9_interrupts(); // enable interrupts
     2f4:	eb000189 	bl	920 <enable_A9_interrupts>
     2f8:	e8bd8008 	pop	{r3, pc}

000002fc <main>:

void scene_draw();
void clear();
void logic();
void init_board();
int main(void){
     2fc:	e92d4038 	push	{r3, r4, r5, lr}
	setup_interupts();
     300:	ebfffff6 	bl	2e0 <setup_interupts>
	setup_buffer();
     304:	ebffffd4 	bl	25c <setup_buffer>
	
	init_board();
     308:	eb000241 	bl	c14 <init_board>
		clear_screen();
		logic();
		animate();
		scene_draw();
		wait_for_vsync();
		pixel_buffer_start = *(pixel_ctrl_ptr + 1);
     30c:	e3045388 	movw	r5, #17288	; 0x4388
     310:	e3405000 	movt	r5, #0
     314:	e3044c04 	movw	r4, #19460	; 0x4c04
     318:	e3404000 	movt	r4, #0
	setup_interupts();
	setup_buffer();
	
	init_board();
	while(1){
		clear_screen();
     31c:	eb00001e 	bl	39c <clear_screen>
		logic();
     320:	eb0001d9 	bl	a8c <logic>
		animate();
     324:	eb00033d 	bl	1020 <animate>
		scene_draw();
     328:	eb0002fd 	bl	f24 <scene_draw>
		wait_for_vsync();
     32c:	eb0000aa 	bl	5dc <wait_for_vsync>
		pixel_buffer_start = *(pixel_ctrl_ptr + 1);
     330:	e5953000 	ldr	r3, [r5]
     334:	e5933004 	ldr	r3, [r3, #4]
     338:	e5843000 	str	r3, [r4]
     33c:	eafffff6 	b	31c <main+0x20>

00000340 <rgb24to16>:
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
	short int g5 = (short int) g8/4;
     340:	e2813003 	add	r3, r1, #3
     344:	e3510000 	cmp	r1, #0
     348:	b1a01003 	movlt	r1, r3
     34c:	e1a01141 	asr	r1, r1, #2
	short int b5 = (short int) b8/8;
     350:	e2823007 	add	r3, r2, #7
     354:	e3520000 	cmp	r2, #0
     358:	b1a02003 	movlt	r2, r3
     35c:	e1a021c2 	asr	r2, r2, #3
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
     360:	e0822281 	add	r2, r2, r1, lsl #5
			error = error - deltax;
		}
	}
}
short int rgb24to16(short int r8,short int g8, short int b8){
	short int r5 = (short int) r8/8;
     364:	e2803007 	add	r3, r0, #7
     368:	e3500000 	cmp	r0, #0
     36c:	b1a00003 	movlt	r0, r3
     370:	e1a001c0 	asr	r0, r0, #3
	short int g5 = (short int) g8/4;
	short int b5 = (short int) b8/8;
	short int rgb565 = b5 + (g5<<5) + (r5<<11);
     374:	e0820580 	add	r0, r2, r0, lsl #11
	return rgb565;
}
     378:	e6bf0070 	sxth	r0, r0
     37c:	e12fff1e 	bx	lr

00000380 <plot_pixel>:
void plot_pixel(int x, int y, short int color){
	*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
     380:	e3043c04 	movw	r3, #19460	; 0x4c04
     384:	e3403000 	movt	r3, #0
     388:	e5933000 	ldr	r3, [r3]
     38c:	e1a00080 	lsl	r0, r0, #1
     390:	e0831501 	add	r1, r3, r1, lsl #10
     394:	e18120b0 	strh	r2, [r1, r0]
     398:	e12fff1e 	bx	lr

0000039c <clear_screen>:
#include "image.h"

extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color

void clear_screen(){
     39c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int x=0;
     3a0:	e3a05000 	mov	r5, #0
#include "image.h"

extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color

void clear_screen(){
     3a4:	e1a07005 	mov	r7, r5
	int x=0;
	for(x;x<SCREEN_W;x++){
		int y=0;
		for(y;y<SCREEN_H;y++){
			plot_pixel(x, y, bg_color);
     3a8:	e304638c 	movw	r6, #17292	; 0x438c
     3ac:	e3406000 	movt	r6, #0
     3b0:	ea000009 	b	3dc <clear_screen+0x40>
     3b4:	e1a00005 	mov	r0, r5
     3b8:	e1a01004 	mov	r1, r4
     3bc:	e1d620f0 	ldrsh	r2, [r6]
     3c0:	ebffffee 	bl	380 <plot_pixel>

void clear_screen(){
	int x=0;
	for(x;x<SCREEN_W;x++){
		int y=0;
		for(y;y<SCREEN_H;y++){
     3c4:	e2844001 	add	r4, r4, #1
     3c8:	e35400f0 	cmp	r4, #240	; 0xf0
     3cc:	1afffff8 	bne	3b4 <clear_screen+0x18>
extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color

void clear_screen(){
	int x=0;
	for(x;x<SCREEN_W;x++){
     3d0:	e2855001 	add	r5, r5, #1
     3d4:	e3550d05 	cmp	r5, #320	; 0x140
     3d8:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
#include "image.h"

extern volatile int pixel_buffer_start;
short int bg_color = (short int)0xFFFF;//Background color

void clear_screen(){
     3dc:	e1a04007 	mov	r4, r7
     3e0:	eafffff3 	b	3b4 <clear_screen+0x18>

000003e4 <swap>:
void plot_pixel(int x, int y, short int color){
	*(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
}
void swap(int*p1 ,int *p2){
	int temp;
	temp=*p1;
     3e4:	e5903000 	ldr	r3, [r0]
	*p1=*p2 ;
     3e8:	e5912000 	ldr	r2, [r1]
     3ec:	e5802000 	str	r2, [r0]
	*p2=temp ;
     3f0:	e5813000 	str	r3, [r1]
     3f4:	e12fff1e 	bx	lr

000003f8 <draw_line>:
	draw_line(x,y,x+w-1,y,color);
	draw_line(x,y,x,y+h-1,color);
	draw_line(x+w-1,y,x+w-1,y+h-1,color);
	draw_line(x,y+h-1,x+w-1,y+h-1,color);
}
void draw_line(int x0, int y0, int x1,int y1, short int color){
     3f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     3fc:	e24dd014 	sub	sp, sp, #20
     400:	e58d000c 	str	r0, [sp, #12]
     404:	e58d1008 	str	r1, [sp, #8]
     408:	e58d2004 	str	r2, [sp, #4]
     40c:	e58d3000 	str	r3, [sp]
     410:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
	bool is_steep = abs(y1 - y0) > abs(x1 - x0);
     414:	e0613003 	rsb	r3, r1, r3
     418:	e3530000 	cmp	r3, #0
     41c:	b2633000 	rsblt	r3, r3, #0
     420:	e0602002 	rsb	r2, r0, r2
     424:	e0228fc2 	eor	r8, r2, r2, asr #31
     428:	e0488fc2 	sub	r8, r8, r2, asr #31
     42c:	e1530008 	cmp	r3, r8
     430:	d3a08000 	movle	r8, #0
     434:	c3a08001 	movgt	r8, #1
	if(is_steep){
     438:	e3580000 	cmp	r8, #0
     43c:	0a000005 	beq	458 <draw_line+0x60>
		swap(&x0, &y0);
     440:	e28d000c 	add	r0, sp, #12
     444:	e28d1008 	add	r1, sp, #8
     448:	ebffffe5 	bl	3e4 <swap>
		swap(&x1, &y1);
     44c:	e28d0004 	add	r0, sp, #4
     450:	e1a0100d 	mov	r1, sp
     454:	ebffffe2 	bl	3e4 <swap>
	}
	if (x0 > x1){
     458:	e59d3004 	ldr	r3, [sp, #4]
     45c:	e59d200c 	ldr	r2, [sp, #12]
     460:	e1520003 	cmp	r2, r3
     464:	da000005 	ble	480 <draw_line+0x88>
		swap(&x0, &x1);
     468:	e28d000c 	add	r0, sp, #12
     46c:	e28d1004 	add	r1, sp, #4
     470:	ebffffdb 	bl	3e4 <swap>
		swap(&y0, &y1);
     474:	e28d0008 	add	r0, sp, #8
     478:	e1a0100d 	mov	r1, sp
     47c:	ebffffd8 	bl	3e4 <swap>
	}
	int deltax = x1 - x0;
     480:	e59d3004 	ldr	r3, [sp, #4]
     484:	e59d500c 	ldr	r5, [sp, #12]
     488:	e0659003 	rsb	r9, r5, r3
	int deltay = abs(y1 - y0);
     48c:	e59d2000 	ldr	r2, [sp]
     490:	e59d6008 	ldr	r6, [sp, #8]
     494:	e0667002 	rsb	r7, r6, r2
     498:	e3570000 	cmp	r7, #0
     49c:	b2677000 	rsblt	r7, r7, #0
	int error = -(deltax / 2);
     4a0:	e0894fa9 	add	r4, r9, r9, lsr #31
     4a4:	e1a040c4 	asr	r4, r4, #1
     4a8:	e2644000 	rsb	r4, r4, #0
	int y = y0;
	int y_step=0;
	if (y0 < y1){
		y_step = 1;
     4ac:	e1520006 	cmp	r2, r6
     4b0:	d3e0b000 	mvnle	r11, #0
     4b4:	c3a0b001 	movgt	r11, #1
	} else{
		y_step = -1;
	}
	int x=x0;
	for(x;x<x1;x++){
     4b8:	e1530005 	cmp	r3, r5
     4bc:	da00000d 	ble	4f8 <draw_line+0x100>
		if (is_steep){
     4c0:	e3580000 	cmp	r8, #0
			plot_pixel(y, x, color);
     4c4:	11a00006 	movne	r0, r6
     4c8:	11a01005 	movne	r1, r5
		}else{
			plot_pixel(x, y, color);
     4cc:	01a00005 	moveq	r0, r5
     4d0:	01a01006 	moveq	r1, r6
     4d4:	e1a0200a 	mov	r2, r10
     4d8:	ebffffa8 	bl	380 <plot_pixel>
		}
		error = error + deltay;
		if (error >= 0){
     4dc:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
     4e0:	5086600b 	addpl	r6, r6, r11
			error = error - deltax;
     4e4:	50694004 	rsbpl	r4, r9, r4
		y_step = 1;
	} else{
		y_step = -1;
	}
	int x=x0;
	for(x;x<x1;x++){
     4e8:	e2855001 	add	r5, r5, #1
     4ec:	e59d3004 	ldr	r3, [sp, #4]
     4f0:	e1530005 	cmp	r3, r5
     4f4:	cafffff1 	bgt	4c0 <draw_line+0xc8>
		if (error >= 0){
			y = y + y_step;
			error = error - deltax;
		}
	}
}
     4f8:	e28dd014 	add	sp, sp, #20
     4fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000500 <draw_rectangle>:
	int nx=x;
	for(nx;nx<(x+w);nx++){
		draw_line(nx,y,nx,y+h-1,color);
	}
}
void draw_rectangle(int x,int y,int w,int h, short int color){
     500:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     504:	e24dd008 	sub	sp, sp, #8
     508:	e1a06000 	mov	r6, r0
     50c:	e1a08001 	mov	r8, r1
     510:	e1a04003 	mov	r4, r3
     514:	e1dd72f0 	ldrsh	r7, [sp, #32]
	draw_line(x,y,x+w-1,y,color);
     518:	e0802002 	add	r2, r0, r2
     51c:	e2425001 	sub	r5, r2, #1
     520:	e58d7000 	str	r7, [sp]
     524:	e1a02005 	mov	r2, r5
     528:	e1a03001 	mov	r3, r1
     52c:	ebffffb1 	bl	3f8 <draw_line>
	draw_line(x,y,x,y+h-1,color);
     530:	e0884004 	add	r4, r8, r4
     534:	e2444001 	sub	r4, r4, #1
     538:	e58d7000 	str	r7, [sp]
     53c:	e1a00006 	mov	r0, r6
     540:	e1a01008 	mov	r1, r8
     544:	e1a02006 	mov	r2, r6
     548:	e1a03004 	mov	r3, r4
     54c:	ebffffa9 	bl	3f8 <draw_line>
	draw_line(x+w-1,y,x+w-1,y+h-1,color);
     550:	e58d7000 	str	r7, [sp]
     554:	e1a00005 	mov	r0, r5
     558:	e1a01008 	mov	r1, r8
     55c:	e1a02005 	mov	r2, r5
     560:	e1a03004 	mov	r3, r4
     564:	ebffffa3 	bl	3f8 <draw_line>
	draw_line(x,y+h-1,x+w-1,y+h-1,color);
     568:	e58d7000 	str	r7, [sp]
     56c:	e1a00006 	mov	r0, r6
     570:	e1a01004 	mov	r1, r4
     574:	e1a02005 	mov	r2, r5
     578:	e1a03004 	mov	r3, r4
     57c:	ebffff9d 	bl	3f8 <draw_line>
}
     580:	e28dd008 	add	sp, sp, #8
     584:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000588 <fill_rectangle>:
		for(y;y<SCREEN_H;y++){
			plot_pixel(x, y, bg_color);
		}
	}
}
void fill_rectangle(int x,int y,int w,int h, short int color){
     588:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     58c:	e24dd008 	sub	sp, sp, #8
     590:	e1a06001 	mov	r6, r1
     594:	e1dd72f0 	ldrsh	r7, [sp, #32]
	int nx=x;
	for(nx;nx<(x+w);nx++){
     598:	e0805002 	add	r5, r0, r2
     59c:	e1500005 	cmp	r0, r5
     5a0:	aa00000b 	bge	5d4 <fill_rectangle+0x4c>
			plot_pixel(x, y, bg_color);
		}
	}
}
void fill_rectangle(int x,int y,int w,int h, short int color){
	int nx=x;
     5a4:	e1a04000 	mov	r4, r0
	for(nx;nx<(x+w);nx++){
		draw_line(nx,y,nx,y+h-1,color);
     5a8:	e0818003 	add	r8, r1, r3
     5ac:	e2488001 	sub	r8, r8, #1
     5b0:	e58d7000 	str	r7, [sp]
     5b4:	e1a00004 	mov	r0, r4
     5b8:	e1a01006 	mov	r1, r6
     5bc:	e1a02004 	mov	r2, r4
     5c0:	e1a03008 	mov	r3, r8
     5c4:	ebffff8b 	bl	3f8 <draw_line>
		}
	}
}
void fill_rectangle(int x,int y,int w,int h, short int color){
	int nx=x;
	for(nx;nx<(x+w);nx++){
     5c8:	e2844001 	add	r4, r4, #1
     5cc:	e1540005 	cmp	r4, r5
     5d0:	bafffff6 	blt	5b0 <fill_rectangle+0x28>
		draw_line(nx,y,nx,y+h-1,color);
	}
}
     5d4:	e28dd008 	add	sp, sp, #8
     5d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000005dc <wait_for_vsync>:
}
void wait_for_vsync(){
    volatile int *pixel_ctrl_ptr = (int *)PIXEL_BUF_CTRL_BASE;
    register int status;

    *pixel_ctrl_ptr = 1; // start synchronized process
     5dc:	e3033fff 	movw	r3, #16383	; 0x3fff
     5e0:	e34f3f20 	movt	r3, #65312	; 0xff20
     5e4:	e3a02001 	mov	r2, #1
     5e8:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

    status = *(pixel_ctrl_ptr + 3);
     5ec:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while ((status & 0x01) != 0){
     5f0:	e3130001 	tst	r3, #1
     5f4:	012fff1e 	bxeq	lr
        status = *(pixel_ctrl_ptr + 3);
     5f8:	e3032fff 	movw	r2, #16383	; 0x3fff
     5fc:	e34f2f20 	movt	r2, #65312	; 0xff20
     600:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    register int status;

    *pixel_ctrl_ptr = 1; // start synchronized process

    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0){
     604:	e3130001 	tst	r3, #1
     608:	1afffffc 	bne	600 <wait_for_vsync+0x24>
     60c:	e12fff1e 	bx	lr

00000610 <draw_number>:
        status = *(pixel_ctrl_ptr + 3);
    }
}
void draw_number(int x, int y, int num, bool bold) { // num must be between 0 - 9
     610:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     614:	e24dd00c 	sub	sp, sp, #12
     618:	e1a0b000 	mov	r11, r0
     61c:	e1a09001 	mov	r9, r1
	int t, boldedThickness;

	if (bold) {
		boldedThickness = 3;
	} else {
		boldedThickness = 0;
     620:	e3530000 	cmp	r3, #0
     624:	13a03003 	movne	r3, #3
     628:	03a03000 	moveq	r3, #0
     62c:	e58d3000 	str	r3, [sp]
	}
	for (t = 0; t <= boldedThickness; t++) {
     630:	e3a07000 	mov	r7, #0
    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0){
        status = *(pixel_ctrl_ptr + 3);
    }
}
void draw_number(int x, int y, int num, bool bold) { // num must be between 0 - 9
     634:	e3023324 	movw	r3, #8996	; 0x2324
     638:	e3403000 	movt	r3, #0
     63c:	e3001222 	movw	r1, #546	; 0x222
     640:	e0213291 	mla	r1, r1, r2, r3
     644:	e58d1004 	str	r1, [sp, #4]
     648:	e1a08007 	mov	r8, r7
		boldedThickness = 0;
	}
	for (t = 0; t <= boldedThickness; t++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (number[num][dim] == color2) {
				plot_pixel(x + dim % NUM_W + t, y + dim / NUM_W, number[num][dim]);
     64c:	e30eac4f 	movw	r10, #60495	; 0xec4f
     650:	e344aec4 	movt	r10, #20164	; 0x4ec4
		boldedThickness = 3;
	} else {
		boldedThickness = 0;
	}
	for (t = 0; t <= boldedThickness; t++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     654:	e3006111 	movw	r6, #273	; 0x111
     658:	ea000014 	b	6b0 <draw_number+0xa0>
			if (number[num][dim] == color2) {
     65c:	e1f530b2 	ldrh	r3, [r5, #2]!
     660:	e3530000 	cmp	r3, #0
     664:	1a00000a 	bne	694 <draw_number+0x84>
				plot_pixel(x + dim % NUM_W + t, y + dim / NUM_W, number[num][dim]);
     668:	e0c1349a 	smull	r3, r1, r10, r4
     66c:	e1a03fc4 	asr	r3, r4, #31
     670:	e0631141 	rsb	r1, r3, r1, asr #2
     674:	e0810081 	add	r0, r1, r1, lsl #1
     678:	e0810100 	add	r0, r1, r0, lsl #2
     67c:	e0600004 	rsb	r0, r0, r4
     680:	e080000b 	add	r0, r0, r11
     684:	e0800007 	add	r0, r0, r7
     688:	e0811009 	add	r1, r1, r9
     68c:	e1a02008 	mov	r2, r8
     690:	ebffff3a 	bl	380 <plot_pixel>
		boldedThickness = 3;
	} else {
		boldedThickness = 0;
	}
	for (t = 0; t <= boldedThickness; t++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     694:	e2844001 	add	r4, r4, #1
     698:	e1540006 	cmp	r4, r6
     69c:	1affffee 	bne	65c <draw_number+0x4c>
	if (bold) {
		boldedThickness = 3;
	} else {
		boldedThickness = 0;
	}
	for (t = 0; t <= boldedThickness; t++) {
     6a0:	e2877001 	add	r7, r7, #1
     6a4:	e59d3000 	ldr	r3, [sp]
     6a8:	e1570003 	cmp	r7, r3
     6ac:	ca000003 	bgt	6c0 <draw_number+0xb0>
    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0){
        status = *(pixel_ctrl_ptr + 3);
    }
}
void draw_number(int x, int y, int num, bool bold) { // num must be between 0 - 9
     6b0:	e59d3004 	ldr	r3, [sp, #4]
     6b4:	e2435002 	sub	r5, r3, #2
     6b8:	e1a04008 	mov	r4, r8
     6bc:	eaffffe6 	b	65c <draw_number+0x4c>
			if (number[num][dim] == color2) {
				plot_pixel(x + dim % NUM_W + t, y + dim / NUM_W, number[num][dim]);
			}
		}
	}
}
     6c0:	e28dd00c 	add	sp, sp, #12
     6c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000006c8 <draw_sequence>:
void draw_sequence(int x, int y, int num, bool bold) {
     6c8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     6cc:	e1a0a001 	mov	r10, r1
	int numOfDigits = 0;
	int boldThickness;

	if (bold) {
     6d0:	e2537000 	subs	r7, r3, #0
		boldThickness = 3;
     6d4:	e3530000 	cmp	r3, #0
     6d8:	13a03003 	movne	r3, #3
     6dc:	03a03000 	moveq	r3, #0
	} else {
		boldThickness = 0;
	}
	while (num > 0) {
     6e0:	e3520000 	cmp	r2, #0
     6e4:	d8bd85f8 	pople	{r3, r4, r5, r6, r7, r8, r10, pc}
				plot_pixel(x + dim % NUM_W + t, y + dim / NUM_W, number[num][dim]);
			}
		}
	}
}
void draw_sequence(int x, int y, int num, bool bold) {
     6e8:	e30f6ff1 	movw	r6, #65521	; 0xfff1
     6ec:	e34f6fff 	movt	r6, #65535	; 0xffff
     6f0:	e0636006 	rsb	r6, r3, r6
     6f4:	e1a05000 	mov	r5, r0
		boldThickness = 3;
	} else {
		boldThickness = 0;
	}
	while (num > 0) {
		int digit = num % 10;
     6f8:	e3068667 	movw	r8, #26215	; 0x6667
     6fc:	e3468666 	movt	r8, #26214	; 0x6666
     700:	e0c43298 	smull	r3, r4, r8, r2
     704:	e1a03fc2 	asr	r3, r2, #31
     708:	e0634144 	rsb	r4, r3, r4, asr #2
     70c:	e084c104 	add	r12, r4, r4, lsl #2

		draw_number(x - (NUM_W + boldThickness) * numOfDigits - SPACE_BETWEEN_CHAR * numOfDigits, y, digit, bold);
     710:	e1a00005 	mov	r0, r5
     714:	e1a0100a 	mov	r1, r10
     718:	e042208c 	sub	r2, r2, r12, lsl #1
     71c:	e1a03007 	mov	r3, r7
     720:	ebffffba 	bl	610 <draw_number>

		num = num / 10;
     724:	e1a02004 	mov	r2, r4
     728:	e0855006 	add	r5, r5, r6
	if (bold) {
		boldThickness = 3;
	} else {
		boldThickness = 0;
	}
	while (num > 0) {
     72c:	e3540000 	cmp	r4, #0
     730:	cafffff2 	bgt	700 <draw_sequence+0x38>
     734:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00000738 <draw_start>:

		num = num / 10;
		numOfDigits++;
	}
}
void draw_start(int x, int y) {
     738:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     73c:	e24dd014 	sub	sp, sp, #20
     740:	e1a0b000 	mov	r11, r0
     744:	e58d1004 	str	r1, [sp, #4]
     748:	e3a01000 	mov	r1, #0
     74c:	e58d100c 	str	r1, [sp, #12]
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
     750:	e58d1008 	str	r1, [sp, #8]

		num = num / 10;
		numOfDigits++;
	}
}
void draw_start(int x, int y) {
     754:	e1a07001 	mov	r7, r1
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (start[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
     758:	e30e9c4f 	movw	r9, #60495	; 0xec4f
     75c:	e3449ec4 	movt	r9, #20164	; 0x4ec4
}
void draw_start(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     760:	e3006111 	movw	r6, #273	; 0x111
     764:	ea00001a 	b	7d4 <draw_start+0x9c>
			if (start[letter][dim] == color2) {
     768:	e1f530b2 	ldrh	r3, [r5, #2]!
     76c:	e3530000 	cmp	r3, #0
     770:	1a00000c 	bne	7a8 <draw_start+0x70>
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
     774:	e0c12499 	smull	r2, r1, r9, r4
     778:	e1a03fc4 	asr	r3, r4, #31
     77c:	e0631141 	rsb	r1, r3, r1, asr #2
     780:	e0810081 	add	r0, r1, r1, lsl #1
     784:	e0810100 	add	r0, r1, r0, lsl #2
     788:	e0600004 	rsb	r0, r0, r4
     78c:	e080000b 	add	r0, r0, r11
     790:	e080000a 	add	r0, r0, r10
     794:	e0800008 	add	r0, r0, r8
     798:	e59d3004 	ldr	r3, [sp, #4]
     79c:	e0811003 	add	r1, r1, r3
     7a0:	e1a02007 	mov	r2, r7
     7a4:	ebfffef5 	bl	380 <plot_pixel>
}
void draw_start(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
     7a8:	e2844001 	add	r4, r4, #1
     7ac:	e1540006 	cmp	r4, r6
     7b0:	1affffec 	bne	768 <draw_start+0x30>
	}
}
void draw_start(int x, int y) {
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
     7b4:	e59d1008 	ldr	r1, [sp, #8]
     7b8:	e2811001 	add	r1, r1, #1
     7bc:	e58d1008 	str	r1, [sp, #8]
     7c0:	e59d200c 	ldr	r2, [sp, #12]
     7c4:	e282200d 	add	r2, r2, #13
     7c8:	e58d200c 	str	r2, [sp, #12]
     7cc:	e3510005 	cmp	r1, #5
     7d0:	0a000008 	beq	7f8 <draw_start+0xc0>

		num = num / 10;
		numOfDigits++;
	}
}
void draw_start(int x, int y) {
     7d4:	e59d3008 	ldr	r3, [sp, #8]
     7d8:	e1a0a083 	lsl	r10, r3, #1
	int letter, dim;

	for (letter = 0; letter < 5; letter++) {
		for (dim = 0; dim < NUM_H * NUM_W; dim++) {
			if (start[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
     7dc:	e59d800c 	ldr	r8, [sp, #12]

		num = num / 10;
		numOfDigits++;
	}
}
void draw_start(int x, int y) {
     7e0:	e3001222 	movw	r1, #546	; 0x222
     7e4:	e59f2014 	ldr	r2, [pc, #20]	; 800 <draw_start+0xc8>
     7e8:	e0252391 	mla	r5, r1, r3, r2
     7ec:	e2455002 	sub	r5, r5, #2
     7f0:	e1a04007 	mov	r4, r7
     7f4:	eaffffdb 	b	768 <draw_start+0x30>
			if (start[letter][dim] == color2) {
				plot_pixel(x + dim % NUM_W + SPACE_BETWEEN_CHAR * letter + NUM_W * letter, y + dim / NUM_W, start[letter][dim]);
			}
		}
	}
     7f8:	e28dd014 	add	sp, sp, #20
     7fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     800:	00003878 	.word	0x00003878

00000804 <interval_timer_ISR>:
#include "animation.h"

extern int tick;
void interval_timer_ISR(){
    volatile int * interval_timer_ptr = (int *)TIMER_BASE;
    *(interval_timer_ptr) = 0; // Clear the interrupt
     804:	e3a03a02 	mov	r3, #8192	; 0x2000
     808:	e34f3f20 	movt	r3, #65312	; 0xff20
     80c:	e3a02000 	mov	r2, #0
     810:	e5832000 	str	r2, [r3]
	tick++;
     814:	e3043cf8 	movw	r3, #19704	; 0x4cf8
     818:	e3403000 	movt	r3, #0
     81c:	e5932000 	ldr	r2, [r3]
     820:	e2822001 	add	r2, r2, #1
     824:	e5832000 	str	r2, [r3]
	
	volatile int * LED_ptr = (int *)LED_BASE; // LED address
	*(LED_ptr) = tick;
     828:	e3a03000 	mov	r3, #0
     82c:	e34f3f20 	movt	r3, #65312	; 0xff20
     830:	e5832000 	str	r2, [r3]
     834:	e12fff1e 	bx	lr

00000838 <pushbutton_ISR>:

void pushbutton_ISR(void){
    volatile int * KEY_ptr = (int *)KEY_BASE;
    int            press;

    press          = *(KEY_ptr + 3); // read the pushbutton interrupt register
     838:	e3a02000 	mov	r2, #0
     83c:	e34f2f20 	movt	r2, #65312	; 0xff20
     840:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
    *(KEY_ptr + 3) = press;          // Clear the interrupt
     844:	e582305c 	str	r3, [r2, #92]	; 0x5c
	
	//In case of hyper-tapping
	if(press&1){
     848:	e3130001 	tst	r3, #1
		key[0]++;
     84c:	13042c08 	movwne	r2, #19464	; 0x4c08
     850:	13402000 	movtne	r2, #0
     854:	15921000 	ldrne	r1, [r2]
     858:	12811001 	addne	r1, r1, #1
     85c:	15821000 	strne	r1, [r2]
	}
	if((press>>1)&1){
     860:	e3130002 	tst	r3, #2
		key[1]++;
     864:	13042c08 	movwne	r2, #19464	; 0x4c08
     868:	13402000 	movtne	r2, #0
     86c:	15921004 	ldrne	r1, [r2, #4]
     870:	12811001 	addne	r1, r1, #1
     874:	15821004 	strne	r1, [r2, #4]
	}
	if((press>>2)&1){
     878:	e3130004 	tst	r3, #4
		key[2]++;
     87c:	13042c08 	movwne	r2, #19464	; 0x4c08
     880:	13402000 	movtne	r2, #0
     884:	15921008 	ldrne	r1, [r2, #8]
     888:	12811001 	addne	r1, r1, #1
     88c:	15821008 	strne	r1, [r2, #8]
	}
	if((press>>3)&1){
     890:	e3130008 	tst	r3, #8
		key[3]++;
     894:	13043c08 	movwne	r3, #19464	; 0x4c08
     898:	13403000 	movtne	r3, #0
     89c:	1593200c 	ldrne	r2, [r3, #12]
     8a0:	12822001 	addne	r2, r2, #1
     8a4:	1583200c 	strne	r2, [r3, #12]
     8a8:	e12fff1e 	bx	lr

000008ac <__cs3_isr_irq>:
void interval_timer_ISR(void);
void pushbutton_ISR(void);

// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(void)
{
     8ac:	e24ee004 	sub	lr, lr, #4
     8b0:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
    // Read the ICCIAR from the processor interface
    int address = MPCORE_GIC_CPUIF + ICCIAR;
    int int_ID  = *((int *)address);
     8b4:	e3e03a13 	mvn	r3, #77824	; 0x13000
     8b8:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d

	if (int_ID == INTERVAL_TIMER_IRQ) // check if interrupt is from the Altera timer
     8bc:	e3540048 	cmp	r4, #72	; 0x48
     8c0:	1a000001 	bne	8cc <__cs3_isr_irq+0x20>
        interval_timer_ISR();
     8c4:	ebffffce 	bl	804 <interval_timer_ISR>
     8c8:	ea000004 	b	8e0 <__cs3_isr_irq+0x34>
    else if (int_ID == KEYS_IRQ) // check if interrupt is from the KEYs
     8cc:	e3540049 	cmp	r4, #73	; 0x49
     8d0:	1a000001 	bne	8dc <__cs3_isr_irq+0x30>
        pushbutton_ISR();
     8d4:	ebffffd7 	bl	838 <pushbutton_ISR>
     8d8:	ea000000 	b	8e0 <__cs3_isr_irq+0x34>
     8dc:	eafffffe 	b	8dc <__cs3_isr_irq+0x30>
        while (1)
            ; // if unexpected, then stay here

    // Write to the End of Interrupt Register (ICCEOIR)
    address           = MPCORE_GIC_CPUIF + ICCEOIR;
    *((int *)address) = int_ID;
     8e0:	e3e03a13 	mvn	r3, #77824	; 0x13000
     8e4:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
     8e8:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

000008ec <__cs3_reset>:
    return;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void)
{
     8ec:	eafffffe 	b	8ec <__cs3_reset>

000008f0 <__cs3_isr_undef>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_undef(void)
{
     8f0:	eafffffe 	b	8f0 <__cs3_isr_undef>

000008f4 <__cs3_isr_swi>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_swi(void)
{
     8f4:	eafffffe 	b	8f4 <__cs3_isr_swi>

000008f8 <__cs3_isr_pabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_pabort(void)
{
     8f8:	eafffffe 	b	8f8 <__cs3_isr_pabort>

000008fc <__cs3_isr_dabort>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_dabort(void)
{
     8fc:	eafffffe 	b	8fc <__cs3_isr_dabort>

00000900 <__cs3_isr_fiq>:
    while (1)
        ;
}

void __attribute__((interrupt)) __cs3_isr_fiq(void)
{
     900:	eafffffe 	b	900 <__cs3_isr_fiq>

00000904 <set_A9_IRQ_stack>:
{
    int stack, mode;
    stack = A9_ONCHIP_END - 7; // top of A9 onchip memory, aligned to 8 bytes
    /* change processor to IRQ mode with interrupts disabled */
    mode = INT_DISABLE | IRQ_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     904:	e3a030d2 	mov	r3, #210	; 0xd2
     908:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r"(stack));
     90c:	e3e03007 	mvn	r3, #7
     910:	e1a0d003 	mov	sp, r3

    /* go back to SVC mode before executing subroutine return! */
    mode = INT_DISABLE | SVC_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     914:	e3a030d3 	mov	r3, #211	; 0xd3
     918:	e129f003 	msr	CPSR_fc, r3
     91c:	e12fff1e 	bx	lr

00000920 <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
    int status = SVC_MODE | INT_ENABLE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(status));
     920:	e3a03053 	mov	r3, #83	; 0x53
     924:	e129f003 	msr	CPSR_fc, r3
     928:	e12fff1e 	bx	lr

0000092c <config_GIC>:
void config_GIC(void)
{
    int address; // used to calculate register addresses

    /* configure the FPGA interval timer and KEYs interrupts */
    *((int *)0xFFFED848) = 0x00000101;
     92c:	e3e03a12 	mvn	r3, #73728	; 0x12000
     930:	e3002101 	movw	r2, #257	; 0x101
     934:	e50327b7 	str	r2, [r3, #-1975]	; 0xfffff849
    *((int *)0xFFFED108) = 0x00000300;
     938:	e3a02c03 	mov	r2, #768	; 0x300
     93c:	e5032ef7 	str	r2, [r3, #-3831]	; 0xfffff109

    // Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
    // priorities
    address           = MPCORE_GIC_CPUIF + ICCPMR;
    *((int *)address) = 0xFFFF;
     940:	e3e01a13 	mvn	r1, #77824	; 0x13000
     944:	e30f2fff 	movw	r2, #65535	; 0xffff
     948:	e5012efb 	str	r2, [r1, #-3835]	; 0xfffff105

    // Set CPU Interface Control Register (ICCICR). Enable signaling of
    // interrupts
    address           = MPCORE_GIC_CPUIF + ICCICR;
    *((int *)address) = ENABLE;
     94c:	e3a02001 	mov	r2, #1
     950:	e5012eff 	str	r2, [r1, #-3839]	; 0xfffff101

    // Configure the Distributor Control Register (ICDDCR) to send pending
    // interrupts to CPUs
    address           = MPCORE_GIC_DIST + ICDDCR;
    *((int *)address) = ENABLE;
     954:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
     958:	e12fff1e 	bx	lr

0000095c <lift_board>:
		}else{
		}
		key[3]--;
	}
}
void lift_board(int board[][BOARD_ROWS], bool *odd, int *path_end){
     95c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     960:	e1a06000 	mov	r6, r0
     964:	e1a05001 	mov	r5, r1
     968:	e1a07002 	mov	r7, r2
     96c:	e1a01000 	mov	r1, r0
     970:	e3a02001 	mov	r2, #1
     974:	e3040c94 	movw	r0, #19604	; 0x4c94
     978:	e3400000 	movt	r0, #0
     97c:	e3a08000 	mov	r8, #0
     980:	ea000008 	b	9a8 <lift_board+0x4c>
	int row = 0;
	for(row;row<BOARD_ROWS-1;row++){
		int col = 0;
		for(col;col<BOARD_COLS;col++){
			board[row][col] = p1_board[row+1][col];
     984:	e5bce004 	ldr	lr, [r12, #4]!
     988:	e784e003 	str	lr, [r4, r3]
     98c:	e2833004 	add	r3, r3, #4
}
void lift_board(int board[][BOARD_ROWS], bool *odd, int *path_end){
	int row = 0;
	for(row;row<BOARD_ROWS-1;row++){
		int col = 0;
		for(col;col<BOARD_COLS;col++){
     990:	e3530014 	cmp	r3, #20
     994:	1afffffa 	bne	984 <lift_board+0x28>
     998:	e2822001 	add	r2, r2, #1
     99c:	e2811014 	add	r1, r1, #20
		key[3]--;
	}
}
void lift_board(int board[][BOARD_ROWS], bool *odd, int *path_end){
	int row = 0;
	for(row;row<BOARD_ROWS-1;row++){
     9a0:	e3520005 	cmp	r2, #5
     9a4:	0a000005 	beq	9c0 <lift_board+0x64>
		int col = 0;
		for(col;col<BOARD_COLS;col++){
			board[row][col] = p1_board[row+1][col];
     9a8:	e1a04001 	mov	r4, r1
		}else{
		}
		key[3]--;
	}
}
void lift_board(int board[][BOARD_ROWS], bool *odd, int *path_end){
     9ac:	e082c102 	add	r12, r2, r2, lsl #2
     9b0:	e080c10c 	add	r12, r0, r12, lsl #2
     9b4:	e24cc004 	sub	r12, r12, #4
     9b8:	e1a03008 	mov	r3, r8
     9bc:	eafffff0 	b	984 <lift_board+0x28>
     9c0:	e2868050 	add	r8, r6, #80	; 0x50
     9c4:	e3a04000 	mov	r4, #0
		}	
	}
	row = BOARD_ROWS-1;
	int col=0;
	for(col;col<BOARD_COLS;col++){
		board[row][col] = NONE;
     9c8:	e1a0a004 	mov	r10, r4
     9cc:	e488a004 	str	r10, [r8], #4
		int type = rand()%TOTAL_TYPES;
     9d0:	eb0001d9 	bl	113c <rand>
     9d4:	e0803fa0 	add	r3, r0, r0, lsr #31
     9d8:	e2033001 	and	r3, r3, #1
     9dc:	e0430fa0 	sub	r0, r3, r0, lsr #31
		if(*odd){
     9e0:	e5d52000 	ldrb	r2, [r5]
     9e4:	e3520000 	cmp	r2, #0
     9e8:	0a000006 	beq	a08 <lift_board+0xac>
			if(col%2==1){
     9ec:	e1a02fa4 	lsr	r2, r4, #31
     9f0:	e0841002 	add	r1, r4, r2
     9f4:	e2011001 	and	r1, r1, #1
     9f8:	e0622001 	rsb	r2, r2, r1
     9fc:	e3520001 	cmp	r2, #1
				board[row][col] = type;
     a00:	05080004 	streq	r0, [r8, #-4]
     a04:	ea000001 	b	a10 <lift_board+0xb4>
			}
		}else{
			if(col%2==0){
     a08:	e3140001 	tst	r4, #1
				board[row][col] = type;
     a0c:	05080004 	streq	r0, [r8, #-4]
			board[row][col] = p1_board[row+1][col];
		}	
	}
	row = BOARD_ROWS-1;
	int col=0;
	for(col;col<BOARD_COLS;col++){
     a10:	e2844001 	add	r4, r4, #1
     a14:	e3540005 	cmp	r4, #5
     a18:	1affffeb 	bne	9cc <lift_board+0x70>
			if(col%2==0){
				board[row][col] = type;
			}
		}
	}
	*odd = !*odd;
     a1c:	e5d53000 	ldrb	r3, [r5]
     a20:	e2233001 	eor	r3, r3, #1
     a24:	e5c53000 	strb	r3, [r5]
	
	row = BOARD_ROWS - 1;
	int next = rand()%2;
     a28:	eb0001c3 	bl	113c <rand>
     a2c:	e0803fa0 	add	r3, r0, r0, lsr #31
     a30:	e2033001 	and	r3, r3, #1
     a34:	e0430fa0 	sub	r0, r3, r0, lsr #31
	next = next*2-1;
     a38:	e1a03080 	lsl	r3, r0, #1
     a3c:	e2433001 	sub	r3, r3, #1
	
	int temp = *path_end;
     a40:	e5972000 	ldr	r2, [r7]
	
	if((temp+next) >= BOARD_COLS||(temp+next)<0){
     a44:	e0821003 	add	r1, r2, r3
     a48:	e3510004 	cmp	r1, #4
		temp -= next;
     a4c:	80633002 	rsbhi	r3, r3, r2
	int next = rand()%2;
	next = next*2-1;
	
	int temp = *path_end;
	
	if((temp+next) >= BOARD_COLS||(temp+next)<0){
     a50:	8a000008 	bhi	a78 <lift_board+0x11c>
		temp -= next;
	}else if((temp-next) >= BOARD_COLS||(temp-next)<0){
     a54:	e0633002 	rsb	r3, r3, r2
     a58:	e3530004 	cmp	r3, #4
		temp += next;
     a5c:	81a03001 	movhi	r3, r1
	
	int temp = *path_end;
	
	if((temp+next) >= BOARD_COLS||(temp+next)<0){
		temp -= next;
	}else if((temp-next) >= BOARD_COLS||(temp-next)<0){
     a60:	8a000004 	bhi	a78 <lift_board+0x11c>
		temp += next;
	}else{
		if(board[row][temp+next] == PLATFORM){
     a64:	e0862101 	add	r2, r6, r1, lsl #2
     a68:	e5922050 	ldr	r2, [r2, #80]	; 0x50
			temp += next;
     a6c:	e3520001 	cmp	r2, #1
     a70:	01a03001 	moveq	r3, r1
     a74:	eaffffff 	b	a78 <lift_board+0x11c>
		}else{
			temp -= next;
		}
	}
	board[row][temp] = PLATFORM;
     a78:	e0866103 	add	r6, r6, r3, lsl #2
     a7c:	e3a02001 	mov	r2, #1
     a80:	e5862050 	str	r2, [r6, #80]	; 0x50
	*path_end = temp;
     a84:	e5873000 	str	r3, [r7]
     a88:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00000a8c <logic>:
int p2_path_end;

bool p1_odd_row = false;
bool p2_odd_row = false;
void lift_board(int board[][BOARD_ROWS], bool *odd, int *path_end);
void logic(){
     a8c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
	
	//Handle key input
	//Used while loop to handle hyper-tapping between frames
	
	//Player 2. Key[0] = right, Key[1] = left
	while(key[0]!=0){
     a90:	e3043c08 	movw	r3, #19464	; 0x4c08
     a94:	e3403000 	movt	r3, #0
     a98:	e5933000 	ldr	r3, [r3]
     a9c:	e3530000 	cmp	r3, #0
     aa0:	0a000005 	beq	abc <logic+0x30>
     aa4:	e2533001 	subs	r3, r3, #1
     aa8:	1afffffd 	bne	aa4 <logic+0x18>
     aac:	e3043c08 	movw	r3, #19464	; 0x4c08
     ab0:	e3403000 	movt	r3, #0
     ab4:	e3a02000 	mov	r2, #0
     ab8:	e5832000 	str	r2, [r3]
		key[0]--;
	}
	while(key[1]!=0){
     abc:	e3043c08 	movw	r3, #19464	; 0x4c08
     ac0:	e3403000 	movt	r3, #0
     ac4:	e5933004 	ldr	r3, [r3, #4]
     ac8:	e3530000 	cmp	r3, #0
     acc:	0a000005 	beq	ae8 <logic+0x5c>
     ad0:	e2533001 	subs	r3, r3, #1
     ad4:	1afffffd 	bne	ad0 <logic+0x44>
     ad8:	e3043c08 	movw	r3, #19464	; 0x4c08
     adc:	e3403000 	movt	r3, #0
     ae0:	e3a02000 	mov	r2, #0
     ae4:	e5832004 	str	r2, [r3, #4]
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
     ae8:	e3043c08 	movw	r3, #19464	; 0x4c08
     aec:	e3403000 	movt	r3, #0
     af0:	e5933008 	ldr	r3, [r3, #8]
     af4:	e3530000 	cmp	r3, #0
     af8:	0a00001f 	beq	b7c <logic+0xf0>
		if(p1_x != (BOARD_ROWS-1)){
     afc:	e3045394 	movw	r5, #17300	; 0x4394
     b00:	e3405000 	movt	r5, #0
			p1_x+=1;
			p1_move(RIGHT);
			p1b_move(UP);
			p1_score++;
     b04:	e3046c2c 	movw	r6, #19500	; 0x4c2c
     b08:	e3406000 	movt	r6, #0
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
     b0c:	e3048c94 	movw	r8, #19604	; 0x4c94
     b10:	e3408000 	movt	r8, #0
     b14:	e3047c18 	movw	r7, #19480	; 0x4c18
     b18:	e3407000 	movt	r7, #0
     b1c:	e287a004 	add	r10, r7, #4
		}else{
		}
		key[2]--;
     b20:	e3044c08 	movw	r4, #19464	; 0x4c08
     b24:	e3404000 	movt	r4, #0
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
		if(p1_x != (BOARD_ROWS-1)){
     b28:	e5953000 	ldr	r3, [r5]
     b2c:	e3530004 	cmp	r3, #4
     b30:	0a00000c 	beq	b68 <logic+0xdc>
			p1_x+=1;
     b34:	e2833001 	add	r3, r3, #1
     b38:	e5853000 	str	r3, [r5]
			p1_move(RIGHT);
     b3c:	e3e00000 	mvn	r0, #0
     b40:	eb000155 	bl	109c <p1_move>
			p1b_move(UP);
     b44:	e3a00001 	mov	r0, #1
     b48:	eb000159 	bl	10b4 <p1b_move>
			p1_score++;
     b4c:	e5963000 	ldr	r3, [r6]
     b50:	e2833001 	add	r3, r3, #1
     b54:	e5863000 	str	r3, [r6]
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
     b58:	e1a00008 	mov	r0, r8
     b5c:	e1a01007 	mov	r1, r7
     b60:	e1a0200a 	mov	r2, r10
     b64:	ebffff7c 	bl	95c <lift_board>
		}else{
		}
		key[2]--;
     b68:	e5943008 	ldr	r3, [r4, #8]
     b6c:	e2433001 	sub	r3, r3, #1
     b70:	e5843008 	str	r3, [r4, #8]
	while(key[1]!=0){
		key[1]--;
	}
	
	//Player 1. Key[2] = right, Key[3] = left
	while(key[2]!=0){
     b74:	e3530000 	cmp	r3, #0
     b78:	1affffea 	bne	b28 <logic+0x9c>
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
		}else{
		}
		key[2]--;
	}
	while(key[3]!=0){
     b7c:	e3043c08 	movw	r3, #19464	; 0x4c08
     b80:	e3403000 	movt	r3, #0
     b84:	e593300c 	ldr	r3, [r3, #12]
     b88:	e3530000 	cmp	r3, #0
     b8c:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
		if(p1_x != 0){
     b90:	e3045394 	movw	r5, #17300	; 0x4394
     b94:	e3405000 	movt	r5, #0
			p1_x-=1;
			p1_move(LEFT);
			p1b_move(UP);
			p1_score++;
     b98:	e3046c2c 	movw	r6, #19500	; 0x4c2c
     b9c:	e3406000 	movt	r6, #0
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
     ba0:	e3048c94 	movw	r8, #19604	; 0x4c94
     ba4:	e3408000 	movt	r8, #0
     ba8:	e3047c18 	movw	r7, #19480	; 0x4c18
     bac:	e3407000 	movt	r7, #0
     bb0:	e287a004 	add	r10, r7, #4
		}else{
		}
		key[3]--;
     bb4:	e3044c08 	movw	r4, #19464	; 0x4c08
     bb8:	e3404000 	movt	r4, #0
		}else{
		}
		key[2]--;
	}
	while(key[3]!=0){
		if(p1_x != 0){
     bbc:	e5953000 	ldr	r3, [r5]
     bc0:	e3530000 	cmp	r3, #0
     bc4:	0a00000c 	beq	bfc <logic+0x170>
			p1_x-=1;
     bc8:	e2433001 	sub	r3, r3, #1
     bcc:	e5853000 	str	r3, [r5]
			p1_move(LEFT);
     bd0:	e3a00001 	mov	r0, #1
     bd4:	eb000130 	bl	109c <p1_move>
			p1b_move(UP);
     bd8:	e3a00001 	mov	r0, #1
     bdc:	eb000134 	bl	10b4 <p1b_move>
			p1_score++;
     be0:	e5963000 	ldr	r3, [r6]
     be4:	e2833001 	add	r3, r3, #1
     be8:	e5863000 	str	r3, [r6]
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
     bec:	e1a00008 	mov	r0, r8
     bf0:	e1a01007 	mov	r1, r7
     bf4:	e1a0200a 	mov	r2, r10
     bf8:	ebffff57 	bl	95c <lift_board>
		}else{
		}
		key[3]--;
     bfc:	e594300c 	ldr	r3, [r4, #12]
     c00:	e2433001 	sub	r3, r3, #1
     c04:	e584300c 	str	r3, [r4, #12]
			lift_board(p1_board,&p1_odd_row,&p1_path_end);
		}else{
		}
		key[2]--;
	}
	while(key[3]!=0){
     c08:	e3530000 	cmp	r3, #0
     c0c:	1affffea 	bne	bbc <logic+0x130>
     c10:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}

00000c14 <init_board>:
		}
	}
	board[row][temp] = PLATFORM;
	*path_end = temp;
}
void init_board(){
     c14:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	p1_x = BOARD_COLS/2;
     c18:	e3043394 	movw	r3, #17300	; 0x4394
     c1c:	e3403000 	movt	r3, #0
     c20:	e3a02002 	mov	r2, #2
     c24:	e5832000 	str	r2, [r3]
	p2_x = BOARD_COLS/2;
     c28:	e3043390 	movw	r3, #17296	; 0x4390
     c2c:	e3403000 	movt	r3, #0
     c30:	e5832000 	str	r2, [r3]

	p1_score = 0;
     c34:	e3043c2c 	movw	r3, #19500	; 0x4c2c
     c38:	e3403000 	movt	r3, #0
     c3c:	e3a04000 	mov	r4, #0
     c40:	e5834000 	str	r4, [r3]
	p2_score = 0;
     c44:	e3043c28 	movw	r3, #19496	; 0x4c28
     c48:	e3403000 	movt	r3, #0
     c4c:	e5834000 	str	r4, [r3]
	
	
	srand(time(NULL));
     c50:	e1a00004 	mov	r0, r4
     c54:	eb00014f 	bl	1198 <time>
     c58:	eb000130 	bl	1120 <srand>
	int row=0;
	int col=0;
	for(col;col<BOARD_COLS;col++){
		p1_board[row][col] = NONE;
     c5c:	e304ac94 	movw	r10, #19604	; 0x4c94
     c60:	e340a000 	movt	r10, #0
     c64:	e58a4000 	str	r4, [r10]
		p2_board[row][col] = NONE;
     c68:	e3048c30 	movw	r8, #19504	; 0x4c30
     c6c:	e3408000 	movt	r8, #0
     c70:	e5884000 	str	r4, [r8]
	
	srand(time(NULL));
	int row=0;
	int col=0;
	for(col;col<BOARD_COLS;col++){
		p1_board[row][col] = NONE;
     c74:	e58a4004 	str	r4, [r10, #4]
		p2_board[row][col] = NONE;
     c78:	e5884004 	str	r4, [r8, #4]
	
	srand(time(NULL));
	int row=0;
	int col=0;
	for(col;col<BOARD_COLS;col++){
		p1_board[row][col] = NONE;
     c7c:	e58a4008 	str	r4, [r10, #8]
		p2_board[row][col] = NONE;
     c80:	e5884008 	str	r4, [r8, #8]
	
	srand(time(NULL));
	int row=0;
	int col=0;
	for(col;col<BOARD_COLS;col++){
		p1_board[row][col] = NONE;
     c84:	e58a400c 	str	r4, [r10, #12]
		p2_board[row][col] = NONE;
     c88:	e588400c 	str	r4, [r8, #12]
	
	srand(time(NULL));
	int row=0;
	int col=0;
	for(col;col<BOARD_COLS;col++){
		p1_board[row][col] = NONE;
     c8c:	e58a4010 	str	r4, [r10, #16]
		p2_board[row][col] = NONE;
     c90:	e5884010 	str	r4, [r8, #16]
     c94:	e28aa014 	add	r10, r10, #20
     c98:	e2888014 	add	r8, r8, #20
     c9c:	e3a07001 	mov	r7, #1
		}
	}
	board[row][temp] = PLATFORM;
	*path_end = temp;
}
void init_board(){
     ca0:	e1a09004 	mov	r9, r4
     ca4:	ea000019 	b	d10 <init_board+0xfc>
	
	row = 1;
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			int type = rand()%TOTAL_TYPES;
     ca8:	eb000123 	bl	113c <rand>
     cac:	e0803fa0 	add	r3, r0, r0, lsr #31
     cb0:	e2033001 	and	r3, r3, #1
     cb4:	e0430fa0 	sub	r0, r3, r0, lsr #31
			if(row%2==0){
     cb8:	e3560000 	cmp	r6, #0
     cbc:	1a000007 	bne	ce0 <init_board+0xcc>
				if(col%2==1){
     cc0:	e1a02fa4 	lsr	r2, r4, #31
     cc4:	e0841002 	add	r1, r4, r2
     cc8:	e2011001 	and	r1, r1, #1
     ccc:	e0622001 	rsb	r2, r2, r1
     cd0:	e3520001 	cmp	r2, #1
					p1_board[row][col] = type;
     cd4:	078a0005 	streq	r0, [r10, r5]
					p2_board[row][col] = type;
     cd8:	07880005 	streq	r0, [r8, r5]
     cdc:	ea000002 	b	cec <init_board+0xd8>
				}
			}
			else{
				if(col%2==0){
     ce0:	e3140001 	tst	r4, #1
					p1_board[row][col] = type;
     ce4:	078a0005 	streq	r0, [r10, r5]
					p2_board[row][col] = type;
     ce8:	07880005 	streq	r0, [r8, r5]
	}
	
	row = 1;
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
     cec:	e2844001 	add	r4, r4, #1
     cf0:	e2855004 	add	r5, r5, #4
     cf4:	e3540005 	cmp	r4, #5
     cf8:	1affffea 	bne	ca8 <init_board+0x94>
		p1_board[row][col] = NONE;
		p2_board[row][col] = NONE;
	}
	
	row = 1;
	for(row;row<BOARD_ROWS;row++){
     cfc:	e2877001 	add	r7, r7, #1
     d00:	e28aa014 	add	r10, r10, #20
     d04:	e2888014 	add	r8, r8, #20
     d08:	e3570005 	cmp	r7, #5
     d0c:	0a000003 	beq	d20 <init_board+0x10c>
		}
	}
	board[row][temp] = PLATFORM;
	*path_end = temp;
}
void init_board(){
     d10:	e1a05009 	mov	r5, r9
     d14:	e1a04009 	mov	r4, r9
	row = 1;
	for(row;row<BOARD_ROWS;row++){
		col=0;
		for(col;col<BOARD_COLS;col++){
			int type = rand()%TOTAL_TYPES;
			if(row%2==0){
     d18:	e2076001 	and	r6, r7, #1
     d1c:	eaffffe1 	b	ca8 <init_board+0x94>
				}
			}
		}
	}
	
	p1_board[PLAYER_AT_ROW][p1_x] = PLATFORM;
     d20:	e3043394 	movw	r3, #17300	; 0x4394
     d24:	e3403000 	movt	r3, #0
     d28:	e5931000 	ldr	r1, [r3]
     d2c:	e3043c94 	movw	r3, #19604	; 0x4c94
     d30:	e3403000 	movt	r3, #0
     d34:	e2812005 	add	r2, r1, #5
     d38:	e3a00001 	mov	r0, #1
     d3c:	e7830102 	str	r0, [r3, r2, lsl #2]
	p2_board[PLAYER_AT_ROW][p2_x] = PLATFORM;
     d40:	e3043390 	movw	r3, #17296	; 0x4390
     d44:	e3403000 	movt	r3, #0
     d48:	e5932000 	ldr	r2, [r3]
     d4c:	e3043c30 	movw	r3, #19504	; 0x4c30
     d50:	e3403000 	movt	r3, #0
     d54:	e282c005 	add	r12, r2, #5
     d58:	e783010c 	str	r0, [r3, r12, lsl #2]
	
	
	p1_path_end = p1_x;	
     d5c:	e3043c18 	movw	r3, #19480	; 0x4c18
     d60:	e3403000 	movt	r3, #0
     d64:	e5831004 	str	r1, [r3, #4]
	p2_path_end = p2_x;
     d68:	e5832008 	str	r2, [r3, #8]
	
	row = 2;
     d6c:	e3a04002 	mov	r4, #2
	for(row;row<BOARD_COLS;row++){
		if(p1_path_end+1 < BOARD_COLS && p1_board[row][p1_path_end+1] == PLATFORM){
     d70:	e1a05003 	mov	r5, r3
				next = -next;
			}
			p1_path_end = p1_path_end + next;
			p2_path_end = p2_path_end + next;
			
			p1_board[row][p1_path_end] = PLATFORM;
     d74:	e3046c94 	movw	r6, #19604	; 0x4c94
     d78:	e3406000 	movt	r6, #0
     d7c:	e1a08000 	mov	r8, r0
			p2_board[row][p2_path_end] = PLATFORM;
     d80:	e3047c30 	movw	r7, #19504	; 0x4c30
     d84:	e3407000 	movt	r7, #0
	p1_path_end = p1_x;	
	p2_path_end = p2_x;
	
	row = 2;
	for(row;row<BOARD_COLS;row++){
		if(p1_path_end+1 < BOARD_COLS && p1_board[row][p1_path_end+1] == PLATFORM){
     d88:	e5953004 	ldr	r3, [r5, #4]
     d8c:	e2832001 	add	r2, r3, #1
     d90:	e3520004 	cmp	r2, #4
     d94:	ca000009 	bgt	dc0 <init_board+0x1ac>
     d98:	e0841104 	add	r1, r4, r4, lsl #2
     d9c:	e0811002 	add	r1, r1, r2
     da0:	e7961101 	ldr	r1, [r6, r1, lsl #2]
     da4:	e3510001 	cmp	r1, #1
     da8:	1a000004 	bne	dc0 <init_board+0x1ac>
			p1_path_end++;
     dac:	e5852004 	str	r2, [r5, #4]
			p2_path_end++;
     db0:	e5953008 	ldr	r3, [r5, #8]
     db4:	e2833001 	add	r3, r3, #1
     db8:	e5853008 	str	r3, [r5, #8]
     dbc:	ea00001f 	b	e40 <init_board+0x22c>
		}else if(p1_path_end-1 >= 0 && p1_board[row][p1_path_end-1] == PLATFORM){
     dc0:	e2533001 	subs	r3, r3, #1
     dc4:	4a000009 	bmi	df0 <init_board+0x1dc>
     dc8:	e0842104 	add	r2, r4, r4, lsl #2
     dcc:	e0822003 	add	r2, r2, r3
     dd0:	e7962102 	ldr	r2, [r6, r2, lsl #2]
     dd4:	e3520001 	cmp	r2, #1
     dd8:	1a000004 	bne	df0 <init_board+0x1dc>
			p1_path_end--;
     ddc:	e5853004 	str	r3, [r5, #4]
			p2_path_end--;
     de0:	e5953008 	ldr	r3, [r5, #8]
     de4:	e2433001 	sub	r3, r3, #1
     de8:	e5853008 	str	r3, [r5, #8]
     dec:	ea000013 	b	e40 <init_board+0x22c>
		}else{
			int next = rand()%2;
     df0:	eb0000d1 	bl	113c <rand>
     df4:	e0803fa0 	add	r3, r0, r0, lsr #31
     df8:	e2033001 	and	r3, r3, #1
     dfc:	e0430fa0 	sub	r0, r3, r0, lsr #31
			next = next*2-1;
     e00:	e1a03080 	lsl	r3, r0, #1
     e04:	e2433001 	sub	r3, r3, #1
			
			if(p1_path_end+next >= BOARD_COLS||p1_path_end+next<0){
     e08:	e5951004 	ldr	r1, [r5, #4]
     e0c:	e0812003 	add	r2, r1, r3
     e10:	e3520004 	cmp	r2, #4
				next = -next;
     e14:	82633000 	rsbhi	r3, r3, #0
			}
			p1_path_end = p1_path_end + next;
     e18:	e0831001 	add	r1, r3, r1
     e1c:	e5851004 	str	r1, [r5, #4]
			p2_path_end = p2_path_end + next;
     e20:	e5952008 	ldr	r2, [r5, #8]
     e24:	e0833002 	add	r3, r3, r2
     e28:	e5853008 	str	r3, [r5, #8]
			
			p1_board[row][p1_path_end] = PLATFORM;
     e2c:	e0842104 	add	r2, r4, r4, lsl #2
     e30:	e0821001 	add	r1, r2, r1
     e34:	e7868101 	str	r8, [r6, r1, lsl #2]
			p2_board[row][p2_path_end] = PLATFORM;
     e38:	e0823003 	add	r3, r2, r3
     e3c:	e7878103 	str	r8, [r7, r3, lsl #2]
	
	p1_path_end = p1_x;	
	p2_path_end = p2_x;
	
	row = 2;
	for(row;row<BOARD_COLS;row++){
     e40:	e2844001 	add	r4, r4, #1
     e44:	e3540005 	cmp	r4, #5
     e48:	1affffce 	bne	d88 <init_board+0x174>
			p1_board[row][p1_path_end] = PLATFORM;
			p2_board[row][p2_path_end] = PLATFORM;
		}
		
	}	
}
     e4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

00000e50 <draw_role>:
		draw_role(p1_center,p1_x,p1_offset);
		draw_role(p2_center,p2_x,0);
	}
	draw_number(0,0,p1_path_end,true);
}
void draw_role(int center, int x, int x_offset){
     e50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e54:	e24dd00c 	sub	sp, sp, #12
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	fill_rectangle((x-col_center)*PLATFORM_W + center - ROLE_W/2 + x_offset,
     e58:	e2411002 	sub	r1, r1, #2
     e5c:	e0811081 	add	r1, r1, r1, lsl #1
     e60:	e0800181 	add	r0, r0, r1, lsl #3
     e64:	e2400005 	sub	r0, r0, #5
     e68:	e3a03000 	mov	r3, #0
     e6c:	e58d3000 	str	r3, [sp]
     e70:	e0800002 	add	r0, r0, r2
     e74:	e3a0104a 	mov	r1, #74	; 0x4a
     e78:	e3a0200a 	mov	r2, #10
     e7c:	e1a03002 	mov	r3, r2
     e80:	ebfffdc0 	bl	588 <fill_rectangle>
					(PLATFORM_H+P_V_INTERVAL)+board_y-ROLE_H,
					ROLE_W,ROLE_H,0);
}
     e84:	e28dd00c 	add	sp, sp, #12
     e88:	e8bd8000 	ldmfd	sp!, {pc}

00000e8c <draw_board>:
void draw_board(int center, int y_offset,int board[][BOARD_ROWS]){
     e8c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     e90:	e24dd014 	sub	sp, sp, #20
     e94:	e58d000c 	str	r0, [sp, #12]
     e98:	e1a0a002 	mov	r10, r2
     e9c:	e2818030 	add	r8, r1, #48	; 0x30
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
     ea0:	e3a07000 	mov	r7, #0
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	fill_rectangle((x-col_center)*PLATFORM_W + center - ROLE_W/2 + x_offset,
					(PLATFORM_H+P_V_INTERVAL)+board_y-ROLE_H,
					ROLE_W,ROLE_H,0);
}
void draw_board(int center, int y_offset,int board[][BOARD_ROWS]){
     ea4:	e1a09007 	mov	r9, r7
     ea8:	ea000015 	b	f04 <draw_board+0x78>
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
	for(row;row<BOARD_ROWS;row++){
		int col=0;
		for(col;col<BOARD_COLS;col++){
			if(board[row][col]==PLATFORM){
     eac:	e7963004 	ldr	r3, [r6, r4]
     eb0:	e3530001 	cmp	r3, #1
     eb4:	1a000009 	bne	ee0 <draw_board+0x54>
				fill_rectangle((col-col_center)*PLATFORM_W + center - PLATFORM_W/2,
     eb8:	e1a00009 	mov	r0, r9
     ebc:	e3a010ff 	mov	r1, #255	; 0xff
     ec0:	e1a02009 	mov	r2, r9
     ec4:	ebfffd1d 	bl	340 <rgb24to16>
     ec8:	e58d0000 	str	r0, [sp]
     ecc:	e1a00005 	mov	r0, r5
     ed0:	e1a0100b 	mov	r1, r11
     ed4:	e3a02018 	mov	r2, #24
     ed8:	e3a03006 	mov	r3, #6
     edc:	ebfffda9 	bl	588 <fill_rectangle>
     ee0:	e2844004 	add	r4, r4, #4
     ee4:	e2855018 	add	r5, r5, #24
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
	for(row;row<BOARD_ROWS;row++){
		int col=0;
		for(col;col<BOARD_COLS;col++){
     ee8:	e3540014 	cmp	r4, #20
     eec:	1affffee 	bne	eac <draw_board+0x20>
}
void draw_board(int center, int y_offset,int board[][BOARD_ROWS]){
	int col_center = BOARD_COLS/2;
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	int row=0;
	for(row;row<BOARD_ROWS;row++){
     ef0:	e2877001 	add	r7, r7, #1
     ef4:	e28aa014 	add	r10, r10, #20
     ef8:	e2888024 	add	r8, r8, #36	; 0x24
     efc:	e3570005 	cmp	r7, #5
     f00:	0a000005 	beq	f1c <draw_board+0x90>
		int col=0;
		for(col;col<BOARD_COLS;col++){
			if(board[row][col]==PLATFORM){
     f04:	e1a0600a 	mov	r6, r10
				fill_rectangle((col-col_center)*PLATFORM_W + center - PLATFORM_W/2,
     f08:	e1a0b008 	mov	r11, r8
	int board_y = (SCREEN_H - (PLATFORM_H+P_V_INTERVAL)*(BOARD_ROWS-1))/2;
	fill_rectangle((x-col_center)*PLATFORM_W + center - ROLE_W/2 + x_offset,
					(PLATFORM_H+P_V_INTERVAL)+board_y-ROLE_H,
					ROLE_W,ROLE_H,0);
}
void draw_board(int center, int y_offset,int board[][BOARD_ROWS]){
     f0c:	e59d300c 	ldr	r3, [sp, #12]
     f10:	e243503c 	sub	r5, r3, #60	; 0x3c
     f14:	e1a04009 	mov	r4, r9
     f18:	eaffffe3 	b	eac <draw_board+0x20>
								PLATFORM_W,PLATFORM_H,
								rgb24to16(0,255,0));
			}
		}
	}
     f1c:	e28dd014 	add	sp, sp, #20
     f20:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000f24 <scene_draw>:

extern int game_mode;
void draw_board(int center, int y_offset,int board[][BOARD_ROWS]);
void draw_role(int center, int x, int x_offset);
void draw_score();
void scene_draw(){
     f24:	e92d4030 	push	{r4, r5, lr}
     f28:	e24dd00c 	sub	sp, sp, #12
	if(game_mode == SINGLE){
     f2c:	e3043398 	movw	r3, #17304	; 0x4398
     f30:	e3403000 	movt	r3, #0
     f34:	e5933000 	ldr	r3, [r3]
     f38:	e3530001 	cmp	r3, #1
     f3c:	0a00002e 	beq	ffc <scene_draw+0xd8>
	}
	else if(game_mode == DUEL){
     f40:	e3530002 	cmp	r3, #2
     f44:	1a00002c 	bne	ffc <scene_draw+0xd8>
		draw_line(SCREEN_W/2,0,SCREEN_W/2,SCREEN_H,0);
     f48:	e3a04000 	mov	r4, #0
     f4c:	e58d4000 	str	r4, [sp]
     f50:	e3a000a0 	mov	r0, #160	; 0xa0
     f54:	e1a01004 	mov	r1, r4
     f58:	e1a02000 	mov	r2, r0
     f5c:	e3a030f0 	mov	r3, #240	; 0xf0
     f60:	ebfffd24 	bl	3f8 <draw_line>
		int p1_center = SCREEN_W/4;
		int p2_center = SCREEN_W*3/4;
		
		draw_board(p1_center,p1b_offset,p1_board);
     f64:	e3045cfc 	movw	r5, #19708	; 0x4cfc
     f68:	e3405000 	movt	r5, #0
     f6c:	e3a00050 	mov	r0, #80	; 0x50
     f70:	e5951000 	ldr	r1, [r5]
     f74:	e3042c94 	movw	r2, #19604	; 0x4c94
     f78:	e3402000 	movt	r2, #0
     f7c:	ebffffc2 	bl	e8c <draw_board>
		draw_board(p2_center,0,p2_board);
     f80:	e3a000f0 	mov	r0, #240	; 0xf0
     f84:	e1a01004 	mov	r1, r4
     f88:	e3042c30 	movw	r2, #19504	; 0x4c30
     f8c:	e3402000 	movt	r2, #0
     f90:	ebffffbd 	bl	e8c <draw_board>
		
		draw_sequence(p1_center,SCORE_Y,p1_score,false);
     f94:	e3043c2c 	movw	r3, #19500	; 0x4c2c
     f98:	e3403000 	movt	r3, #0
     f9c:	e3a00050 	mov	r0, #80	; 0x50
     fa0:	e3a0100a 	mov	r1, #10
     fa4:	e5932000 	ldr	r2, [r3]
     fa8:	e1a03004 	mov	r3, r4
     fac:	ebfffdc5 	bl	6c8 <draw_sequence>
		draw_sequence(p2_center,SCORE_Y,p2_score,true);
     fb0:	e3043c28 	movw	r3, #19496	; 0x4c28
     fb4:	e3403000 	movt	r3, #0
     fb8:	e3a000f0 	mov	r0, #240	; 0xf0
     fbc:	e3a0100a 	mov	r1, #10
     fc0:	e5932000 	ldr	r2, [r3]
     fc4:	e3a03001 	mov	r3, #1
     fc8:	ebfffdbe 	bl	6c8 <draw_sequence>
		
		draw_role(p1_center,p1_x,p1_offset);
     fcc:	e3043394 	movw	r3, #17300	; 0x4394
     fd0:	e3403000 	movt	r3, #0
     fd4:	e3a00050 	mov	r0, #80	; 0x50
     fd8:	e5931000 	ldr	r1, [r3]
     fdc:	e5952004 	ldr	r2, [r5, #4]
     fe0:	ebffff9a 	bl	e50 <draw_role>
		draw_role(p2_center,p2_x,0);
     fe4:	e3043390 	movw	r3, #17296	; 0x4390
     fe8:	e3403000 	movt	r3, #0
     fec:	e3a000f0 	mov	r0, #240	; 0xf0
     ff0:	e5931000 	ldr	r1, [r3]
     ff4:	e1a02004 	mov	r2, r4
     ff8:	ebffff94 	bl	e50 <draw_role>
	}
	draw_number(0,0,p1_path_end,true);
     ffc:	e3043c1c 	movw	r3, #19484	; 0x4c1c
    1000:	e3403000 	movt	r3, #0
    1004:	e3a00000 	mov	r0, #0
    1008:	e1a01000 	mov	r1, r0
    100c:	e5932000 	ldr	r2, [r3]
    1010:	e3a03001 	mov	r3, #1
    1014:	ebfffd7d 	bl	610 <draw_number>
}
    1018:	e28dd00c 	add	sp, sp, #12
    101c:	e8bd8030 	pop	{r4, r5, pc}

00001020 <animate>:

extern int p1_offset;
extern int p1b_offset;

void animate(){
	if(p1_offset>0){
    1020:	e3043d00 	movw	r3, #19712	; 0x4d00
    1024:	e3403000 	movt	r3, #0
    1028:	e5933000 	ldr	r3, [r3]
    102c:	e3530000 	cmp	r3, #0
    1030:	da000004 	ble	1048 <animate+0x28>
		p1_offset-=ROLE_MOVE_SPEED;
    1034:	e3042d00 	movw	r2, #19712	; 0x4d00
    1038:	e3402000 	movt	r2, #0
    103c:	e2433006 	sub	r3, r3, #6
    1040:	e5823000 	str	r3, [r2]
    1044:	ea000004 	b	105c <animate+0x3c>
	}else if(p1_offset<0){
    1048:	e3530000 	cmp	r3, #0
		p1_offset+=ROLE_MOVE_SPEED;
    104c:	b3042d00 	movwlt	r2, #19712	; 0x4d00
    1050:	b3402000 	movtlt	r2, #0
    1054:	b2833006 	addlt	r3, r3, #6
    1058:	b5823000 	strlt	r3, [r2]
	}
	
	if(p1b_offset>0){
    105c:	e3043cfc 	movw	r3, #19708	; 0x4cfc
    1060:	e3403000 	movt	r3, #0
    1064:	e5933000 	ldr	r3, [r3]
    1068:	e3530000 	cmp	r3, #0
    106c:	da000004 	ble	1084 <animate+0x64>
		p1b_offset-=BOARD_MOVE_SPEED;
    1070:	e3042cfc 	movw	r2, #19708	; 0x4cfc
    1074:	e3402000 	movt	r2, #0
    1078:	e2433006 	sub	r3, r3, #6
    107c:	e5823000 	str	r3, [r2]
    1080:	e12fff1e 	bx	lr
	}else if(p1b_offset<0){
    1084:	e3530000 	cmp	r3, #0
		p1b_offset+=BOARD_MOVE_SPEED;
    1088:	b3042cfc 	movwlt	r2, #19708	; 0x4cfc
    108c:	b3402000 	movtlt	r2, #0
    1090:	b2833006 	addlt	r3, r3, #6
    1094:	b5823000 	strlt	r3, [r2]
    1098:	e12fff1e 	bx	lr

0000109c <p1_move>:
	}
}
void p1_move(int dir){
	p1_offset = dir*PLATFORM_W;
    109c:	e3043d00 	movw	r3, #19712	; 0x4d00
    10a0:	e3403000 	movt	r3, #0
    10a4:	e0800080 	add	r0, r0, r0, lsl #1
    10a8:	e1a00180 	lsl	r0, r0, #3
    10ac:	e5830000 	str	r0, [r3]
    10b0:	e12fff1e 	bx	lr

000010b4 <p1b_move>:
}
void p1b_move(int dir){
	p1b_offset = dir*(PLATFORM_H+P_V_INTERVAL);
    10b4:	e3043cfc 	movw	r3, #19708	; 0x4cfc
    10b8:	e3403000 	movt	r3, #0
    10bc:	e0800180 	add	r0, r0, r0, lsl #3
    10c0:	e1a00100 	lsl	r0, r0, #2
    10c4:	e5830000 	str	r0, [r3]
    10c8:	e12fff1e 	bx	lr

000010cc <atexit>:
    10cc:	e1a01000 	mov	r1, r0
    10d0:	e3a00000 	mov	r0, #0
    10d4:	e92d4008 	push	{r3, lr}
    10d8:	e1a02000 	mov	r2, r0
    10dc:	e1a03000 	mov	r3, r0
    10e0:	eb00003f 	bl	11e4 <__register_exitproc>
    10e4:	e8bd4008 	pop	{r3, lr}
    10e8:	e12fff1e 	bx	lr

000010ec <exit>:
    10ec:	e92d4008 	push	{r3, lr}
    10f0:	e3a01000 	mov	r1, #0
    10f4:	e1a04000 	mov	r4, r0
    10f8:	eb000076 	bl	12d8 <__call_exitprocs>
    10fc:	e59f3018 	ldr	r3, [pc, #24]	; 111c <exit+0x30>
    1100:	e5930000 	ldr	r0, [r3]
    1104:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1108:	e3530000 	cmp	r3, #0
    110c:	11a0e00f 	movne	lr, pc
    1110:	112fff13 	bxne	r3
    1114:	e1a00004 	mov	r0, r4
    1118:	eb000424 	bl	21b0 <_exit>
    111c:	00004324 	.word	0x00004324

00001120 <srand>:
    1120:	e59f3010 	ldr	r3, [pc, #16]	; 1138 <srand+0x18>
    1124:	e5933000 	ldr	r3, [r3]
    1128:	e3a02000 	mov	r2, #0
    112c:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    1130:	e58320ac 	str	r2, [r3, #172]	; 0xac
    1134:	e12fff1e 	bx	lr
    1138:	000043a0 	.word	0x000043a0

0000113c <rand>:
    113c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    1140:	e59f3044 	ldr	r3, [pc, #68]	; 118c <rand+0x50>
    1144:	e593c000 	ldr	r12, [r3]
    1148:	e59f4040 	ldr	r4, [pc, #64]	; 1190 <rand+0x54>
    114c:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    1150:	e0040492 	mul	r4, r2, r4
    1154:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    1158:	e59f3034 	ldr	r3, [pc, #52]	; 1194 <rand+0x58>
    115c:	e0244193 	mla	r4, r3, r1, r4
    1160:	e0810392 	umull	r0, r1, r2, r3
    1164:	e3a02001 	mov	r2, #1
    1168:	e0922000 	adds	r2, r2, r0
    116c:	e0841001 	add	r1, r4, r1
    1170:	e3a03000 	mov	r3, #0
    1174:	e0a33001 	adc	r3, r3, r1
    1178:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    117c:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    1180:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    1184:	e8bd0010 	ldmfd	sp!, {r4}
    1188:	e12fff1e 	bx	lr
    118c:	000043a0 	.word	0x000043a0
    1190:	5851f42d 	.word	0x5851f42d
    1194:	4c957f2d 	.word	0x4c957f2d

00001198 <time>:
    1198:	e92d4010 	push	{r4, lr}
    119c:	e59f303c 	ldr	r3, [pc, #60]	; 11e0 <time+0x48>
    11a0:	e24dd008 	sub	sp, sp, #8
    11a4:	e1a04000 	mov	r4, r0
    11a8:	e1a0100d 	mov	r1, sp
    11ac:	e5930000 	ldr	r0, [r3]
    11b0:	e3a02000 	mov	r2, #0
    11b4:	eb0000c0 	bl	14bc <_gettimeofday_r>
    11b8:	e3500000 	cmp	r0, #0
    11bc:	ba000005 	blt	11d8 <time+0x40>
    11c0:	e59d0000 	ldr	r0, [sp]
    11c4:	e3540000 	cmp	r4, #0
    11c8:	15840000 	strne	r0, [r4]
    11cc:	e28dd008 	add	sp, sp, #8
    11d0:	e8bd4010 	pop	{r4, lr}
    11d4:	e12fff1e 	bx	lr
    11d8:	e3e00000 	mvn	r0, #0
    11dc:	eafffffa 	b	11cc <time+0x34>
    11e0:	000043a0 	.word	0x000043a0

000011e4 <__register_exitproc>:
    11e4:	e59fc0e4 	ldr	r12, [pc, #228]	; 12d0 <__register_exitproc+0xec>
    11e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    11ec:	e59c4000 	ldr	r4, [r12]
    11f0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    11f4:	e35c0000 	cmp	r12, #0
    11f8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    11fc:	e59c5004 	ldr	r5, [r12, #4]
    1200:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1204:	e355001f 	cmp	r5, #31
    1208:	e24dd010 	sub	sp, sp, #16
    120c:	e1a06000 	mov	r6, r0
    1210:	da000015 	ble	126c <__register_exitproc+0x88>
    1214:	e59f00b8 	ldr	r0, [pc, #184]	; 12d4 <__register_exitproc+0xf0>
    1218:	e3500000 	cmp	r0, #0
    121c:	1a000001 	bne	1228 <__register_exitproc+0x44>
    1220:	e3e00000 	mvn	r0, #0
    1224:	ea000018 	b	128c <__register_exitproc+0xa8>
    1228:	e3a00e19 	mov	r0, #400	; 0x190
    122c:	e58d100c 	str	r1, [sp, #12]
    1230:	e58d2008 	str	r2, [sp, #8]
    1234:	e58d3004 	str	r3, [sp, #4]
    1238:	e320f000 	nop	{0}
    123c:	e250c000 	subs	r12, r0, #0
    1240:	e59d100c 	ldr	r1, [sp, #12]
    1244:	e59d2008 	ldr	r2, [sp, #8]
    1248:	e59d3004 	ldr	r3, [sp, #4]
    124c:	0afffff3 	beq	1220 <__register_exitproc+0x3c>
    1250:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1254:	e3a00000 	mov	r0, #0
    1258:	e58c0004 	str	r0, [r12, #4]
    125c:	e58c5000 	str	r5, [r12]
    1260:	e584c148 	str	r12, [r4, #328]	; 0x148
    1264:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1268:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    126c:	e3560000 	cmp	r6, #0
    1270:	e59c4004 	ldr	r4, [r12, #4]
    1274:	1a000007 	bne	1298 <__register_exitproc+0xb4>
    1278:	e2843002 	add	r3, r4, #2
    127c:	e2844001 	add	r4, r4, #1
    1280:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1284:	e58c4004 	str	r4, [r12, #4]
    1288:	e3a00000 	mov	r0, #0
    128c:	e28dd010 	add	sp, sp, #16
    1290:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1294:	e12fff1e 	bx	lr
    1298:	e3a00001 	mov	r0, #1
    129c:	e1a00410 	lsl	r0, r0, r4
    12a0:	e08c8104 	add	r8, r12, r4, lsl #2
    12a4:	e3560002 	cmp	r6, #2
    12a8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    12ac:	e5883108 	str	r3, [r8, #264]	; 0x108
    12b0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    12b4:	e1877000 	orr	r7, r7, r0
    12b8:	01830000 	orreq	r0, r3, r0
    12bc:	e1a05008 	mov	r5, r8
    12c0:	e5882088 	str	r2, [r8, #136]	; 0x88
    12c4:	e58c7188 	str	r7, [r12, #392]	; 0x188
    12c8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    12cc:	eaffffe9 	b	1278 <__register_exitproc+0x94>
    12d0:	00004324 	.word	0x00004324
    12d4:	00000000 	.word	0x00000000

000012d8 <__call_exitprocs>:
    12d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    12dc:	e59f3168 	ldr	r3, [pc, #360]	; 144c <__call_exitprocs+0x174>
    12e0:	e5933000 	ldr	r3, [r3]
    12e4:	e24dd014 	sub	sp, sp, #20
    12e8:	e58d3004 	str	r3, [sp, #4]
    12ec:	e2833f52 	add	r3, r3, #328	; 0x148
    12f0:	e58d0008 	str	r0, [sp, #8]
    12f4:	e58d300c 	str	r3, [sp, #12]
    12f8:	e1a07001 	mov	r7, r1
    12fc:	e3a08001 	mov	r8, #1
    1300:	e59d3004 	ldr	r3, [sp, #4]
    1304:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1308:	e3560000 	cmp	r6, #0
    130c:	e59db00c 	ldr	r11, [sp, #12]
    1310:	0a000033 	beq	13e4 <__call_exitprocs+0x10c>
    1314:	e5965004 	ldr	r5, [r6, #4]
    1318:	e2554001 	subs	r4, r5, #1
    131c:	5286a088 	addpl	r10, r6, #136	; 0x88
    1320:	5285501f 	addpl	r5, r5, #31
    1324:	508a5105 	addpl	r5, r10, r5, lsl #2
    1328:	5a000007 	bpl	134c <__call_exitprocs+0x74>
    132c:	ea000029 	b	13d8 <__call_exitprocs+0x100>
    1330:	e5953000 	ldr	r3, [r5]
    1334:	e1530007 	cmp	r3, r7
    1338:	0a000005 	beq	1354 <__call_exitprocs+0x7c>
    133c:	e2444001 	sub	r4, r4, #1
    1340:	e3740001 	cmn	r4, #1
    1344:	e2455004 	sub	r5, r5, #4
    1348:	0a000022 	beq	13d8 <__call_exitprocs+0x100>
    134c:	e3570000 	cmp	r7, #0
    1350:	1afffff6 	bne	1330 <__call_exitprocs+0x58>
    1354:	e5963004 	ldr	r3, [r6, #4]
    1358:	e06a2005 	rsb	r2, r10, r5
    135c:	e2433001 	sub	r3, r3, #1
    1360:	e0862002 	add	r2, r6, r2
    1364:	e1530004 	cmp	r3, r4
    1368:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    136c:	13a01000 	movne	r1, #0
    1370:	05864004 	streq	r4, [r6, #4]
    1374:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1378:	e3530000 	cmp	r3, #0
    137c:	0affffee 	beq	133c <__call_exitprocs+0x64>
    1380:	e1a02418 	lsl	r2, r8, r4
    1384:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1388:	e1120001 	tst	r2, r1
    138c:	e5969004 	ldr	r9, [r6, #4]
    1390:	0a000016 	beq	13f0 <__call_exitprocs+0x118>
    1394:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1398:	e1120001 	tst	r2, r1
    139c:	1a000016 	bne	13fc <__call_exitprocs+0x124>
    13a0:	e59d0008 	ldr	r0, [sp, #8]
    13a4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    13a8:	e1a0e00f 	mov	lr, pc
    13ac:	e12fff13 	bx	r3
    13b0:	e5963004 	ldr	r3, [r6, #4]
    13b4:	e1530009 	cmp	r3, r9
    13b8:	1affffd0 	bne	1300 <__call_exitprocs+0x28>
    13bc:	e59b3000 	ldr	r3, [r11]
    13c0:	e1530006 	cmp	r3, r6
    13c4:	1affffcd 	bne	1300 <__call_exitprocs+0x28>
    13c8:	e2444001 	sub	r4, r4, #1
    13cc:	e3740001 	cmn	r4, #1
    13d0:	e2455004 	sub	r5, r5, #4
    13d4:	1affffdc 	bne	134c <__call_exitprocs+0x74>
    13d8:	e59f1070 	ldr	r1, [pc, #112]	; 1450 <__call_exitprocs+0x178>
    13dc:	e3510000 	cmp	r1, #0
    13e0:	1a000009 	bne	140c <__call_exitprocs+0x134>
    13e4:	e28dd014 	add	sp, sp, #20
    13e8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    13ec:	e12fff1e 	bx	lr
    13f0:	e1a0e00f 	mov	lr, pc
    13f4:	e12fff13 	bx	r3
    13f8:	eaffffec 	b	13b0 <__call_exitprocs+0xd8>
    13fc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1400:	e1a0e00f 	mov	lr, pc
    1404:	e12fff13 	bx	r3
    1408:	eaffffe8 	b	13b0 <__call_exitprocs+0xd8>
    140c:	e5963004 	ldr	r3, [r6, #4]
    1410:	e3530000 	cmp	r3, #0
    1414:	e5963000 	ldr	r3, [r6]
    1418:	1a000008 	bne	1440 <__call_exitprocs+0x168>
    141c:	e3530000 	cmp	r3, #0
    1420:	0a000006 	beq	1440 <__call_exitprocs+0x168>
    1424:	e1a00006 	mov	r0, r6
    1428:	e58b3000 	str	r3, [r11]
    142c:	e320f000 	nop	{0}
    1430:	e59b6000 	ldr	r6, [r11]
    1434:	e3560000 	cmp	r6, #0
    1438:	1affffb5 	bne	1314 <__call_exitprocs+0x3c>
    143c:	eaffffe8 	b	13e4 <__call_exitprocs+0x10c>
    1440:	e1a0b006 	mov	r11, r6
    1444:	e1a06003 	mov	r6, r3
    1448:	eafffff9 	b	1434 <__call_exitprocs+0x15c>
    144c:	00004324 	.word	0x00004324
    1450:	00000000 	.word	0x00000000

00001454 <register_fini>:
    1454:	e92d4008 	push	{r3, lr}
    1458:	e59f3010 	ldr	r3, [pc, #16]	; 1470 <register_fini+0x1c>
    145c:	e3530000 	cmp	r3, #0
    1460:	159f000c 	ldrne	r0, [pc, #12]	; 1474 <register_fini+0x20>
    1464:	1bffff18 	blne	10cc <atexit>
    1468:	e8bd4008 	pop	{r3, lr}
    146c:	e12fff1e 	bx	lr
    1470:	0000434c 	.word	0x0000434c
    1474:	00001478 	.word	0x00001478

00001478 <__libc_fini_array>:
    1478:	e92d4038 	push	{r3, r4, r5, lr}
    147c:	e59f5030 	ldr	r5, [pc, #48]	; 14b4 <__libc_fini_array+0x3c>
    1480:	e59f4030 	ldr	r4, [pc, #48]	; 14b8 <__libc_fini_array+0x40>
    1484:	e0654004 	rsb	r4, r5, r4
    1488:	e1b04144 	asrs	r4, r4, #2
    148c:	10855104 	addne	r5, r5, r4, lsl #2
    1490:	0a000004 	beq	14a8 <__libc_fini_array+0x30>
    1494:	e5353004 	ldr	r3, [r5, #-4]!
    1498:	e1a0e00f 	mov	lr, pc
    149c:	e12fff13 	bx	r3
    14a0:	e2544001 	subs	r4, r4, #1
    14a4:	1afffffa 	bne	1494 <__libc_fini_array+0x1c>
    14a8:	eb000ba7 	bl	434c <__libc_fini>
    14ac:	e8bd4038 	pop	{r3, r4, r5, lr}
    14b0:	e12fff1e 	bx	lr
    14b4:	00004364 	.word	0x00004364
    14b8:	00004368 	.word	0x00004368

000014bc <_gettimeofday_r>:
    14bc:	e92d4038 	push	{r3, r4, r5, lr}
    14c0:	e59f4030 	ldr	r4, [pc, #48]	; 14f8 <_gettimeofday_r+0x3c>
    14c4:	e3a03000 	mov	r3, #0
    14c8:	e1a05000 	mov	r5, r0
    14cc:	e1a00001 	mov	r0, r1
    14d0:	e1a01002 	mov	r1, r2
    14d4:	e5843000 	str	r3, [r4]
    14d8:	eb00033a 	bl	21c8 <_gettimeofday>
    14dc:	e3700001 	cmn	r0, #1
    14e0:	1a000002 	bne	14f0 <_gettimeofday_r+0x34>
    14e4:	e5943000 	ldr	r3, [r4]
    14e8:	e3530000 	cmp	r3, #0
    14ec:	15853000 	strne	r3, [r5]
    14f0:	e8bd4038 	pop	{r3, r4, r5, lr}
    14f4:	e12fff1e 	bx	lr
    14f8:	00004d04 	.word	0x00004d04

000014fc <cleanup_glue>:
    14fc:	e92d4038 	push	{r3, r4, r5, lr}
    1500:	e1a04001 	mov	r4, r1
    1504:	e5911000 	ldr	r1, [r1]
    1508:	e3510000 	cmp	r1, #0
    150c:	e1a05000 	mov	r5, r0
    1510:	1bfffff9 	blne	14fc <cleanup_glue>
    1514:	e1a00005 	mov	r0, r5
    1518:	e1a01004 	mov	r1, r4
    151c:	eb00009c 	bl	1794 <_free_r>
    1520:	e8bd4038 	pop	{r3, r4, r5, lr}
    1524:	e12fff1e 	bx	lr

00001528 <_reclaim_reent>:
    1528:	e59f30f0 	ldr	r3, [pc, #240]	; 1620 <_reclaim_reent+0xf8>
    152c:	e5933000 	ldr	r3, [r3]
    1530:	e1500003 	cmp	r0, r3
    1534:	e92d4070 	push	{r4, r5, r6, lr}
    1538:	e1a05000 	mov	r5, r0
    153c:	0a00002b 	beq	15f0 <_reclaim_reent+0xc8>
    1540:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    1544:	e3520000 	cmp	r2, #0
    1548:	0a000011 	beq	1594 <_reclaim_reent+0x6c>
    154c:	e3a03000 	mov	r3, #0
    1550:	e1a06003 	mov	r6, r3
    1554:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    1558:	e3510000 	cmp	r1, #0
    155c:	0a000005 	beq	1578 <_reclaim_reent+0x50>
    1560:	e5914000 	ldr	r4, [r1]
    1564:	e1a00005 	mov	r0, r5
    1568:	eb000089 	bl	1794 <_free_r>
    156c:	e2541000 	subs	r1, r4, #0
    1570:	1afffffa 	bne	1560 <_reclaim_reent+0x38>
    1574:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    1578:	e2866001 	add	r6, r6, #1
    157c:	e3560020 	cmp	r6, #32
    1580:	e1a03006 	mov	r3, r6
    1584:	1afffff2 	bne	1554 <_reclaim_reent+0x2c>
    1588:	e1a00005 	mov	r0, r5
    158c:	e1a01002 	mov	r1, r2
    1590:	eb00007f 	bl	1794 <_free_r>
    1594:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    1598:	e3510000 	cmp	r1, #0
    159c:	11a00005 	movne	r0, r5
    15a0:	1b00007b 	blne	1794 <_free_r>
    15a4:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    15a8:	e3510000 	cmp	r1, #0
    15ac:	0a000008 	beq	15d4 <_reclaim_reent+0xac>
    15b0:	e2856f53 	add	r6, r5, #332	; 0x14c
    15b4:	e1510006 	cmp	r1, r6
    15b8:	0a000005 	beq	15d4 <_reclaim_reent+0xac>
    15bc:	e5914000 	ldr	r4, [r1]
    15c0:	e1a00005 	mov	r0, r5
    15c4:	eb000072 	bl	1794 <_free_r>
    15c8:	e1560004 	cmp	r6, r4
    15cc:	e1a01004 	mov	r1, r4
    15d0:	1afffff9 	bne	15bc <_reclaim_reent+0x94>
    15d4:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    15d8:	e3510000 	cmp	r1, #0
    15dc:	11a00005 	movne	r0, r5
    15e0:	1b00006b 	blne	1794 <_free_r>
    15e4:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    15e8:	e3530000 	cmp	r3, #0
    15ec:	1a000001 	bne	15f8 <_reclaim_reent+0xd0>
    15f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    15f4:	e12fff1e 	bx	lr
    15f8:	e1a00005 	mov	r0, r5
    15fc:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    1600:	e1a0e00f 	mov	lr, pc
    1604:	e12fff1c 	bx	r12
    1608:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    160c:	e3510000 	cmp	r1, #0
    1610:	0afffff6 	beq	15f0 <_reclaim_reent+0xc8>
    1614:	e1a00005 	mov	r0, r5
    1618:	e8bd4070 	pop	{r4, r5, r6, lr}
    161c:	eaffffb6 	b	14fc <cleanup_glue>
    1620:	000043a0 	.word	0x000043a0

00001624 <_wrapup_reent>:
    1624:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    1628:	e2507000 	subs	r7, r0, #0
    162c:	059f3060 	ldreq	r3, [pc, #96]	; 1694 <_wrapup_reent+0x70>
    1630:	05937000 	ldreq	r7, [r3]
    1634:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    1638:	e3560000 	cmp	r6, #0
    163c:	0a00000d 	beq	1678 <_wrapup_reent+0x54>
    1640:	e5965004 	ldr	r5, [r6, #4]
    1644:	e2554001 	subs	r4, r5, #1
    1648:	52855002 	addpl	r5, r5, #2
    164c:	50865105 	addpl	r5, r6, r5, lsl #2
    1650:	4a000005 	bmi	166c <_wrapup_reent+0x48>
    1654:	e5353004 	ldr	r3, [r5, #-4]!
    1658:	e2444001 	sub	r4, r4, #1
    165c:	e1a0e00f 	mov	lr, pc
    1660:	e12fff13 	bx	r3
    1664:	e3740001 	cmn	r4, #1
    1668:	1afffff9 	bne	1654 <_wrapup_reent+0x30>
    166c:	e5966000 	ldr	r6, [r6]
    1670:	e3560000 	cmp	r6, #0
    1674:	1afffff1 	bne	1640 <_wrapup_reent+0x1c>
    1678:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    167c:	e3530000 	cmp	r3, #0
    1680:	11a00007 	movne	r0, r7
    1684:	11a0e00f 	movne	lr, pc
    1688:	112fff13 	bxne	r3
    168c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    1690:	e12fff1e 	bx	lr
    1694:	000043a0 	.word	0x000043a0

00001698 <_malloc_trim_r>:
    1698:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    169c:	e59f50e4 	ldr	r5, [pc, #228]	; 1788 <_malloc_trim_r+0xf0>
    16a0:	e1a07001 	mov	r7, r1
    16a4:	e1a04000 	mov	r4, r0
    16a8:	eb00029b 	bl	211c <__malloc_lock>
    16ac:	e5953008 	ldr	r3, [r5, #8]
    16b0:	e5936004 	ldr	r6, [r3, #4]
    16b4:	e3c66003 	bic	r6, r6, #3
    16b8:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    16bc:	e283300f 	add	r3, r3, #15
    16c0:	e0677003 	rsb	r7, r7, r3
    16c4:	e1a07627 	lsr	r7, r7, #12
    16c8:	e2477001 	sub	r7, r7, #1
    16cc:	e1a07607 	lsl	r7, r7, #12
    16d0:	e3570a01 	cmp	r7, #4096	; 0x1000
    16d4:	ba000006 	blt	16f4 <_malloc_trim_r+0x5c>
    16d8:	e1a00004 	mov	r0, r4
    16dc:	e3a01000 	mov	r1, #0
    16e0:	eb00028f 	bl	2124 <_sbrk_r>
    16e4:	e5953008 	ldr	r3, [r5, #8]
    16e8:	e0833006 	add	r3, r3, r6
    16ec:	e1500003 	cmp	r0, r3
    16f0:	0a000004 	beq	1708 <_malloc_trim_r+0x70>
    16f4:	e1a00004 	mov	r0, r4
    16f8:	eb000288 	bl	2120 <__malloc_unlock>
    16fc:	e3a00000 	mov	r0, #0
    1700:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    1704:	e12fff1e 	bx	lr
    1708:	e1a00004 	mov	r0, r4
    170c:	e2671000 	rsb	r1, r7, #0
    1710:	eb000283 	bl	2124 <_sbrk_r>
    1714:	e3700001 	cmn	r0, #1
    1718:	0a00000b 	beq	174c <_malloc_trim_r+0xb4>
    171c:	e59f3068 	ldr	r3, [pc, #104]	; 178c <_malloc_trim_r+0xf4>
    1720:	e5952008 	ldr	r2, [r5, #8]
    1724:	e5931000 	ldr	r1, [r3]
    1728:	e0676006 	rsb	r6, r7, r6
    172c:	e3866001 	orr	r6, r6, #1
    1730:	e0677001 	rsb	r7, r7, r1
    1734:	e1a00004 	mov	r0, r4
    1738:	e5826004 	str	r6, [r2, #4]
    173c:	e5837000 	str	r7, [r3]
    1740:	eb000276 	bl	2120 <__malloc_unlock>
    1744:	e3a00001 	mov	r0, #1
    1748:	eaffffec 	b	1700 <_malloc_trim_r+0x68>
    174c:	e1a00004 	mov	r0, r4
    1750:	e3a01000 	mov	r1, #0
    1754:	eb000272 	bl	2124 <_sbrk_r>
    1758:	e5953008 	ldr	r3, [r5, #8]
    175c:	e0632000 	rsb	r2, r3, r0
    1760:	e352000f 	cmp	r2, #15
    1764:	daffffe2 	ble	16f4 <_malloc_trim_r+0x5c>
    1768:	e59f1020 	ldr	r1, [pc, #32]	; 1790 <_malloc_trim_r+0xf8>
    176c:	e5911000 	ldr	r1, [r1]
    1770:	e0610000 	rsb	r0, r1, r0
    1774:	e59f1010 	ldr	r1, [pc, #16]	; 178c <_malloc_trim_r+0xf4>
    1778:	e3822001 	orr	r2, r2, #1
    177c:	e5810000 	str	r0, [r1]
    1780:	e5832004 	str	r2, [r3, #4]
    1784:	eaffffda 	b	16f4 <_malloc_trim_r+0x5c>
    1788:	000047d0 	.word	0x000047d0
    178c:	00004d0c 	.word	0x00004d0c
    1790:	00004bd8 	.word	0x00004bd8

00001794 <_free_r>:
    1794:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    1798:	e2514000 	subs	r4, r1, #0
    179c:	e1a06000 	mov	r6, r0
    17a0:	0a000046 	beq	18c0 <_free_r+0x12c>
    17a4:	eb00025c 	bl	211c <__malloc_lock>
    17a8:	e514e004 	ldr	lr, [r4, #-4]
    17ac:	e59f1238 	ldr	r1, [pc, #568]	; 19ec <_free_r+0x258>
    17b0:	e244c008 	sub	r12, r4, #8
    17b4:	e3ce3001 	bic	r3, lr, #1
    17b8:	e08c2003 	add	r2, r12, r3
    17bc:	e5910008 	ldr	r0, [r1, #8]
    17c0:	e5925004 	ldr	r5, [r2, #4]
    17c4:	e1500002 	cmp	r0, r2
    17c8:	e3c55003 	bic	r5, r5, #3
    17cc:	0a00004a 	beq	18fc <_free_r+0x168>
    17d0:	e21ee001 	ands	lr, lr, #1
    17d4:	e5825004 	str	r5, [r2, #4]
    17d8:	13a0e000 	movne	lr, #0
    17dc:	1a000009 	bne	1808 <_free_r+0x74>
    17e0:	e5144008 	ldr	r4, [r4, #-8]
    17e4:	e064c00c 	rsb	r12, r4, r12
    17e8:	e59c0008 	ldr	r0, [r12, #8]
    17ec:	e2817008 	add	r7, r1, #8
    17f0:	e1500007 	cmp	r0, r7
    17f4:	e0833004 	add	r3, r3, r4
    17f8:	159c400c 	ldrne	r4, [r12, #12]
    17fc:	1580400c 	strne	r4, [r0, #12]
    1800:	15840008 	strne	r0, [r4, #8]
    1804:	03a0e001 	moveq	lr, #1
    1808:	e0820005 	add	r0, r2, r5
    180c:	e5900004 	ldr	r0, [r0, #4]
    1810:	e3100001 	tst	r0, #1
    1814:	1a000009 	bne	1840 <_free_r+0xac>
    1818:	e35e0000 	cmp	lr, #0
    181c:	e5920008 	ldr	r0, [r2, #8]
    1820:	e0833005 	add	r3, r3, r5
    1824:	1a000002 	bne	1834 <_free_r+0xa0>
    1828:	e59f41c0 	ldr	r4, [pc, #448]	; 19f0 <_free_r+0x25c>
    182c:	e1500004 	cmp	r0, r4
    1830:	0a000047 	beq	1954 <_free_r+0x1c0>
    1834:	e592200c 	ldr	r2, [r2, #12]
    1838:	e580200c 	str	r2, [r0, #12]
    183c:	e5820008 	str	r0, [r2, #8]
    1840:	e3832001 	orr	r2, r3, #1
    1844:	e35e0000 	cmp	lr, #0
    1848:	e58c2004 	str	r2, [r12, #4]
    184c:	e78c3003 	str	r3, [r12, r3]
    1850:	1a000018 	bne	18b8 <_free_r+0x124>
    1854:	e3530c02 	cmp	r3, #512	; 0x200
    1858:	3a00001a 	bcc	18c8 <_free_r+0x134>
    185c:	e1a024a3 	lsr	r2, r3, #9
    1860:	e3520004 	cmp	r2, #4
    1864:	8a000042 	bhi	1974 <_free_r+0x1e0>
    1868:	e1a0e323 	lsr	lr, r3, #6
    186c:	e28ee038 	add	lr, lr, #56	; 0x38
    1870:	e1a0008e 	lsl	r0, lr, #1
    1874:	e0810100 	add	r0, r1, r0, lsl #2
    1878:	e5902008 	ldr	r2, [r0, #8]
    187c:	e1520000 	cmp	r2, r0
    1880:	e59f1164 	ldr	r1, [pc, #356]	; 19ec <_free_r+0x258>
    1884:	0a000044 	beq	199c <_free_r+0x208>
    1888:	e5921004 	ldr	r1, [r2, #4]
    188c:	e3c11003 	bic	r1, r1, #3
    1890:	e1530001 	cmp	r3, r1
    1894:	2a000002 	bcs	18a4 <_free_r+0x110>
    1898:	e5922008 	ldr	r2, [r2, #8]
    189c:	e1500002 	cmp	r0, r2
    18a0:	1afffff8 	bne	1888 <_free_r+0xf4>
    18a4:	e592300c 	ldr	r3, [r2, #12]
    18a8:	e58c300c 	str	r3, [r12, #12]
    18ac:	e58c2008 	str	r2, [r12, #8]
    18b0:	e582c00c 	str	r12, [r2, #12]
    18b4:	e583c008 	str	r12, [r3, #8]
    18b8:	e1a00006 	mov	r0, r6
    18bc:	eb000217 	bl	2120 <__malloc_unlock>
    18c0:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    18c4:	e12fff1e 	bx	lr
    18c8:	e5912004 	ldr	r2, [r1, #4]
    18cc:	e1a031a3 	lsr	r3, r3, #3
    18d0:	e1a00143 	asr	r0, r3, #2
    18d4:	e3a0e001 	mov	lr, #1
    18d8:	e182001e 	orr	r0, r2, lr, lsl r0
    18dc:	e0813183 	add	r3, r1, r3, lsl #3
    18e0:	e5932008 	ldr	r2, [r3, #8]
    18e4:	e58c300c 	str	r3, [r12, #12]
    18e8:	e58c2008 	str	r2, [r12, #8]
    18ec:	e5810004 	str	r0, [r1, #4]
    18f0:	e583c008 	str	r12, [r3, #8]
    18f4:	e582c00c 	str	r12, [r2, #12]
    18f8:	eaffffee 	b	18b8 <_free_r+0x124>
    18fc:	e31e0001 	tst	lr, #1
    1900:	e0853003 	add	r3, r5, r3
    1904:	1a000006 	bne	1924 <_free_r+0x190>
    1908:	e5142008 	ldr	r2, [r4, #-8]
    190c:	e062c00c 	rsb	r12, r2, r12
    1910:	e59c000c 	ldr	r0, [r12, #12]
    1914:	e59ce008 	ldr	lr, [r12, #8]
    1918:	e58e000c 	str	r0, [lr, #12]
    191c:	e580e008 	str	lr, [r0, #8]
    1920:	e0833002 	add	r3, r3, r2
    1924:	e59f20c8 	ldr	r2, [pc, #200]	; 19f4 <_free_r+0x260>
    1928:	e5920000 	ldr	r0, [r2]
    192c:	e3832001 	orr	r2, r3, #1
    1930:	e1530000 	cmp	r3, r0
    1934:	e58c2004 	str	r2, [r12, #4]
    1938:	e581c008 	str	r12, [r1, #8]
    193c:	3affffdd 	bcc	18b8 <_free_r+0x124>
    1940:	e59f30b0 	ldr	r3, [pc, #176]	; 19f8 <_free_r+0x264>
    1944:	e1a00006 	mov	r0, r6
    1948:	e5931000 	ldr	r1, [r3]
    194c:	ebffff51 	bl	1698 <_malloc_trim_r>
    1950:	eaffffd8 	b	18b8 <_free_r+0x124>
    1954:	e3832001 	orr	r2, r3, #1
    1958:	e581c014 	str	r12, [r1, #20]
    195c:	e581c010 	str	r12, [r1, #16]
    1960:	e58c000c 	str	r0, [r12, #12]
    1964:	e58c0008 	str	r0, [r12, #8]
    1968:	e58c2004 	str	r2, [r12, #4]
    196c:	e78c3003 	str	r3, [r12, r3]
    1970:	eaffffd0 	b	18b8 <_free_r+0x124>
    1974:	e3520014 	cmp	r2, #20
    1978:	9282e05b 	addls	lr, r2, #91	; 0x5b
    197c:	91a0008e 	lslls	r0, lr, #1
    1980:	9affffbb 	bls	1874 <_free_r+0xe0>
    1984:	e3520054 	cmp	r2, #84	; 0x54
    1988:	8a00000a 	bhi	19b8 <_free_r+0x224>
    198c:	e1a0e623 	lsr	lr, r3, #12
    1990:	e28ee06e 	add	lr, lr, #110	; 0x6e
    1994:	e1a0008e 	lsl	r0, lr, #1
    1998:	eaffffb5 	b	1874 <_free_r+0xe0>
    199c:	e5913004 	ldr	r3, [r1, #4]
    19a0:	e1a0e14e 	asr	lr, lr, #2
    19a4:	e3a00001 	mov	r0, #1
    19a8:	e1830e10 	orr	r0, r3, r0, lsl lr
    19ac:	e1a03002 	mov	r3, r2
    19b0:	e5810004 	str	r0, [r1, #4]
    19b4:	eaffffbb 	b	18a8 <_free_r+0x114>
    19b8:	e3520f55 	cmp	r2, #340	; 0x154
    19bc:	91a0e7a3 	lsrls	lr, r3, #15
    19c0:	928ee077 	addls	lr, lr, #119	; 0x77
    19c4:	91a0008e 	lslls	r0, lr, #1
    19c8:	9affffa9 	bls	1874 <_free_r+0xe0>
    19cc:	e59f0028 	ldr	r0, [pc, #40]	; 19fc <_free_r+0x268>
    19d0:	e1520000 	cmp	r2, r0
    19d4:	91a0e923 	lsrls	lr, r3, #18
    19d8:	928ee07c 	addls	lr, lr, #124	; 0x7c
    19dc:	91a0008e 	lslls	r0, lr, #1
    19e0:	83a000fc 	movhi	r0, #252	; 0xfc
    19e4:	83a0e07e 	movhi	lr, #126	; 0x7e
    19e8:	eaffffa1 	b	1874 <_free_r+0xe0>
    19ec:	000047d0 	.word	0x000047d0
    19f0:	000047d8 	.word	0x000047d8
    19f4:	00004bdc 	.word	0x00004bdc
    19f8:	00004d08 	.word	0x00004d08
    19fc:	00000554 	.word	0x00000554

00001a00 <_malloc_r>:
    1a00:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1a04:	e281500b 	add	r5, r1, #11
    1a08:	e3550016 	cmp	r5, #22
    1a0c:	83c55007 	bichi	r5, r5, #7
    1a10:	81a03fa5 	lsrhi	r3, r5, #31
    1a14:	93a03000 	movls	r3, #0
    1a18:	93a05010 	movls	r5, #16
    1a1c:	e1550001 	cmp	r5, r1
    1a20:	21a01003 	movcs	r1, r3
    1a24:	33831001 	orrcc	r1, r3, #1
    1a28:	e3510000 	cmp	r1, #0
    1a2c:	13a0300c 	movne	r3, #12
    1a30:	e24dd00c 	sub	sp, sp, #12
    1a34:	e1a06000 	mov	r6, r0
    1a38:	15803000 	strne	r3, [r0]
    1a3c:	13a04000 	movne	r4, #0
    1a40:	1a000015 	bne	1a9c <_malloc_r+0x9c>
    1a44:	eb0001b4 	bl	211c <__malloc_lock>
    1a48:	e3550f7e 	cmp	r5, #504	; 0x1f8
    1a4c:	2a000016 	bcs	1aac <_malloc_r+0xac>
    1a50:	e59f76b8 	ldr	r7, [pc, #1720]	; 2110 <_malloc_r+0x710>
    1a54:	e1a0e1a5 	lsr	lr, r5, #3
    1a58:	e087318e 	add	r3, r7, lr, lsl #3
    1a5c:	e593400c 	ldr	r4, [r3, #12]
    1a60:	e1540003 	cmp	r4, r3
    1a64:	0a00014b 	beq	1f98 <_malloc_r+0x598>
    1a68:	e5943004 	ldr	r3, [r4, #4]
    1a6c:	e3c33003 	bic	r3, r3, #3
    1a70:	e0843003 	add	r3, r4, r3
    1a74:	e5930004 	ldr	r0, [r3, #4]
    1a78:	e2841008 	add	r1, r4, #8
    1a7c:	e8910006 	ldm	r1, {r1, r2}
    1a80:	e3800001 	orr	r0, r0, #1
    1a84:	e5830004 	str	r0, [r3, #4]
    1a88:	e581200c 	str	r2, [r1, #12]
    1a8c:	e5821008 	str	r1, [r2, #8]
    1a90:	e1a00006 	mov	r0, r6
    1a94:	eb0001a1 	bl	2120 <__malloc_unlock>
    1a98:	e2844008 	add	r4, r4, #8
    1a9c:	e1a00004 	mov	r0, r4
    1aa0:	e28dd00c 	add	sp, sp, #12
    1aa4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1aa8:	e12fff1e 	bx	lr
    1aac:	e1b0e4a5 	lsrs	lr, r5, #9
    1ab0:	01a0e1a5 	lsreq	lr, r5, #3
    1ab4:	01a0108e 	lsleq	r1, lr, #1
    1ab8:	1a000061 	bne	1c44 <_malloc_r+0x244>
    1abc:	e59f764c 	ldr	r7, [pc, #1612]	; 2110 <_malloc_r+0x710>
    1ac0:	e0871101 	add	r1, r7, r1, lsl #2
    1ac4:	e591400c 	ldr	r4, [r1, #12]
    1ac8:	e1510004 	cmp	r1, r4
    1acc:	1a000005 	bne	1ae8 <_malloc_r+0xe8>
    1ad0:	ea00000a 	b	1b00 <_malloc_r+0x100>
    1ad4:	e3530000 	cmp	r3, #0
    1ad8:	aa0000d7 	bge	1e3c <_malloc_r+0x43c>
    1adc:	e594400c 	ldr	r4, [r4, #12]
    1ae0:	e1510004 	cmp	r1, r4
    1ae4:	0a000005 	beq	1b00 <_malloc_r+0x100>
    1ae8:	e5942004 	ldr	r2, [r4, #4]
    1aec:	e3c22003 	bic	r2, r2, #3
    1af0:	e0653002 	rsb	r3, r5, r2
    1af4:	e353000f 	cmp	r3, #15
    1af8:	dafffff5 	ble	1ad4 <_malloc_r+0xd4>
    1afc:	e24ee001 	sub	lr, lr, #1
    1b00:	e28ee001 	add	lr, lr, #1
    1b04:	e59f3604 	ldr	r3, [pc, #1540]	; 2110 <_malloc_r+0x710>
    1b08:	e5974010 	ldr	r4, [r7, #16]
    1b0c:	e2838008 	add	r8, r3, #8
    1b10:	e1540008 	cmp	r4, r8
    1b14:	05931004 	ldreq	r1, [r3, #4]
    1b18:	0a000016 	beq	1b78 <_malloc_r+0x178>
    1b1c:	e5942004 	ldr	r2, [r4, #4]
    1b20:	e3c22003 	bic	r2, r2, #3
    1b24:	e0651002 	rsb	r1, r5, r2
    1b28:	e351000f 	cmp	r1, #15
    1b2c:	ca0000f7 	bgt	1f10 <_malloc_r+0x510>
    1b30:	e3510000 	cmp	r1, #0
    1b34:	e5838014 	str	r8, [r3, #20]
    1b38:	e5838010 	str	r8, [r3, #16]
    1b3c:	aa000046 	bge	1c5c <_malloc_r+0x25c>
    1b40:	e3520c02 	cmp	r2, #512	; 0x200
    1b44:	2a0000d2 	bcs	1e94 <_malloc_r+0x494>
    1b48:	e5930004 	ldr	r0, [r3, #4]
    1b4c:	e1a021a2 	lsr	r2, r2, #3
    1b50:	e1a01142 	asr	r1, r2, #2
    1b54:	e3a0c001 	mov	r12, #1
    1b58:	e180111c 	orr	r1, r0, r12, lsl r1
    1b5c:	e0832182 	add	r2, r3, r2, lsl #3
    1b60:	e5920008 	ldr	r0, [r2, #8]
    1b64:	e584200c 	str	r2, [r4, #12]
    1b68:	e5840008 	str	r0, [r4, #8]
    1b6c:	e5831004 	str	r1, [r3, #4]
    1b70:	e5824008 	str	r4, [r2, #8]
    1b74:	e580400c 	str	r4, [r0, #12]
    1b78:	e1a0014e 	asr	r0, lr, #2
    1b7c:	e3a03001 	mov	r3, #1
    1b80:	e1a00013 	lsl	r0, r3, r0
    1b84:	e1500001 	cmp	r0, r1
    1b88:	8a00003b 	bhi	1c7c <_malloc_r+0x27c>
    1b8c:	e1110000 	tst	r1, r0
    1b90:	1a000008 	bne	1bb8 <_malloc_r+0x1b8>
    1b94:	e1a00310 	lsl	r0, r0, r3
    1b98:	e3cee003 	bic	lr, lr, #3
    1b9c:	e1110000 	tst	r1, r0
    1ba0:	e28ee004 	add	lr, lr, #4
    1ba4:	1a000003 	bne	1bb8 <_malloc_r+0x1b8>
    1ba8:	e1a00080 	lsl	r0, r0, #1
    1bac:	e1110000 	tst	r1, r0
    1bb0:	e28ee004 	add	lr, lr, #4
    1bb4:	0afffffb 	beq	1ba8 <_malloc_r+0x1a8>
    1bb8:	e087a18e 	add	r10, r7, lr, lsl #3
    1bbc:	e1a0c00a 	mov	r12, r10
    1bc0:	e1a0400e 	mov	r4, lr
    1bc4:	e59c300c 	ldr	r3, [r12, #12]
    1bc8:	e15c0003 	cmp	r12, r3
    1bcc:	1a000005 	bne	1be8 <_malloc_r+0x1e8>
    1bd0:	ea0000db 	b	1f44 <_malloc_r+0x544>
    1bd4:	e3520000 	cmp	r2, #0
    1bd8:	aa0000f4 	bge	1fb0 <_malloc_r+0x5b0>
    1bdc:	e593300c 	ldr	r3, [r3, #12]
    1be0:	e15c0003 	cmp	r12, r3
    1be4:	0a0000d6 	beq	1f44 <_malloc_r+0x544>
    1be8:	e5931004 	ldr	r1, [r3, #4]
    1bec:	e3c11003 	bic	r1, r1, #3
    1bf0:	e0652001 	rsb	r2, r5, r1
    1bf4:	e352000f 	cmp	r2, #15
    1bf8:	dafffff5 	ble	1bd4 <_malloc_r+0x1d4>
    1bfc:	e1a04003 	mov	r4, r3
    1c00:	e593000c 	ldr	r0, [r3, #12]
    1c04:	e5b4c008 	ldr	r12, [r4, #8]!
    1c08:	e0831005 	add	r1, r3, r5
    1c0c:	e382e001 	orr	lr, r2, #1
    1c10:	e3855001 	orr	r5, r5, #1
    1c14:	e58c000c 	str	r0, [r12, #12]
    1c18:	e580c008 	str	r12, [r0, #8]
    1c1c:	e5835004 	str	r5, [r3, #4]
    1c20:	e5871014 	str	r1, [r7, #20]
    1c24:	e5871010 	str	r1, [r7, #16]
    1c28:	e581800c 	str	r8, [r1, #12]
    1c2c:	e5818008 	str	r8, [r1, #8]
    1c30:	e581e004 	str	lr, [r1, #4]
    1c34:	e7812002 	str	r2, [r1, r2]
    1c38:	e1a00006 	mov	r0, r6
    1c3c:	eb000137 	bl	2120 <__malloc_unlock>
    1c40:	eaffff95 	b	1a9c <_malloc_r+0x9c>
    1c44:	e35e0004 	cmp	lr, #4
    1c48:	8a000087 	bhi	1e6c <_malloc_r+0x46c>
    1c4c:	e1a0e325 	lsr	lr, r5, #6
    1c50:	e28ee038 	add	lr, lr, #56	; 0x38
    1c54:	e1a0108e 	lsl	r1, lr, #1
    1c58:	eaffff97 	b	1abc <_malloc_r+0xbc>
    1c5c:	e0842002 	add	r2, r4, r2
    1c60:	e5923004 	ldr	r3, [r2, #4]
    1c64:	e3833001 	orr	r3, r3, #1
    1c68:	e5823004 	str	r3, [r2, #4]
    1c6c:	e1a00006 	mov	r0, r6
    1c70:	eb00012a 	bl	2120 <__malloc_unlock>
    1c74:	e2844008 	add	r4, r4, #8
    1c78:	eaffff87 	b	1a9c <_malloc_r+0x9c>
    1c7c:	e5974008 	ldr	r4, [r7, #8]
    1c80:	e594a004 	ldr	r10, [r4, #4]
    1c84:	e3caa003 	bic	r10, r10, #3
    1c88:	e155000a 	cmp	r5, r10
    1c8c:	8a000002 	bhi	1c9c <_malloc_r+0x29c>
    1c90:	e065300a 	rsb	r3, r5, r10
    1c94:	e353000f 	cmp	r3, #15
    1c98:	ca00005d 	bgt	1e14 <_malloc_r+0x414>
    1c9c:	e59f9470 	ldr	r9, [pc, #1136]	; 2114 <_malloc_r+0x714>
    1ca0:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    1ca4:	e599b000 	ldr	r11, [r9]
    1ca8:	e3730001 	cmn	r3, #1
    1cac:	e085b00b 	add	r11, r5, r11
    1cb0:	128bba01 	addne	r11, r11, #4096	; 0x1000
    1cb4:	128bb00f 	addne	r11, r11, #15
    1cb8:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    1cbc:	028bb010 	addeq	r11, r11, #16
    1cc0:	13cbb00f 	bicne	r11, r11, #15
    1cc4:	e084200a 	add	r2, r4, r10
    1cc8:	e1a00006 	mov	r0, r6
    1ccc:	e1a0100b 	mov	r1, r11
    1cd0:	e58d2004 	str	r2, [sp, #4]
    1cd4:	eb000112 	bl	2124 <_sbrk_r>
    1cd8:	e3700001 	cmn	r0, #1
    1cdc:	e1a08000 	mov	r8, r0
    1ce0:	e59d2004 	ldr	r2, [sp, #4]
    1ce4:	0a0000e2 	beq	2074 <_malloc_r+0x674>
    1ce8:	e1520000 	cmp	r2, r0
    1cec:	8a0000bf 	bhi	1ff0 <_malloc_r+0x5f0>
    1cf0:	e5993004 	ldr	r3, [r9, #4]
    1cf4:	e1520008 	cmp	r2, r8
    1cf8:	e08b3003 	add	r3, r11, r3
    1cfc:	e5893004 	str	r3, [r9, #4]
    1d00:	0a0000df 	beq	2084 <_malloc_r+0x684>
    1d04:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    1d08:	e3710001 	cmn	r1, #1
    1d0c:	10622008 	rsbne	r2, r2, r8
    1d10:	059f33f8 	ldreq	r3, [pc, #1016]	; 2110 <_malloc_r+0x710>
    1d14:	10833002 	addne	r3, r3, r2
    1d18:	05838408 	streq	r8, [r3, #1032]	; 0x408
    1d1c:	15893004 	strne	r3, [r9, #4]
    1d20:	e2183007 	ands	r3, r8, #7
    1d24:	12632008 	rsbne	r2, r3, #8
    1d28:	10888002 	addne	r8, r8, r2
    1d2c:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    1d30:	12832008 	addne	r2, r3, #8
    1d34:	e088300b 	add	r3, r8, r11
    1d38:	03a02a01 	moveq	r2, #4096	; 0x1000
    1d3c:	e1a03a03 	lsl	r3, r3, #20
    1d40:	e042ba23 	sub	r11, r2, r3, lsr #20
    1d44:	e1a0100b 	mov	r1, r11
    1d48:	e1a00006 	mov	r0, r6
    1d4c:	eb0000f4 	bl	2124 <_sbrk_r>
    1d50:	e3700001 	cmn	r0, #1
    1d54:	10682000 	rsbne	r2, r8, r0
    1d58:	e5993004 	ldr	r3, [r9, #4]
    1d5c:	108b2002 	addne	r2, r11, r2
    1d60:	03a0b000 	moveq	r11, #0
    1d64:	13822001 	orrne	r2, r2, #1
    1d68:	03a02001 	moveq	r2, #1
    1d6c:	e08b3003 	add	r3, r11, r3
    1d70:	e1540007 	cmp	r4, r7
    1d74:	e5893004 	str	r3, [r9, #4]
    1d78:	e5878008 	str	r8, [r7, #8]
    1d7c:	e5882004 	str	r2, [r8, #4]
    1d80:	0a00000d 	beq	1dbc <_malloc_r+0x3bc>
    1d84:	e35a000f 	cmp	r10, #15
    1d88:	9a0000ac 	bls	2040 <_malloc_r+0x640>
    1d8c:	e594c004 	ldr	r12, [r4, #4]
    1d90:	e24a200c 	sub	r2, r10, #12
    1d94:	e3c22007 	bic	r2, r2, #7
    1d98:	e20cc001 	and	r12, r12, #1
    1d9c:	e0841002 	add	r1, r4, r2
    1da0:	e3a00005 	mov	r0, #5
    1da4:	e182c00c 	orr	r12, r2, r12
    1da8:	e352000f 	cmp	r2, #15
    1dac:	e584c004 	str	r12, [r4, #4]
    1db0:	e5810004 	str	r0, [r1, #4]
    1db4:	e5810008 	str	r0, [r1, #8]
    1db8:	8a0000b8 	bhi	20a0 <_malloc_r+0x6a0>
    1dbc:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    1dc0:	e1530002 	cmp	r3, r2
    1dc4:	859f2348 	ldrhi	r2, [pc, #840]	; 2114 <_malloc_r+0x714>
    1dc8:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    1dcc:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    1dd0:	e5974008 	ldr	r4, [r7, #8]
    1dd4:	e1530002 	cmp	r3, r2
    1dd8:	95943004 	ldrls	r3, [r4, #4]
    1ddc:	85942004 	ldrhi	r2, [r4, #4]
    1de0:	859f132c 	ldrhi	r1, [pc, #812]	; 2114 <_malloc_r+0x714>
    1de4:	93c33003 	bicls	r3, r3, #3
    1de8:	85813030 	strhi	r3, [r1, #48]	; 0x30
    1dec:	83c23003 	bichi	r3, r2, #3
    1df0:	e1550003 	cmp	r5, r3
    1df4:	e0653003 	rsb	r3, r5, r3
    1df8:	8a000001 	bhi	1e04 <_malloc_r+0x404>
    1dfc:	e353000f 	cmp	r3, #15
    1e00:	ca000003 	bgt	1e14 <_malloc_r+0x414>
    1e04:	e1a00006 	mov	r0, r6
    1e08:	eb0000c4 	bl	2120 <__malloc_unlock>
    1e0c:	e3a04000 	mov	r4, #0
    1e10:	eaffff21 	b	1a9c <_malloc_r+0x9c>
    1e14:	e0842005 	add	r2, r4, r5
    1e18:	e3833001 	orr	r3, r3, #1
    1e1c:	e3855001 	orr	r5, r5, #1
    1e20:	e5845004 	str	r5, [r4, #4]
    1e24:	e1a00006 	mov	r0, r6
    1e28:	e5823004 	str	r3, [r2, #4]
    1e2c:	e5872008 	str	r2, [r7, #8]
    1e30:	e2844008 	add	r4, r4, #8
    1e34:	eb0000b9 	bl	2120 <__malloc_unlock>
    1e38:	eaffff17 	b	1a9c <_malloc_r+0x9c>
    1e3c:	e0842002 	add	r2, r4, r2
    1e40:	e5920004 	ldr	r0, [r2, #4]
    1e44:	e2841008 	add	r1, r4, #8
    1e48:	e891000a 	ldm	r1, {r1, r3}
    1e4c:	e3800001 	orr	r0, r0, #1
    1e50:	e5820004 	str	r0, [r2, #4]
    1e54:	e581300c 	str	r3, [r1, #12]
    1e58:	e5831008 	str	r1, [r3, #8]
    1e5c:	e1a00006 	mov	r0, r6
    1e60:	eb0000ae 	bl	2120 <__malloc_unlock>
    1e64:	e2844008 	add	r4, r4, #8
    1e68:	eaffff0b 	b	1a9c <_malloc_r+0x9c>
    1e6c:	e35e0014 	cmp	lr, #20
    1e70:	928ee05b 	addls	lr, lr, #91	; 0x5b
    1e74:	91a0108e 	lslls	r1, lr, #1
    1e78:	9affff0f 	bls	1abc <_malloc_r+0xbc>
    1e7c:	e35e0054 	cmp	lr, #84	; 0x54
    1e80:	8a000061 	bhi	200c <_malloc_r+0x60c>
    1e84:	e1a0e625 	lsr	lr, r5, #12
    1e88:	e28ee06e 	add	lr, lr, #110	; 0x6e
    1e8c:	e1a0108e 	lsl	r1, lr, #1
    1e90:	eaffff09 	b	1abc <_malloc_r+0xbc>
    1e94:	e1a034a2 	lsr	r3, r2, #9
    1e98:	e3530004 	cmp	r3, #4
    1e9c:	9a00004f 	bls	1fe0 <_malloc_r+0x5e0>
    1ea0:	e3530014 	cmp	r3, #20
    1ea4:	9283a05b 	addls	r10, r3, #91	; 0x5b
    1ea8:	91a0008a 	lslls	r0, r10, #1
    1eac:	9a000004 	bls	1ec4 <_malloc_r+0x4c4>
    1eb0:	e3530054 	cmp	r3, #84	; 0x54
    1eb4:	8a00007f 	bhi	20b8 <_malloc_r+0x6b8>
    1eb8:	e1a0a622 	lsr	r10, r2, #12
    1ebc:	e28aa06e 	add	r10, r10, #110	; 0x6e
    1ec0:	e1a0008a 	lsl	r0, r10, #1
    1ec4:	e0870100 	add	r0, r7, r0, lsl #2
    1ec8:	e5903008 	ldr	r3, [r0, #8]
    1ecc:	e1530000 	cmp	r3, r0
    1ed0:	e59fc238 	ldr	r12, [pc, #568]	; 2110 <_malloc_r+0x710>
    1ed4:	0a000052 	beq	2024 <_malloc_r+0x624>
    1ed8:	e5931004 	ldr	r1, [r3, #4]
    1edc:	e3c11003 	bic	r1, r1, #3
    1ee0:	e1520001 	cmp	r2, r1
    1ee4:	2a000002 	bcs	1ef4 <_malloc_r+0x4f4>
    1ee8:	e5933008 	ldr	r3, [r3, #8]
    1eec:	e1500003 	cmp	r0, r3
    1ef0:	1afffff8 	bne	1ed8 <_malloc_r+0x4d8>
    1ef4:	e593200c 	ldr	r2, [r3, #12]
    1ef8:	e5971004 	ldr	r1, [r7, #4]
    1efc:	e584200c 	str	r2, [r4, #12]
    1f00:	e5843008 	str	r3, [r4, #8]
    1f04:	e583400c 	str	r4, [r3, #12]
    1f08:	e5824008 	str	r4, [r2, #8]
    1f0c:	eaffff19 	b	1b78 <_malloc_r+0x178>
    1f10:	e0842005 	add	r2, r4, r5
    1f14:	e3810001 	orr	r0, r1, #1
    1f18:	e3855001 	orr	r5, r5, #1
    1f1c:	e5845004 	str	r5, [r4, #4]
    1f20:	e5832014 	str	r2, [r3, #20]
    1f24:	e5832010 	str	r2, [r3, #16]
    1f28:	e582800c 	str	r8, [r2, #12]
    1f2c:	e9820101 	stmib	r2, {r0, r8}
    1f30:	e7821001 	str	r1, [r2, r1]
    1f34:	e1a00006 	mov	r0, r6
    1f38:	eb000078 	bl	2120 <__malloc_unlock>
    1f3c:	e2844008 	add	r4, r4, #8
    1f40:	eafffed5 	b	1a9c <_malloc_r+0x9c>
    1f44:	e2844001 	add	r4, r4, #1
    1f48:	e3140003 	tst	r4, #3
    1f4c:	e28cc008 	add	r12, r12, #8
    1f50:	1affff1b 	bne	1bc4 <_malloc_r+0x1c4>
    1f54:	e31e0003 	tst	lr, #3
    1f58:	e24a3008 	sub	r3, r10, #8
    1f5c:	0a000062 	beq	20ec <_malloc_r+0x6ec>
    1f60:	e59aa000 	ldr	r10, [r10]
    1f64:	e15a0003 	cmp	r10, r3
    1f68:	e24ee001 	sub	lr, lr, #1
    1f6c:	0afffff8 	beq	1f54 <_malloc_r+0x554>
    1f70:	e5973004 	ldr	r3, [r7, #4]
    1f74:	e1a00080 	lsl	r0, r0, #1
    1f78:	e1500003 	cmp	r0, r3
    1f7c:	8affff3e 	bhi	1c7c <_malloc_r+0x27c>
    1f80:	e3500000 	cmp	r0, #0
    1f84:	0affff3c 	beq	1c7c <_malloc_r+0x27c>
    1f88:	e1130000 	tst	r3, r0
    1f8c:	0a00005a 	beq	20fc <_malloc_r+0x6fc>
    1f90:	e1a0e004 	mov	lr, r4
    1f94:	eaffff07 	b	1bb8 <_malloc_r+0x1b8>
    1f98:	e2843008 	add	r3, r4, #8
    1f9c:	e5944014 	ldr	r4, [r4, #20]
    1fa0:	e1530004 	cmp	r3, r4
    1fa4:	028ee002 	addeq	lr, lr, #2
    1fa8:	0afffed5 	beq	1b04 <_malloc_r+0x104>
    1fac:	eafffead 	b	1a68 <_malloc_r+0x68>
    1fb0:	e0831001 	add	r1, r3, r1
    1fb4:	e5910004 	ldr	r0, [r1, #4]
    1fb8:	e1a04003 	mov	r4, r3
    1fbc:	e5b42008 	ldr	r2, [r4, #8]!
    1fc0:	e593300c 	ldr	r3, [r3, #12]
    1fc4:	e3800001 	orr	r0, r0, #1
    1fc8:	e5810004 	str	r0, [r1, #4]
    1fcc:	e582300c 	str	r3, [r2, #12]
    1fd0:	e5832008 	str	r2, [r3, #8]
    1fd4:	e1a00006 	mov	r0, r6
    1fd8:	eb000050 	bl	2120 <__malloc_unlock>
    1fdc:	eafffeae 	b	1a9c <_malloc_r+0x9c>
    1fe0:	e1a0a322 	lsr	r10, r2, #6
    1fe4:	e28aa038 	add	r10, r10, #56	; 0x38
    1fe8:	e1a0008a 	lsl	r0, r10, #1
    1fec:	eaffffb4 	b	1ec4 <_malloc_r+0x4c4>
    1ff0:	e1540007 	cmp	r4, r7
    1ff4:	0affff3d 	beq	1cf0 <_malloc_r+0x2f0>
    1ff8:	e59f3110 	ldr	r3, [pc, #272]	; 2110 <_malloc_r+0x710>
    1ffc:	e5934008 	ldr	r4, [r3, #8]
    2000:	e5943004 	ldr	r3, [r4, #4]
    2004:	e3c33003 	bic	r3, r3, #3
    2008:	eaffff78 	b	1df0 <_malloc_r+0x3f0>
    200c:	e35e0f55 	cmp	lr, #340	; 0x154
    2010:	8a00000f 	bhi	2054 <_malloc_r+0x654>
    2014:	e1a0e7a5 	lsr	lr, r5, #15
    2018:	e28ee077 	add	lr, lr, #119	; 0x77
    201c:	e1a0108e 	lsl	r1, lr, #1
    2020:	eafffea5 	b	1abc <_malloc_r+0xbc>
    2024:	e59c2004 	ldr	r2, [r12, #4]
    2028:	e1a0a14a 	asr	r10, r10, #2
    202c:	e3a01001 	mov	r1, #1
    2030:	e1821a11 	orr	r1, r2, r1, lsl r10
    2034:	e1a02003 	mov	r2, r3
    2038:	e58c1004 	str	r1, [r12, #4]
    203c:	eaffffae 	b	1efc <_malloc_r+0x4fc>
    2040:	e3a03001 	mov	r3, #1
    2044:	e5883004 	str	r3, [r8, #4]
    2048:	e1a04008 	mov	r4, r8
    204c:	e3a03000 	mov	r3, #0
    2050:	eaffff66 	b	1df0 <_malloc_r+0x3f0>
    2054:	e59f30bc 	ldr	r3, [pc, #188]	; 2118 <_malloc_r+0x718>
    2058:	e15e0003 	cmp	lr, r3
    205c:	91a0e925 	lsrls	lr, r5, #18
    2060:	928ee07c 	addls	lr, lr, #124	; 0x7c
    2064:	91a0108e 	lslls	r1, lr, #1
    2068:	83a010fc 	movhi	r1, #252	; 0xfc
    206c:	83a0e07e 	movhi	lr, #126	; 0x7e
    2070:	eafffe91 	b	1abc <_malloc_r+0xbc>
    2074:	e5974008 	ldr	r4, [r7, #8]
    2078:	e5943004 	ldr	r3, [r4, #4]
    207c:	e3c33003 	bic	r3, r3, #3
    2080:	eaffff5a 	b	1df0 <_malloc_r+0x3f0>
    2084:	e1b01a02 	lsls	r1, r2, #20
    2088:	1affff1d 	bne	1d04 <_malloc_r+0x304>
    208c:	e5972008 	ldr	r2, [r7, #8]
    2090:	e08b100a 	add	r1, r11, r10
    2094:	e3811001 	orr	r1, r1, #1
    2098:	e5821004 	str	r1, [r2, #4]
    209c:	eaffff46 	b	1dbc <_malloc_r+0x3bc>
    20a0:	e1a00006 	mov	r0, r6
    20a4:	e2841008 	add	r1, r4, #8
    20a8:	ebfffdb9 	bl	1794 <_free_r>
    20ac:	e59f3060 	ldr	r3, [pc, #96]	; 2114 <_malloc_r+0x714>
    20b0:	e5933004 	ldr	r3, [r3, #4]
    20b4:	eaffff40 	b	1dbc <_malloc_r+0x3bc>
    20b8:	e3530f55 	cmp	r3, #340	; 0x154
    20bc:	91a0a7a2 	lsrls	r10, r2, #15
    20c0:	928aa077 	addls	r10, r10, #119	; 0x77
    20c4:	91a0008a 	lslls	r0, r10, #1
    20c8:	9affff7d 	bls	1ec4 <_malloc_r+0x4c4>
    20cc:	e59f1044 	ldr	r1, [pc, #68]	; 2118 <_malloc_r+0x718>
    20d0:	e1530001 	cmp	r3, r1
    20d4:	91a0a922 	lsrls	r10, r2, #18
    20d8:	928aa07c 	addls	r10, r10, #124	; 0x7c
    20dc:	91a0008a 	lslls	r0, r10, #1
    20e0:	83a000fc 	movhi	r0, #252	; 0xfc
    20e4:	83a0a07e 	movhi	r10, #126	; 0x7e
    20e8:	eaffff75 	b	1ec4 <_malloc_r+0x4c4>
    20ec:	e5973004 	ldr	r3, [r7, #4]
    20f0:	e1c33000 	bic	r3, r3, r0
    20f4:	e5873004 	str	r3, [r7, #4]
    20f8:	eaffff9d 	b	1f74 <_malloc_r+0x574>
    20fc:	e1a00080 	lsl	r0, r0, #1
    2100:	e1130000 	tst	r3, r0
    2104:	e2844004 	add	r4, r4, #4
    2108:	1affffa0 	bne	1f90 <_malloc_r+0x590>
    210c:	eafffffa 	b	20fc <_malloc_r+0x6fc>
    2110:	000047d0 	.word	0x000047d0
    2114:	00004d08 	.word	0x00004d08
    2118:	00000554 	.word	0x00000554

0000211c <__malloc_lock>:
    211c:	e12fff1e 	bx	lr

00002120 <__malloc_unlock>:
    2120:	e12fff1e 	bx	lr

00002124 <_sbrk_r>:
    2124:	e92d4038 	push	{r3, r4, r5, lr}
    2128:	e59f4030 	ldr	r4, [pc, #48]	; 2160 <_sbrk_r+0x3c>
    212c:	e3a03000 	mov	r3, #0
    2130:	e1a05000 	mov	r5, r0
    2134:	e1a00001 	mov	r0, r1
    2138:	e5843000 	str	r3, [r4]
    213c:	eb000034 	bl	2214 <_sbrk>
    2140:	e3700001 	cmn	r0, #1
    2144:	0a000001 	beq	2150 <_sbrk_r+0x2c>
    2148:	e8bd4038 	pop	{r3, r4, r5, lr}
    214c:	e12fff1e 	bx	lr
    2150:	e5943000 	ldr	r3, [r4]
    2154:	e3530000 	cmp	r3, #0
    2158:	15853000 	strne	r3, [r5]
    215c:	eafffff9 	b	2148 <_sbrk_r+0x24>
    2160:	00004d04 	.word	0x00004d04

00002164 <__cs3_premain>:
    2164:	e92d4008 	push	{r3, lr}
    2168:	eb00004a 	bl	2298 <__libc_init_array>
    216c:	e59f3030 	ldr	r3, [pc, #48]	; 21a4 <__cs3_premain+0x40>
    2170:	e3530000 	cmp	r3, #0
    2174:	15930000 	ldrne	r0, [r3]
    2178:	01a00003 	moveq	r0, r3
    217c:	e59f3024 	ldr	r3, [pc, #36]	; 21a8 <__cs3_premain+0x44>
    2180:	e3530000 	cmp	r3, #0
    2184:	15931000 	ldrne	r1, [r3]
    2188:	01a01003 	moveq	r1, r3
    218c:	e3a02000 	mov	r2, #0
    2190:	ebfff859 	bl	2fc <main>
    2194:	e59f3010 	ldr	r3, [pc, #16]	; 21ac <__cs3_premain+0x48>
    2198:	e3530000 	cmp	r3, #0
    219c:	1bfffbd2 	blne	10ec <exit>
    21a0:	eafffffe 	b	21a0 <__cs3_premain+0x3c>
	...
    21ac:	000010ec 	.word	0x000010ec

000021b0 <_exit>:
    21b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    21b4:	e3a00018 	mov	r0, #24
    21b8:	e59f1004 	ldr	r1, [pc, #4]	; 21c4 <_exit+0x14>
    21bc:	ef123456 	svc	0x00123456
    21c0:	eafffffe 	b	21c0 <_exit+0x10>
    21c4:	00020026 	.word	0x00020026

000021c8 <_gettimeofday>:
    21c8:	e92d4038 	push	{r3, r4, r5, lr}
    21cc:	e2505000 	subs	r5, r0, #0
    21d0:	e1a04001 	mov	r4, r1
    21d4:	0a000007 	beq	21f8 <_gettimeofday+0x30>
    21d8:	e3510000 	cmp	r1, #0
    21dc:	1a000007 	bne	2200 <_gettimeofday+0x38>
    21e0:	e3a00011 	mov	r0, #17
    21e4:	ef123456 	svc	0x00123456
    21e8:	e8850011 	stm	r5, {r0, r4}
    21ec:	e1a00004 	mov	r0, r4
    21f0:	e8bd4038 	pop	{r3, r4, r5, lr}
    21f4:	e12fff1e 	bx	lr
    21f8:	e1a00005 	mov	r0, r5
    21fc:	eafffffb 	b	21f0 <_gettimeofday+0x28>
    2200:	eb000020 	bl	2288 <__errno>
    2204:	e3a03016 	mov	r3, #22
    2208:	e5803000 	str	r3, [r0]
    220c:	e3e00000 	mvn	r0, #0
    2210:	eafffff6 	b	21f0 <_gettimeofday+0x28>

00002214 <_sbrk>:
    2214:	e92d4008 	push	{r3, lr}
    2218:	e59f305c 	ldr	r3, [pc, #92]	; 227c <_sbrk+0x68>
    221c:	e59f105c 	ldr	r1, [pc, #92]	; 2280 <_sbrk+0x6c>
    2220:	e5932000 	ldr	r2, [r3]
    2224:	e5913000 	ldr	r3, [r1]
    2228:	e3520000 	cmp	r2, #0
    222c:	e0830000 	add	r0, r3, r0
    2230:	0a000002 	beq	2240 <_sbrk+0x2c>
    2234:	e0602002 	rsb	r2, r0, r2
    2238:	e3520000 	cmp	r2, #0
    223c:	ba000009 	blt	2268 <_sbrk+0x54>
    2240:	e04d2003 	sub	r2, sp, r3
    2244:	e3520000 	cmp	r2, #0
    2248:	ba000002 	blt	2258 <_sbrk+0x44>
    224c:	e04d2000 	sub	r2, sp, r0
    2250:	e35200ff 	cmp	r2, #255	; 0xff
    2254:	da000003 	ble	2268 <_sbrk+0x54>
    2258:	e5810000 	str	r0, [r1]
    225c:	e1a00003 	mov	r0, r3
    2260:	e8bd4008 	pop	{r3, lr}
    2264:	e12fff1e 	bx	lr
    2268:	eb000006 	bl	2288 <__errno>
    226c:	e3a0300c 	mov	r3, #12
    2270:	e5803000 	str	r3, [r0]
    2274:	e3e03000 	mvn	r3, #0
    2278:	eafffff7 	b	225c <_sbrk+0x48>
    227c:	00004be0 	.word	0x00004be0
    2280:	00004be4 	.word	0x00004be4

00002284 <__cs3_isr_interrupt>:
    2284:	eafffffe 	b	2284 <__cs3_isr_interrupt>

00002288 <__errno>:
    2288:	e59f3004 	ldr	r3, [pc, #4]	; 2294 <__errno+0xc>
    228c:	e5930000 	ldr	r0, [r3]
    2290:	e12fff1e 	bx	lr
    2294:	000043a0 	.word	0x000043a0

00002298 <__libc_init_array>:
    2298:	e92d4070 	push	{r4, r5, r6, lr}
    229c:	e59f506c 	ldr	r5, [pc, #108]	; 2310 <__libc_init_array+0x78>
    22a0:	e59f606c 	ldr	r6, [pc, #108]	; 2314 <__libc_init_array+0x7c>
    22a4:	e0656006 	rsb	r6, r5, r6
    22a8:	e1b06146 	asrs	r6, r6, #2
    22ac:	12455004 	subne	r5, r5, #4
    22b0:	13a04000 	movne	r4, #0
    22b4:	0a000005 	beq	22d0 <__libc_init_array+0x38>
    22b8:	e5b53004 	ldr	r3, [r5, #4]!
    22bc:	e2844001 	add	r4, r4, #1
    22c0:	e1a0e00f 	mov	lr, pc
    22c4:	e12fff13 	bx	r3
    22c8:	e1560004 	cmp	r6, r4
    22cc:	1afffff9 	bne	22b8 <__libc_init_array+0x20>
    22d0:	e59f5040 	ldr	r5, [pc, #64]	; 2318 <__libc_init_array+0x80>
    22d4:	e59f6040 	ldr	r6, [pc, #64]	; 231c <__libc_init_array+0x84>
    22d8:	e0656006 	rsb	r6, r5, r6
    22dc:	eb000812 	bl	432c <_init>
    22e0:	e1b06146 	asrs	r6, r6, #2
    22e4:	12455004 	subne	r5, r5, #4
    22e8:	13a04000 	movne	r4, #0
    22ec:	0a000005 	beq	2308 <__libc_init_array+0x70>
    22f0:	e5b53004 	ldr	r3, [r5, #4]!
    22f4:	e2844001 	add	r4, r4, #1
    22f8:	e1a0e00f 	mov	lr, pc
    22fc:	e12fff13 	bx	r3
    2300:	e1560004 	cmp	r6, r4
    2304:	1afffff9 	bne	22f0 <__libc_init_array+0x58>
    2308:	e8bd4070 	pop	{r4, r5, r6, lr}
    230c:	e12fff1e 	bx	lr
    2310:	00004344 	.word	0x00004344
    2314:	00004344 	.word	0x00004344
    2318:	00004344 	.word	0x00004344
    231c:	0000434c 	.word	0x0000434c

Disassembly of section .rodata:

00002324 <number>:
    2324:	ffffffff 00000000 00000000 00000000     ................
    2334:	00000000 ffff0000 ffffffff 00000000     ................
	...
    2354:	ffff0000 00000000 00000000 00000000     ................
	...
    2378:	ffff0000 ffffffff ffffffff 00000000     ................
	...
    2390:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    23ac:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    23c4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    23e0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    23f8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2414:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    242c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2448:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2460:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    247c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2494:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    24b0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    24c8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    24e4:	ffff0000 ffffffff ffffffff 00000000     ................
	...
    2510:	ffff0000 00000000 00000000 00000000     ................
	...
    2528:	ffff0000 ffffffff 00000000 00000000     ................
	...
    2540:	ffff0000 ffffffff ffffffff ffffffff     ................
    2550:	00000000 ffff0000 ffffffff ffffffff     ................
    2560:	ffffffff ffffffff 00000000 00000000     ................
    2570:	ffffffff ffffffff ffffffff ffffffff     ................
	...
    2588:	ffff0000 ffffffff ffffffff ffffffff     ................
    2598:	0000ffff 00000000 00000000 ffffffff     ................
    25a8:	ffffffff ffffffff ffffffff 00000000     ................
    25b8:	00000000 ffff0000 ffffffff ffffffff     ................
    25c8:	ffffffff ffffffff 0000ffff 00000000     ................
    25d8:	ffffffff ffffffff ffffffff ffffffff     ................
    25e8:	ffffffff 00000000 ffff0000 ffffffff     ................
    25f8:	ffffffff ffffffff ffffffff 0000ffff     ................
    2608:	00000000 ffffffff ffffffff ffffffff     ................
    2618:	ffffffff ffffffff 00000000 ffff0000     ................
    2628:	ffffffff ffffffff ffffffff ffffffff     ................
    2638:	0000ffff 00000000 ffffffff ffffffff     ................
    2648:	ffffffff ffffffff ffffffff 00000000     ................
    2658:	ffff0000 ffffffff ffffffff ffffffff     ................
    2668:	ffffffff 0000ffff 00000000 ffffffff     ................
    2678:	ffffffff ffffffff ffffffff ffffffff     ................
    2688:	00000000 ffff0000 ffffffff ffffffff     ................
    2698:	ffffffff ffffffff 0000ffff 00000000     ................
    26a8:	ffffffff ffffffff ffffffff ffffffff     ................
    26b8:	ffffffff 00000000 ffff0000 ffffffff     ................
    26c8:	ffffffff ffffffff ffffffff 0000ffff     ................
    26d8:	00000000 ffffffff ffffffff ffffffff     ................
    26e8:	ffffffff ffffffff 00000000 ffff0000     ................
    26f8:	ffffffff ffffffff ffffffff ffffffff     ................
    2708:	0000ffff 00000000 ffffffff ffffffff     ................
    2718:	ffffffff ffffffff 00000000 00000000     ................
    2728:	00000000 ffff0000 ffffffff ffffffff     ................
    2738:	0000ffff 00000000 00000000 00000000     ................
    2748:	ffffffff ffffffff ffffffff 00000000     ................
	...
    2760:	ffff0000 ffffffff 0000ffff 00000000     ................
	...
    2780:	0000ffff 00000000 00000000 00000000     ................
	...
    27bc:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    27d4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    27f0:	ffffffff ffffffff ffffffff 0000ffff     ................
    2800:	00000000 ffffffff ffffffff ffffffff     ................
    2810:	ffffffff ffffffff 00000000 ffff0000     ................
    2820:	ffffffff ffffffff ffffffff ffffffff     ................
    2830:	0000ffff 00000000 ffffffff ffffffff     ................
    2840:	ffffffff ffffffff ffffffff 00000000     ................
    2850:	ffff0000 00000000 00000000 00000000     ................
	...
    289c:	ffff0000 00000000 ffff0000 ffffffff     ................
    28ac:	ffffffff ffffffff ffffffff 0000ffff     ................
    28bc:	00000000 ffffffff ffffffff ffffffff     ................
    28cc:	ffffffff ffffffff 00000000 ffff0000     ................
    28dc:	ffffffff ffffffff ffffffff ffffffff     ................
    28ec:	0000ffff 00000000 ffffffff ffffffff     ................
    28fc:	ffffffff ffffffff ffffffff 00000000     ................
    290c:	ffff0000 ffffffff ffffffff ffffffff     ................
    291c:	ffffffff 0000ffff 00000000 ffffffff     ................
    292c:	ffffffff ffffffff ffffffff ffffffff     ................
	...
    2988:	ffff0000 00000000 00000000 00000000     ................
	...
    29a0:	ffff0000 00000000 00000000 00000000     ................
	...
    29dc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    29f8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2a10:	ffff0000 ffffffff ffffffff ffffffff     ................
    2a20:	00000000 ffff0000 ffffffff ffffffff     ................
    2a30:	ffffffff ffffffff 0000ffff 00000000     ................
    2a40:	ffffffff ffffffff ffffffff ffffffff     ................
    2a50:	ffffffff 00000000 ffff0000 ffffffff     ................
    2a60:	ffffffff ffffffff ffffffff 0000ffff     ................
    2a70:	00000000 ffffffff 0000ffff 00000000     ................
	...
    2a8c:	ffff0000 ffffffff 00000000 00000000     ................
	...
    2aa4:	ffff0000 ffffffff 0000ffff 00000000     ................
	...
    2ac0:	ffff0000 ffffffff ffffffff ffffffff     ................
    2ad0:	ffffffff 0000ffff 00000000 ffffffff     ................
    2ae0:	ffffffff ffffffff ffffffff ffffffff     ................
    2af0:	00000000 ffff0000 ffffffff ffffffff     ................
    2b00:	ffffffff ffffffff 0000ffff 00000000     ................
    2b10:	00000000 ffff0000 ffffffff ffffffff     ................
    2b20:	ffffffff 00000000 00000000 00000000     ................
    2b30:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2b48:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2b90:	ffff0000 00000000 00000000 00000000     ................
	...
    2ba8:	ffff0000 00000000 ffff0000 ffffffff     ................
    2bb8:	ffffffff ffffffff 00000000 00000000     ................
    2bc8:	00000000 ffffffff ffffffff ffffffff     ................
    2bd8:	0000ffff 00000000 00000000 ffff0000     ................
    2be8:	ffffffff ffffffff ffffffff 00000000     ................
	...
    2c00:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2c18:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2c34:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2c4c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2c68:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2c80:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2ce4:	ffffffff ffffffff ffffffff ffffffff     ................
    2cf4:	ffffffff 00000000 ffff0000 ffffffff     ................
    2d04:	ffffffff ffffffff ffffffff 0000ffff     ................
    2d14:	00000000 ffffffff ffffffff ffffffff     ................
    2d24:	ffffffff ffffffff 00000000 ffff0000     ................
    2d34:	ffffffff ffffffff ffffffff ffffffff     ................
    2d44:	0000ffff 00000000 ffffffff ffffffff     ................
    2d54:	ffffffff ffffffff ffffffff 00000000     ................
    2d64:	ffff0000 ffffffff ffffffff ffffffff     ................
    2d74:	ffffffff 0000ffff 00000000 ffffffff     ................
    2d84:	ffffffff ffffffff ffffffff ffffffff     ................
    2d94:	00000000 ffff0000 ffffffff ffffffff     ................
    2da4:	ffffffff ffffffff 0000ffff 00000000     ................
    2db4:	ffffffff ffffffff ffffffff ffffffff     ................
    2dc4:	ffffffff 00000000 00000000 00000000     ................
	...
    2e20:	ffff0000 ffffffff ffffffff ffffffff     ................
    2e30:	ffffffff 0000ffff 00000000 ffffffff     ................
    2e40:	ffffffff ffffffff ffffffff ffffffff     ................
    2e50:	00000000 ffff0000 ffffffff ffffffff     ................
    2e60:	ffffffff ffffffff 0000ffff 00000000     ................
    2e70:	ffffffff ffffffff ffffffff ffffffff     ................
    2e80:	ffffffff 00000000 ffff0000 ffffffff     ................
    2e90:	ffffffff ffffffff ffffffff 0000ffff     ................
    2ea0:	00000000 ffffffff ffffffff ffffffff     ................
    2eb0:	ffffffff ffffffff 00000000 00000000     ................
	...
    2ed0:	0000ffff 00000000 00000000 00000000     ................
	...
    2f04:	ffff0000 ffffffff ffffffff ffffffff     ................
    2f14:	ffffffff 0000ffff 00000000 ffffffff     ................
    2f24:	ffffffff ffffffff ffffffff ffffffff     ................
    2f34:	00000000 ffff0000 ffffffff ffffffff     ................
    2f44:	ffffffff ffffffff 0000ffff 00000000     ................
    2f54:	00000000 ffff0000 ffffffff ffffffff     ................
    2f64:	ffffffff 00000000 00000000 00000000     ................
    2f74:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    2f8c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    2fd4:	ffff0000 00000000 00000000 00000000     ................
	...
    2fec:	ffff0000 0000ffff 00000000 00000000     ................
	...
    3044:	ffffffff ffffffff ffffffff ffffffff     ................
    3054:	ffffffff 00000000 ffff0000 ffffffff     ................
    3064:	ffffffff ffffffff ffffffff 0000ffff     ................
    3074:	00000000 ffffffff ffffffff ffffffff     ................
    3084:	ffffffff ffffffff 00000000 ffff0000     ................
    3094:	ffffffff ffffffff ffffffff ffffffff     ................
    30a4:	0000ffff 00000000 ffffffff ffffffff     ................
    30b4:	ffffffff ffffffff ffffffff 00000000     ................
    30c4:	ffff0000 ffffffff ffffffff ffffffff     ................
    30d4:	ffffffff 0000ffff 00000000 00000000     ................
	...
    30f0:	ffff0000 00000000 00000000 00000000     ................
	...
    312c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3148:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3160:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    317c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3194:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    31b0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    31f8:	0000ffff 00000000 00000000 00000000     ................
	...
    3210:	0000ffff 00000000 00000000 00000000     ................
	...
    3260:	ffffffff ffffffff ffffffff ffffffff     ................
    3270:	ffffffff 00000000 ffff0000 ffffffff     ................
    3280:	ffffffff ffffffff ffffffff 0000ffff     ................
    3290:	00000000 ffffffff ffffffff ffffffff     ................
    32a0:	ffffffff ffffffff 00000000 ffff0000     ................
    32b0:	ffffffff ffffffff ffffffff ffffffff     ................
    32c0:	0000ffff 00000000 ffffffff ffffffff     ................
    32d0:	ffffffff ffffffff ffffffff 00000000     ................
    32e0:	ffff0000 ffffffff ffffffff ffffffff     ................
    32f0:	ffffffff 0000ffff 00000000 ffffffff     ................
    3300:	ffffffff ffffffff ffffffff ffffffff     ................
    3310:	00000000 ffff0000 ffffffff ffffffff     ................
    3320:	ffffffff ffffffff 0000ffff 00000000     ................
    3330:	ffffffff ffffffff ffffffff ffffffff     ................
    3340:	ffffffff 00000000 ffff0000 ffffffff     ................
    3350:	ffffffff ffffffff ffffffff 0000ffff     ................
    3360:	00000000 ffffffff ffffffff ffffffff     ................
    3370:	ffffffff ffffffff 00000000 ffff0000     ................
    3380:	ffffffff ffffffff ffffffff ffffffff     ................
    3390:	0000ffff 00000000 ffffffff ffffffff     ................
    33a0:	ffffffff ffffffff ffffffff 00000000     ................
    33b0:	ffff0000 ffffffff ffffffff ffffffff     ................
    33c0:	ffffffff 0000ffff 00000000 ffffffff     ................
    33d0:	ffffffff ffffffff ffffffff ffffffff     ................
    33e0:	00000000 ffff0000 ffffffff ffffffff     ................
    33f0:	ffffffff ffffffff 0000ffff 00000000     ................
    3400:	ffffffff ffffffff ffffffff ffffffff     ................
    3410:	ffffffff 00000000 ffff0000 ffffffff     ................
    3420:	ffffffff ffffffff ffffffff 0000ffff     ................
    3430:	00000000 0000ffff 00000000 00000000     ................
	...
    344c:	0000ffff 00000000 00000000 00000000     ................
	...
    3488:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    34a0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    34bc:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    34d4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    34f0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3508:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3538:	0000ffff 00000000 00000000 00000000     ................
	...
    3550:	0000ffff 00000000 00000000 00000000     ................
	...
    3570:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    358c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    35a4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    35c0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    35d8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    35f4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    363c:	0000ffff 00000000 00000000 00000000     ................
	...
    3654:	ffffffff 00000000 00000000 00000000     ................
	...
    366c:	ffff0000 00000000 00000000 00000000     ................
	...
    36a8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    36c4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    36dc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    36f8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3710:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    372c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3774:	0000ffff 00000000 00000000 00000000     ................
	...
    378c:	ffff0000 ffffffff ffffffff ffffffff     ................
    379c:	ffffffff 0000ffff 00000000 ffffffff     ................
    37ac:	ffffffff ffffffff ffffffff ffffffff     ................
    37bc:	00000000 ffff0000 ffffffff ffffffff     ................
    37cc:	ffffffff ffffffff 0000ffff 00000000     ................
    37dc:	ffffffff ffffffff ffffffff ffffffff     ................
    37ec:	ffffffff 00000000 ffff0000 ffffffff     ................
    37fc:	ffffffff ffffffff ffffffff 0000ffff     ................
    380c:	00000000 ffffffff ffffffff ffffffff     ................
    381c:	ffffffff ffffffff 00000000 00000000     ................
	...
    3874:	ffff0000                                ....

00003878 <start>:
    3878:	0000ffff 00000000 00000000 00000000     ................
	...
    3890:	0000ffff 00000000 00000000 00000000     ................
	...
    38cc:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    38e4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3900:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3918:	ffff0000 ffffffff ffffffff ffffffff     ................
    3928:	ffffffff 0000ffff 00000000 ffffffff     ................
    3938:	ffffffff ffffffff ffffffff ffffffff     ................
    3948:	00000000 ffff0000 ffffffff ffffffff     ................
    3958:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    3978:	ffff0000 00000000 00000000 00000000     ................
	...
    3994:	ffff0000 00000000 00000000 00000000     ................
	...
    39b0:	ffffffff ffffffff ffffffff ffffffff     ................
    39c0:	ffffffff 00000000 ffff0000 ffffffff     ................
    39d0:	ffffffff ffffffff ffffffff 0000ffff     ................
    39e0:	00000000 ffffffff ffffffff ffffffff     ................
    39f0:	ffffffff ffffffff 00000000 00000000     ................
    3a00:	00000000 ffffffff ffffffff ffffffff     ................
    3a10:	0000ffff 00000000 00000000 ffff0000     ................
    3a20:	ffffffff ffffffff ffffffff 00000000     ................
	...
    3a38:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3a80:	0000ffff 00000000 00000000 00000000     ................
	...
    3a98:	0000ffff 00000000 00000000 00000000     ................
	...
    3ae8:	ffffffff ffffffff 0000ffff 00000000     ................
    3af8:	ffffffff ffffffff ffffffff ffffffff     ................
    3b08:	ffffffff 00000000 ffff0000 ffffffff     ................
    3b18:	ffffffff ffffffff ffffffff 0000ffff     ................
    3b28:	00000000 ffffffff ffffffff ffffffff     ................
    3b38:	ffffffff ffffffff 00000000 ffff0000     ................
    3b48:	ffffffff ffffffff ffffffff ffffffff     ................
    3b58:	0000ffff 00000000 ffffffff ffffffff     ................
    3b68:	ffffffff ffffffff ffffffff 00000000     ................
    3b78:	ffff0000 ffffffff ffffffff ffffffff     ................
    3b88:	ffffffff 0000ffff 00000000 ffffffff     ................
    3b98:	ffffffff ffffffff ffffffff ffffffff     ................
    3ba8:	00000000 ffff0000 ffffffff ffffffff     ................
    3bb8:	ffffffff ffffffff 0000ffff 00000000     ................
    3bc8:	ffffffff ffffffff ffffffff ffffffff     ................
    3bd8:	ffffffff 00000000 ffff0000 ffffffff     ................
    3be8:	ffffffff ffffffff ffffffff 0000ffff     ................
    3bf8:	00000000 ffffffff ffffffff ffffffff     ................
    3c08:	ffffffff ffffffff 00000000 ffff0000     ................
    3c18:	ffffffff ffffffff ffffffff ffffffff     ................
    3c28:	0000ffff 00000000 ffffffff ffffffff     ................
    3c38:	ffffffff ffffffff ffffffff 00000000     ................
    3c48:	ffff0000 ffffffff ffffffff ffffffff     ................
    3c58:	ffffffff 0000ffff 00000000 ffffffff     ................
    3c68:	ffffffff ffffffff ffffffff ffffffff     ................
    3c78:	00000000 ffff0000 ffffffff ffffffff     ................
    3c88:	ffffffff ffffffff 0000ffff 00000000     ................
    3c98:	ffffffff ffffffff ffffffff ffffffff     ................
    3ca8:	ffffffff 00000000 ffff0000 ffffffff     ................
    3cb8:	ffffffff 0000ffff 00000000 00000000     ................
	...
    3cd4:	0000ffff 00000000 00000000 00000000     ................
	...
    3d10:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3d28:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3d44:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3d5c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3d78:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3d90:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3df8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3e14:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3e2c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3e48:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3e60:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3e7c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3e94:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3eb0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3ec8:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3ef4:	ffff0000 00000000 00000000 00000000     ................
	...
    3f30:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3f4c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3f64:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3f80:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3f98:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    3fb4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    3ff8:	ffff0000 00000000 00000000 00000000     ................
	...
    401c:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4034:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4050:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    4068:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    4084:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    409c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    40b8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    40d0:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
    40ec:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    414c:	ffff0000 ffffffff ffffffff 00000000     ................
    415c:	ffff0000 ffffffff ffffffff ffffffff     ................
    416c:	ffffffff 0000ffff 00000000 ffffffff     ................
    417c:	ffffffff ffffffff ffffffff ffffffff     ................
    418c:	00000000 ffff0000 ffffffff ffffffff     ................
    419c:	ffffffff ffffffff 0000ffff 00000000     ................
    41ac:	ffffffff ffffffff ffffffff ffffffff     ................
    41bc:	ffffffff 00000000 ffff0000 ffffffff     ................
    41cc:	ffffffff ffffffff ffffffff 0000ffff     ................
    41dc:	00000000 ffffffff ffffffff ffffffff     ................
    41ec:	ffffffff ffffffff 00000000 ffff0000     ................
    41fc:	ffffffff ffffffff ffffffff ffffffff     ................
    420c:	0000ffff 00000000 ffffffff ffffffff     ................
    421c:	ffffffff ffffffff ffffffff 00000000     ................
    422c:	ffff0000 ffffffff ffffffff ffffffff     ................
    423c:	ffffffff 0000ffff 00000000 ffffffff     ................
    424c:	ffffffff ffffffff ffffffff ffffffff     ................
    425c:	00000000 ffff0000 ffffffff ffffffff     ................
    426c:	ffffffff ffffffff 0000ffff 00000000     ................
    427c:	ffffffff ffffffff ffffffff ffffffff     ................
    428c:	ffffffff 00000000 ffff0000 ffffffff     ................
    429c:	ffffffff ffffffff ffffffff 0000ffff     ................
    42ac:	00000000 ffffffff ffffffff ffffffff     ................
    42bc:	ffffffff ffffffff 00000000 ffff0000     ................
    42cc:	ffffffff ffffffff ffffffff ffffffff     ................
    42dc:	0000ffff 00000000 ffffffff ffffffff     ................
    42ec:	ffffffff ffffffff ffffffff 00000000     ................
    42fc:	ffff0000 ffffffff ffffffff ffffffff     ................
    430c:	ffffffff 0000ffff 00000000 ffffffff     ................
    431c:	ffffffff 0000ffff                       ........

00004324 <_global_impure_ptr>:
    4324:	000043a8 00000043                       .C..C...

0000432c <_init>:
    432c:	e1a0c00d 	mov	r12, sp
    4330:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4334:	e24cb004 	sub	r11, r12, #4
    4338:	e24bd028 	sub	sp, r11, #40	; 0x28
    433c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    4340:	e12fff1e 	bx	lr

00004344 <__init_array_start>:
    4344:	00001454 	.word	0x00001454

00004348 <__frame_dummy_init_array_entry>:
    4348:	00000208                                ....

0000434c <__libc_fini>:
    434c:	e1a0c00d 	mov	r12, sp
    4350:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4354:	e24cb004 	sub	r11, r12, #4
    4358:	e24bd028 	sub	sp, r11, #40	; 0x28
    435c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    4360:	e12fff1e 	bx	lr

00004364 <__fini_array_start>:
    4364:	000001c4 	.word	0x000001c4

00004368 <__cs3_regions>:
    4368:	00000000 	.word	0x00000000
    436c:	00000040 	.word	0x00000040
    4370:	00000040 	.word	0x00000040
    4374:	00004ba8 	.word	0x00004ba8
    4378:	00000158 	.word	0x00000158

0000437c <__cs3_regions_end>:
    437c:	00000000 	.word	0x00000000
